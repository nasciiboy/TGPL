@ -*- mode: org; -*-
..title   > El lenguaje de programacion Go
..author  > Alan A. A. Donovan
..author  > Brian W. Kernighan
..date    > 29/09/2015
..id      > isbn-13 978-0-13-419044-0
..id      > isbn-10 0-13-419044-0
..style   > worg-data/worg.css
..options > toc pygments

@ revision 3b600c, date 29 Sep 2015

# ..center >
#   For Leila and Meg
# < center..
..center >
  Para Leila y Meg
< center..

# * Preface
* Prefacio

#   ..quote >
#     @"(Go is an open source programming language that makes it easy to build
#     simple, reliable, and efficient software.)
#
#     --(From the Go web site at @l(https://golang.org/<>golang.org))
#   < quote..
  ..quote >
    @"(Go es un lenguaje de programacion de codigo abierto, que facilita la
    creacion de software simple, confiable y eficiente.)

    --(Desde el sitio web de Go en  @l(https://golang.org/<>golang.org))
  < quote..

#   Go was conceived in September 2007 by Robert Griesemer, Rob Pike, and Ken
#   Thompson, all at Google, and was announced in November 2009. The goals of the
#   language and its accompanying tools were to be expressive, efficient in both
#   compilation and execution, and effective in writing reliable and robust
#   programs.
  Go fue concebido en septiembre de 2007 por Robert Griesemer, Rob Pike y Ken
  Thompson, todos de Google, y fue anunciado en noviembre de 2009. La meta del
  lenguaje y sus herramientas acompañantes es ser expresivos, eficientes en la
  compilacion y ejecucion, y eficaz en la escritura de programas fiables y
  robustos.

#   Go bears a surface similarity to C and, like C, is a tool for professional
#   programmers, achieving maximum effect with minimum means. But it is much more
#   than an updated version of C. It borrows and adapts good ideas from many other
#   languages, while avoiding features that have led to complexity and unreliable
#   code. Its facilities for concurrency are new and efficient, and its approach
#   to data abstraction and object-oriented programming is unusually flexible. It
#   has automatic memory management or @e(garbage collection).
  Go tiene una similitud superficial con C y, como C, es una herramienta para
  programadores profesionales, logrando el maximo efecto con un minimo de
  medios. Pero es mucho mas que una version actualizada de C. Obtiene y adapta
  buenas ideas de muchos otros idiomas, evitando caracteristicas que han llevado
  a la complejidad y a un codigo poco confiable. Sus comodidades para la
  concurrencia son nuevas y eficientes, y su enfoque hacia la abstraccion de
  datos y la programacion orientada a objetos es inusualmente flexible. Tambien
  cuenta con gestion automatica de memoria o @e(recoleccion de basura).

#   Go is especially well suited for building infrastructure like networked
#   servers, and tools and systems for programmers, but it is truly a
#   general-purpose language and finds use in domains as diverse as graphics,
#   mobile applications, and machine learning. It has become popular as a
#   replacement for untyped scripting languages because it balances expressiveness
#   with safety : Go programs typically run faster than programs written in
#   dynamic languages and suffer far fewer crashes due to unexpected type errors.
  Go es especialmente adecuado para la construccion de infraestructura como
  servidores en red, y herramientas y sistemas para programadores, pero es
  realmente un lenguaje de uso general y se utiliza en dominios tan diversos
  como graficos, aplicaciones moviles y aprendizaje automatico. Se ha vuelto
  popular como un reemplazo para los lenguajes de scripting no tipados porque
  equilibra la expresividad con la seguridad: Los programas Go suelen funcionar
  mas rapido que los programas escritos en lenguajes dinamicos y sufren muchos
  menos accidentes debido a errores de tipado.

#   Go is an open-source project, so source code for its compiler, libraries, and
#   tools is freely available to anyone. Contributions to the project come from an
#   active worldwide community. Go runs on Unix-like systems—Linux, FreeBSD,
#   OpenBSD, Mac OS X—and on Plan 9 and Microsoft Windows. Programs written in one
#   of these environments generally work without modification on the others.
  Go es un proyecto de codigo abierto, por lo que el codigo fuente de su
  compilador, librerias y herramientas esta disponible gratuitamente para
  cualquiera. Las contribuciones al proyecto provienen de una activa comunidad
  mundial. Go se ejecuta en sistemas tipo Unix–GNU/Linux, FreeBSD, OpenBSD,
  Mac OS X–y en Plan 9 y Microsoft Windows. Los programas escritos en uno de
  estos entornos generalmente funcionan sin modificacion en los otros.

#   This book is meant to help you start using Go effectively right away and to
#   use it well, taking full advantage of Go’s language features and standard
#   libraries to write clear, idiomatic, and efficient programs.
  Este libro esta diseñado para ayudarle a comenzar a usar Go efectivamente, de
  inmediato y utilizarlo bien, aprovechando al maximo las caracteristicas
  lingüisticas de Go y las librerias estandar para escribir programas claros,
  idiomaticos y eficientes.

# ** The Origins of Go
** Los origenes de Go

#    Like biological species, successful languages beget offspring that
#    incorporate the advantages of their ancestors; interbreeding sometimes leads
#    to surprising strengths; and, very occasionally, a radical new feature arises
#    without precedent. We can learn a lot about why a language is the way it is
#    and what environment it has been adapted for by looking at these influences.
   Como las especies biologicas, las lenguas exitosas engendran hijos que
   incorporan las ventajas de sus antepasados; El entrecruzamiento a veces
   conduce a fortalezas sorprendentes; Y, muy ocasionalmente, surge un nuevo
   rasgo radical sin precedentes. Podemos aprender mucho sobre por que un
   lenguaje es como es y a que entorno se ha adaptado para ver estas
   influencias.

#    The figure below shows the most important influences of earlier
#    programming languages on the design of Go.
   La siguiente figura muestra las influencias mas importantes de los lenguajes
   de programacion anteriores en el diseño de Go.

#    ..img > img/go-influences.jpg
   ..img > img/go-influences.jpg


#    Go is sometimes described as a @"(C-like language,) or as @"(C for the 21st
#    century.) From C, Go inherited its expression syntax, control-flow
#    statements, basic data types, call-by-value parameter passing, pointers, and
#    above all, C’s emphasis on programs that compile to efficient machine code
#    and cooperate naturally with the abstractions of current operating systems.
   En ocaciones Go se describe como un @"(lenguaje de tipo C,) o como @"(C para
   el siglo 21.) De C, Go heredo su sintaxis de expresiones, instrucciones de
   flujo de control, tipos de datos basicos, paso parametros por valor, punteros
   y, sobre todo, el enfasis de C en programas que compilan codigo maquina
   eficiente y cooperan naturalmente con las abstracciones de los sistemas
   operativos actuales.

#    But there are other ancestors in Go’s family tree. One major stream of
#    influence comes from languages by Niklaus Wirth, beginning with
#    Pascal. Modula-2 inspired the package concept.  Oberon eliminated the
#    distinction between module interface files and module implementation
#    files. Oberon-2 influenced the syntax for packages, imports, and
#    declarations, and Object Oberon provided the syntax for method declarations.
   Pero hay otros antepasados ​​en el arbol genealogico de Go. Una importante
   corriente de influencia proviene de lenguajes de Niklaus Wirth, comenzando
   con Pascal. Modula-2 inspiro el concepto de paquete. Oberon elimino la
   distincion entre los archivos de interfaz del modulo y los archivos de
   implementacion del modulo. Oberon-2 influyo en la sintaxis de paquetes,
   importaciones y declaraciones, y Object Oberon proporciono la sintaxis para
   la declararcion de metodos.

#    Another lineage among Go’s ancestors, and one that makes Go distinctive among
#    recent programming languages, is a sequence of little-known research
#    languages developed at Bell Labs, all inspired by the concept of
#    @e(communicating sequential processes) (CSP) from Tony Hoare’s seminal 1978
#    paper on the foundations of concurrency. In CSP, a program is a parallel
#    composition of processes that have no shared state; the processes communicate
#    and synchronize using channels. But Hoare’s CSP was a formal language for
#    describing the fundamental concepts of concurrency, not a programming
#    language for writing executable programs.
   Otro linaje entre los antepasados de Go, y uno que hace a Go distinto entre
   los lenguajes de programacion mas recientes, es una secuencia de lenguajes de
   investigacion poco conocidos desarrollados en los Laboratorios Bell, todos
   ellos inspiradas en el concepto de comunicacion de procesos secuenciales
   (CSP) del seminal articulo de 1978 de Tony Hoare en los cimientos de la
   concurrencia. En CSP, un programa es una composicion paralela de procesos que
   no tienen estado compartido; Los procesos se comunican y sincronizan
   utilizando canales. Pero el CSP de Hoare era un lenguaje formal para
   describir los conceptos fundamentales de la concurrencia, no un lenguaje de
   programacion para escribir programas ejecutables.

#    Rob Pike and others began to experiment with CSP implementations as actual
#    languages. The first was called Squeak (@"(A language for communicating with
#    mice)), which provided a language for handling mouse and keyboard events,
#    with statically created channels. This was followed by Newsqueak, which
#    offered C-like statement and expression syntax and Pascal-like type
#    notation. It was a purely functional language with garbage collection, again
#    aimed at managing keyboard, mouse, and window events. Channels became
#    first-class values, dynamically created and storable in variables.
   Rob Pike y otros comenzaron a experimentar con implementaciones CSP como
   lenguajes reales. El primero fue llamado Squeak (@"(Un Lenguaje para
   comunicarce con ratones)), que proporcionaron un lenguaje para el manejo de
   eventos de raton y teclado, con canales estaticamente creados. Esto fue
   seguido por Newsqueak, que ofrecia declaraciones y sintaxis de expresion como
   C y la notacion de tipo Pascal. Se trataba de un lenguaje puramente funcional
   con recoleccion de basura, dirigido nuevamente a administrar eventos de
   teclado, raton y ventanas. Los canales se convirtieron en valores de primera
   clase, creados dinamicamente y almacenados en variables.

#    The Plan 9 operating system carried these ideas forward in a language called
#    Alef. Alef tried to make Newsqueak a viable system programming language, but
#    its omission of garbage collection made concurrency too painful.
   El sistema operativo Plan 9 llevo adelante estas ideas en un lenguaje llamado
   Alef. Alef trato de hacer de Newsqueak un lenguaje viable para la
   programacion de sistemas, pero su omision de un recoleccion de basura hizo
   que la concurrencia fuera demasiado dolorosa.

#    Other constructions in Go show the influence of non-ancestral genes here and
#    there; for example @c(iota) is loosely from APL, and lexical scope with nested
#    functions is from Scheme (and most languages since). Here too we find novel
#    mutations. Go’s innovative slices provide dynamic arrays with efficient
#    random access but also permit sophisticated sharing arrangements reminiscent
#    of linked lists. And the defer statement is new with Go.
   Otras construcciones en Go muestran la influencia de genes no ancestrales
   aqui y alla; Por ejemplo @c(iota) es tomado libremente de APL, y el ambito
   lexico con funciones anidadas es de Scheme (y la mayoria de lenguajes desde
   entonces). Aqui tambien encontramos mutaciones novedosas. Go innova
   proporcionando slices (arreglos dinamicos) con acceso aleatorio eficiente,
   pero tambien permite sofisticados arreglos compartidos que recuerdan a las
   listas enlazadas. Y la declaracion @c(defer) es con Go.

# ** The Go Project
** El proyecto Go

#    All programming languages reflect the programming philosophy of their
#    creators, which often includes a significant component of reaction to the
#    perceived shortcomings of earlier languages. The Go project was borne of
#    frustration with several software systems at Google that were suffering from
#    an explosion of complexity. (This problem is by no means unique to Google.)
   Todos los lenguajes de programacion reflejan la filosofia de programacion de
   sus creadores, que a menudo incluye un componente significativo de la
   reaccion a las deficiencias percibidas de los idiomas anteriores. El proyecto
   Go fue frustrado con varios sistemas de software de Google que estaban
   sufriendo una explosion de complejidad. (Este problema no es exclusivo de
   Google.)

#    As Rob Pike put it, @"(complexity is multiplicative): fixing a problem by
#    making one part of the system more complex slowly but surely adds complexity
#    to other parts. With constant pressure to add features and options and
#    configurations, and to ship code quickly, it’s easy to neglect simplicity,
#    even though in the long run simplicity is the key to good software.
   Como Rob Pike dijo, @"(la complejidad es multiplicativa): solucionar un
   problema al hacer una parte del sistema mas compleja, lenta pero seguramente
   añade complejidad a otras partes. Con la presion constante para agregar
   caracteristicas y opciones y configuraciones, y para enviar codigo
   rapidamente, es facil olvidar la sencillez, aunque a la larga la simplicidad
   es la clave para un buen software.

#    Simplicity requires more work at the beginning of a project to reduce an idea
#    to its essence and more discipline over the lifetime of a project to
#    distinguish good changes from bad or pernicious ones. With sufficient effort,
#    a good change can be accommodated without compromising what Fred Brooks
#    called the @"(conceptual integrity) of the design but a bad change cannot,
#    and a pernicious change trades simplicity for its shallow cousin,
#    convenience. Only through simplicity of design can a system remain stable,
#    secure, and coherent as it grows.
   La simplicidad requiere mas trabajo al comienzo de un proyecto para reducir
   una idea a su esencia y mas disciplina durante la vida de un proyecto para
   distinguir los buenos cambios, de los malos o perniciosos. Con un esfuerzo
   suficiente, un buen cambio se puede acomodar sin comprometer lo que Fred
   Brooks llamo la @"(integridad conceptual) del diseño, pero un mal cambio no
   puede, un cambio pernicioso negocia la sencillez por uno conveniencia
   superficial. Solo a traves de la simplicidad del diseño un sistema puede
   permanecer estable, seguro y coherente a medida que crece.

#    The Go project includes the language itself, its tools and standard
#    libraries, and last but not least, a cultural agenda of radical
#    simplicity. As a recent high-level language, Go has the benefit of hindsight,
#    and the basics are done well: it has garbage collection, a package system,
#    firstclass functions, lexical scope, a system call interface, and immutable
#    strings in which text is generally encoded in UTF-8. But it has comparatively
#    few features and is unlikely to add more. For instance, it has no implicit
#    numeric conversions, no constructors or destructors, no operator overloading,
#    no default parameter values, no inheritance, no generics, no exceptions, no
#    macros, no function annotations, and no thread-local storage. The language is
#    mature and stable, and guarantees backwards compatibility: older Go programs
#    can be compiled and run with newer versions of compilers and standard
#    libraries.
   El proyecto Go incluye el lenguaje mismo, sus herramientas y librerias
   estandar, y por ultimo, pero no menos importante, una agenda cultural de
   simplicidad radical. Como un lenguaje reciente de alto nivel, Go tiene el
   beneficio de la retrospectiva, y los fundamentos se hacen bien: tiene
   recoleccion de basura, un sistema de paquetes, funciones de primera clase,
   alcance lexico, una interfaz de llamadas de sistema y cadenas inmutables en
   las que el texto es generalmente codificado en UTF-8. Pero tiene
   comparativamente pocas caracteristicas y es poco probable que agregue
   mas. Por ejemplo, no tiene conversiones numericas implicitas, no hay
   constructores o destructores, no hay sobrecarga de operadores, no hay valores
   de parametros predeterminados, no hay herencia, no hay genericos, no hay
   excepciones, no hay macros, no hay anotaciones de funcion y no hay
   almacenamiento local de subprocesos. El lenguaje es maduro y estable y
   garantiza la compatibilidad con versiones anteriores: los programas Go mas
   antiguos se pueden compilar y ejecutar con versiones mas recientes de
   compiladores y librerias estandar.

#    Go has enough of a type system to avoid most of the careless mistakes that
#    plague programmers in dynamic languages, but it has a simpler type system
#    than comparable typed languages.  This approach can sometimes lead to
#    isolated pockets of @"(untyped) programming within a broader framework of
#    types, and Go programmers do not go to the lengths that C++ or Haskell
#    programmers do to express safety properties as type-based proofs. But in
#    practice Go gives programmers much of the safety and run-time performance
#    benefits of a relatively strong type system without the burden of a complex
#    one.
   Go tiene un sistema de tipado para evitar la mayoria de los errores
   descuidados que afectan a los programadores en lenguajes dinamicos, pero
   tiene un sistema de tipado mas simple que los lenguajes tipados
   comparables. Este enfoque puede conducir en ocaciones a baches de
   programacion @"(sin tipo) dentro de un marco mas amplio de tipos, y los
   programadores Go no van a las longitudes que hacen a los programadores C++ o
   Haskell expresar propiedades de seguridad como pruebas basadas en tipo. Pero
   en la practica, Go da a los programadores gran parte de los beneficios de
   seguridad y rendimiento en tiempo de ejecucion de un sistema de tipado
   relativamente fuerte sin la carga de complejidad.

#    Go encourages an awareness of contemporary computer system design,
#    particularly the importance of locality. Its built-in data types and most
#    library data structures are crafted to work naturally without explicit
#    initialization or implicit constructors, so relatively few memory allocations
#    and memory writes are hidden in the code. Go’s aggregate types (structs and
#    arrays) hold their elements directly, requiring less storage and fewer
#    allocations and pointer indirections than languages that use indirect
#    fields. And since the modern computer is a parallel machine, Go has
#    concurrency features based on CSP, as mentioned earlier. The variablesize
#    stacks of Go’s lightweight threads or goroutines are initially small enough
#    that creating one goroutine is cheap and creating a million is practical.
   Go fomenta una conciencia del diseño de sistemas informaticos contemporaneos,
   particularmente la importancia de la localidad. Sus tipos de datos
   incorporados y la mayoria de las estructuras de datos de la libreria estan
   diseñados para funcionar naturalmente sin inicializacion explicita o
   constructores implicitos, por lo que relativamente pocas asignaciones de
   memoria y escrituras de memoria estan ocultas en el codigo. Los tipos
   agregados de Go (estructuras y matrices) mantienen sus elementos
   directamente, requiriendo menos almacenamiento y menos asignaciones e
   indireccion de punteros, que los idiomas que utilizan campos indirectos. Y
   como la computadora moderna es una maquina paralela, Go tiene caracteristicas
   de concurrencia basadas en CSP, como se menciono anteriormente. Los stacs de
   tamaño variable de los hilos ligeros de Go o @e(goroutines) son inicialmente
   lo suficientemente pequeñas como para que crear una goroutine sea barato y
   crear un millon sea practico.

#    Go’s standard library, often described as coming with @"(batteries included,)
#    provides clean building blocks and APIs for I/O, text processing, graphics,
#    cryptography, networking, and distributed applications, with support for many
#    standard file formats and protocols. The libraries and tools make extensive
#    use of convention to reduce the need for configuration and explanation, thus
#    simplifying program logic and making diverse Go programs more similar to each
#    other and thus easier to learn. Projects built using the go tool use only
#    file and identifier names and an occasional special comment to determine all
#    the libraries, executables, tests, benchmarks, examples, platform-specific
#    variants, and documentation for a project; the Go source itself contains the
#    build specification.
   La libreria estandar de Go, a menudo descrita como con @"(baterias
   incluidas,) proporciona bloques de construccion limpios y APIs de E/S,
   procesamiento de texto, graficos, criptografia, redes y aplicaciones
   distribuidas, con soporte para muchos formatos de archivos y protocolos
   estandar. Las librerias y las herramientas hacen uso extensivo de la
   convencion para reducir la necesidad de configuracion y explicaciones,
   simplificando asi la logica del programa y haciendo que diversos programas Go
   sean mas similares entre si y, por lo tanto, mas faciles de aprender. Los
   proyectos creados con la herramienta @$(go) solo utilizan nombres de archivos
   e identificadores y un comentario especial ocasional para determinar todas
   las librerias, ejecutables, pruebas, referencias, ejemplos, variantes
   especificas de la plataforma y documentacion para un proyecto; El codigo
   fuente de Go en si contiene la especificacion de compilacion.

# ** Organization of the Book
** Organizacion del Libro

#    We assume that you have programmed in one or more other languages, whether
#    compiled like C, C++, and Java, or interpreted like Python, Ruby, and
#    JavaScript, so we won’t spell out everything as if for a total
#    beginner. Surface syntax will be familiar, as will variables and constants,
#    expressions, control flow, and functions.
   Asumimos que usted ha programado en uno o mas lenguajes, compilados como C,
   C++ y Java, o interpretados como Python, Ruby y JavaScript, por lo que no
   solemos explicar todo como si fuera un completo principiante. La sintaxis
   superficial sera familiar, al igual que variables y constantes, expresiones,
   flujo de control y funciones.

#    Chapter 1 is a tutorial on the basic constructs of Go, introduced through a
#    dozen programs for everyday tasks like reading and writing files, formatting
#    text, creating images, and communicating with Internet clients and servers.
   El capitulo 1 es un tutorial sobre las construcciones basicas de Go,
   introducido a traves de una docena de programas para tareas cotidianas como
   leer y escribir archivos, formatear texto, crear imagenes y comunicarse con
   clientes y servidores de Internet.

#    Chapter 2 describes the structural elements of a Go program—declarations,
#    variables, new types, packages and files, and scope. Chapter 3 discusses
#    numbers, booleans, strings, and constants, and explains how to process
#    Unicode. Chapter 4 describes composite types, that is, types built up from
#    simpler ones using arrays, maps, structs, and slices, Go’s approach to
#    dynamic lists. Chapter 5 covers functions and discusses error handling,
#    @c(panic) and @c(recover), and the @c(defer) statement.
   El capitulo 2 describe los elementos estructurales de un programa
   Go–declaraciones, variables, nuevos tipos, paquetes y archivos, y alcance. El
   capitulo 3 analiza numeros, booleanos, cadenas y constantes, y explica como
   procesar Unicode. El capitulo 4 describe los tipos compuestos, es decir, los
   tipos construidos a partir de los mas sencillos utilizando arreglos, mapas,
   estructuras y slices, la aproximacion de Go para listas dinamicas. El
   capitulo 5 cubre las funciones y discute el manejo de errores,
   @c(panic) y @c(recover), y la sentencia @c(defer).

#    Chapters 1 through 5 are thus the basics, things that are part of any
#    mainstream imperative language. Go’s syntax and style sometimes differ from
#    other languages, but most programmers will pick them up quickly. The
#    remaining chapters focus on topics where Go’s approach is less conventional:
#    methods, interfaces, concurrency, packages, testing, and reflection.
   Los capitulos 1 a 5 son, son por lo tanto, lo basico, las cosas que forman
   parte de cualquier lenguaje imperativo popular. La sintaxis y el estilo de Go
   a veces difieren de otros lenguajes, pero la mayoria de los programadores los
   recogeran rapidamente. Los capitulos restantes se centran en temas en los que
   el enfoque de Go es menos convencional: metodos, interfaces, concurrencia,
   paquetes, pruebas y reflexion.

#    Go has an unusual approach to object-oriented programming. There are no class
#    hierarchies, or indeed any classes; complex object behaviors are created from
#    simpler ones by composition, not inheritance. Methods may be associated with
#    any user-defined type, not just structures, and the relationship between
#    concrete types and abstract types (@e(interfaces)) is implicit, so a concrete
#    type may satisfy an interface that the type’s designer was unaware
#    of. Methods are covered in Chapter 6 and interfaces in Chapter 7.
   Go tiene un acercamiento inusual a la programacion orientada a objetos. No
   hay jerarquias de clase, o de hecho ninguna clase; Los comportamientos de
   objetos complejos se crean a partir de los mas simples por composicion, no
   por herencia. Los metodos pueden ser asociados con cualquier tipo definido
   por el usuario, no solo las estructuras, y la relacion entre tipos concretos
   y tipos abstractos (@e(interfaces)) es implicita, por lo que un tipo concreto
   puede satisfacer una interfaz que el diseñador del tipo desconocia. Los
   metodos estan cubiertos en el capitulo 6, las interfaces en el capitulo 7.

#    Chapter 8 presents Go’s approach to concurrency, which is based on the idea
#    of communicating sequential processes (CSP), embodied by goroutines and
#    channels. Chapter 9 explains the more traditional aspects of concurrency
#    based on shared variables.
   El capitulo 8 presenta el enfoque de Go a la concurrencia, que se basa en la
   idea de comunicar procesos secuenciales (CSP), incorporados por goroutines y
   canales. El Capitulo 9 explica los aspectos mas tradicionales de la
   concurrencia basados ​​en variables compartidas.

#    Chapter 10 describes packages, the mechanism for organizing libraries. This
#    chapter also shows how to make effective use of the @$(go) tool, which
#    provides for compilation, testing, benchmarking, program formatting,
#    documentation, and many other tasks, all within a single command.
   El capitulo 10 describe los paquetes, el mecanismo para organizar las
   librerias. Este capitulo tambien muestra como hacer un uso efectivo de la
   herramienta @$(go), provista para la compilacion, pruebas, benchmarking,
   formateo del programa, documentacion y muchas otras tareas, todo dentro de un
   solo comando.

#    Chapter 11 deals with testing, where Go takes a notably lightweight approach,
#    avoiding abstraction-laden frameworks in favor of simple libraries and
#    tools. The testing libraries provide a foundation atop which more complex
#    abstractions can be built if necessary.
   El capitulo 11 trata de las pruebas, donde Go adopta un enfoque notablemente
   ligero, evitando framewoks cargados de abstraccion en favor de librerias y
   herramientas simples. Las librerias de pruebas proporcionan una base sobre
   la que se pueden construir abstracciones mas complejas si es necesario.

#    Chapter 12 discusses reflection, the ability of a program to examine its own
#    representation during execution. Reflection is a powerful tool, though one to
#    be used carefully; this chapter explains finding the right balance by showing
#    how it is used to implement some important Go libraries. Chapter 13 explains
#    the gory details of low-level programming that uses the @c(unsafe) package to
#    step around Go’s type system, and when that is appropriate.
   El capitulo 12 discute la reflexion, la capacidad de un programa para
   examinar su propia representacion durante la ejecucion. La reflexion es una
   herramienta poderosa, aunque debe ser usada con cuidado; Este capitulo
   explica como encontrar el equilibrio correcto, mostrando como se utiliza para
   implementar algunas librerias importantes en Go. El capitulo 13 explica los
   detalles morbosos de programacion a bajo nivel que utiliza el paquete
   @c(unsafe) para dar un paso alrededor del sistema de tipado de Go, y cuando
   es apropiada eso.

#    Each chapter has a number of exercises that you can use to test your
#    understanding of Go, and to explore extensions and alternatives to the
#    examples from the book.
   Cada capitulo tiene una serie de ejercicios que puedes usar para probar tu
   comprension de Go, y para explorar extensiones y alternativas a los ejemplos
   del libro.

#    All but the most trivial code examples in the book are available for download
#    from the public Git repository at @l(http://www.gopl.io/<>gopl.io). Each
#    example is identified by its package import path and may be conveniently
#    fetched, built, and installed using the @$(go get) command. You’ll need to
#    choose a directory to be your Go workspace and set the @c(GOPATH) environment
#    variable to point to it.  The go tool will create the directory if
#    necessary. For example:
   Todos menos los ejemplos de codigo mas triviales en el libro estan
   disponibles para su descarga desde un repositorio Git publico en
   @l(http://www.gopl.io/<>gopl.io). Cada ejemplo se identifica por su ruta de
   importacion paquete y puede ser convenientemente localizado, construido e
   instalado utilizando el comando @$(go get). tendra que elegir un directorio
   para ser su espacio de trabajo y establecer la variable de entorno @c(GOPATH)
   apuntando a este. La herramienta @$(go) creara el directorio si es necesario.
   Por ejemplo:

#    ..src > sh
#      $ export GOPATH=$HOME/gobook        # choose workspace directory
#      $ go get gopl.io/ch1/helloworld     # fetch, build, install
#      $ $GOPATH/bin/helloworld            # run
#      Hello, 世界
#    < src..
   ..src > sh
     $ export GOPATH=$HOME/gobook        # Elegir el directorio de trabajo
     $ go get gopl.io/ch1/helloworld     # buscar, construir, instalar
     $ $GOPATH/bin/helloworld            # ejecutar
     Hello, 世界
   < src..

#    To run the examples, you will need at least version 1.5 of Go.
   Para ejecutar los ejemplos, necesitara al menos la version 1.5 de Go.

#    ..src > sh
#      $ go version
#      go version go1.5 linux/amd64
#    < src..
   ..src > sh
     $ go version
     go version go1.5 linux/amd64
   < src..

#    Follow the instructions at @l(https://golang.org/doc/install) if the go tool
#    on your computer is older or missing.
   Siga las instrucciones en @l(https://golang.org/doc/install) si en su equipo
   la herramienta @$(go) esta ausente o es anterior.

# ** Where to Find More Information
** Donde encontrar mas informacion

#    The best source for more information about Go is the official web site,
#    @l(https://golang.org), which provides access to the documentation, including
#    the @e(Go Programming Language Specification), standard packages, and the
#    like. There are also tutorials on how to write Go and how to write it well,
#    and a wide variety of online text and video resources that will be valuable
#    complements to this book. The Go Blog at @l(https://blog.golang.org<>blog.golang.org)
#    publishes some of the best writing on Go, with articles on the state of the
#    language, plans for the future, reports on conferences, and in-depth
#    explanations of a wide variety of Go-related topics.
   La mejor fuente para obtener mas informacion sobre Go es el sitio web
   oficial, @l(https://golang.org) , que proporciona acceso a la documentacion,
   incluyendo la @e(Especificacion del Lenguaje de Programacion Go), los
   paquetes estandar, y similares. Tambien hay tutoriales sobre como escribir Go
   y como escribirlo bien, y una amplia variedad de recursos de texto y video en
   linea que seran complementos valiosos para este libro. El Blog de Go se
   encuentra en @l(https://blog.golang.org<>blog.golang.org) donde se publican
   algunos de los mejores escritos en Go, con articulos sobre el estado del
   lenguaje, los planes a futuro, los informes sobre conferencias y
   explicaciones en profundidad de una amplia variedad de temas relacionados.

#    One of the most useful aspects of online access to Go (and a regrettable
#    limitation of a paper book) is the ability to run Go programs from the web
#    pages that describe them. This functionality is provided by the Go Playground
#    at @l(https://play.golang.org<>play.golang.org), and may be embedded within
#    other pages, such as the home page at @l(https://golang.org<>golang.org) or
#    the documentation pages served by the godoc tool.
   Uno de los aspectos mas utiles del acceso en linea a Go (y una limitacion
   lamentable de un libro de papel) es la capacidad de ejecutar programas de Go
   desde las paginas web que los describen. Esta funcionalidad es proporcionada
   por Go Playground en @l(https://play.golang.org<>play.golang.org), y puede
   ser embebido dentro de otras paginas, como la pagina de inicio en
   @l(https://golang.org<>golang.org) o las paginas de documentacion provistas
   por la herramienta @$(godoc).

#    The Playground makes it convenient to perform simple experiments to check
#    one’s understanding of syntax, semantics, or library packages with short
#    programs, and in many ways takes the place of a @e(read-eval-print loop)
#    (REPL) in other languages. Its persistent URLs are great for sharing snippets
#    of Go code with others, for reporting bugs or making suggestions.
   Playground hace que sea conveniente llevar a cabo experimentos sencillos para
   comprobar la propia comprension de la sintaxis, la semantica, o paquetes de
   librerias con programas cortos, y en muchos sentidos toma el lugar de un
   @e(bucle leer-evaluar-imprimir) (@e(read-eval-print loop) o REPL) en otros
   lenguajes. Sus URLs persistentes son ideales para compartir fragmentos de
   codigo con otros, para informar sobre errores o hacer sugerencias.

#    Built atop the Playground, the Go Tour at @l(https://tour.golang.org<>tour.golang.org)
#    is a sequence of short interactive lessons on the basic ideas and
#    constructions of Go, an orderly walk through the language.
   Construido sobre Playground, el Tour Go en @l(https://tour.golang.org<>tour.golang.org)
   es una secuencia de breves lecciones interactivas sobre las ideas basicas y
   construcciones de Go, un paseo ordenado por atraves del lenguaje.

#    The primary shortcoming of the Playground and the Tour is that they allow
#    only standard libraries to be imported, and many library features—networking,
#    for example—are restricted for practical or security reasons. They also
#    require access to the Internet to compile and run each program. So for more
#    elaborate experiments, you will have to run Go programs on your own
#    computer. Fortunately the download process is straightforward, so it should
#    not take more than a few minutes to fetch the Go distribution from @l(https://golang.org<>golang.org)
#    and start writing and running Go programs of your own.
   El principal inconveniente del Playground y del Tour es que permiten que solo
   se importen librerias estandar, y muchas funciones de la libreria–por
   ejemplo, redes–estan restringidas por razones practicas o de
   seguridad. Tambien requiere de acceso a Internet para compilar y ejecutar
   cada programa. Asi que para experimentos mas elaborados, tendra que ejecutar
   programas Go en su propia computadora. Afortunadamente, el proceso de
   descarga es sencillo, por lo que no debe tomar mas de unos minutos para
   buscar la Go distribucion desde @l(https://golang.org<>golang.org) y empezar
   a escribir y ejecutar programas por su cuenta.

#    Since Go is an open-source project, you can read the code for any type or
#    function in the standard library online at @l(https://golang.org/pkg); the
#    same code is part of the downloaded distribution. Use this to figure out how
#    something works, or to answer questions about details, or merely to see how
#    experts write really good Go.
   Ya que Go es un proyecto de codigo abierto, se puede leer el codigo fuente de
   cualquier tipo o funcion en la libreria estandar en
   @l(https://golang.org/pkg); el mismo codigo forma parte de la distribucion
   descargada. Utilice esto para averiguar como funciona algo, o para responder
   a preguntas sobre los detalles, o simplemente para ver como los expertos
   escriben bueno Go.

# ** Acknowledgments
** Agradecimientos

#    Rob Pike and Russ Cox, core members of the Go team, read the manuscript
#    several times with great care; their comments on everything from word choice
#    to overall structure and organization have been invaluable. While preparing
#    the Japanese translation, Yoshiki Shibata went far beyond the call of duty;
#    his meticulous eye spotted numerous inconsistencies in the English text and
#    errors in the code. We greatly appreciate thorough reviews and critical
#    comments on the entire manuscript from Brian Goetz, Corey Kosak, Arnold
#    Robbins, Josh Bleecher Snyder, and Peter Weinberger.
   Rob Pike y Russ Cox, miembros centrales del equipo de Go, leyeron el
   manuscrito varias veces con mucho cuidado; Sus comentarios sobre todo, desde
   la eleccion de palabras hasta la estructura general y la organizacion han
   sido invaluables. Mientras preparaba la traduccion japonesa, Yoshiki Shibata
   iba mucho mas alla del llamado del deber; Su ojo meticuloso observo numerosas
   inconsistencias en el texto ingles y errores en el codigo. Apreciamos
   grandemente revisiones completas y comentarios criticos en el manuscrito
   entero de Brian Goetz, Corey Kosak, Arnold Robbins, Josh Bleecher Snyder, y
   Peter Weinberger.

#    We are indebted to Sameer Ajmani, Ittai Balaban, David Crawshaw, Billy
#    Donohue, Jonathan Feinberg, Andrew Gerrand, Robert Griesemer, John Linderman,
#    Minux Ma, Bryan Mills, Bala Natarajan, Cosmos Nicolaou, Paul Staniforth,
#    Nigel Tao, and Howard Trickey for many helpful suggestions. We also thank
#    David Brailsford and Raph Levien for typesetting advice.
   Agradecemos a Sameer Ajmani, Ittai Balaban, David Crawshaw, Billy Donohue,
   Jonathan Feinberg, Andrew Gerrand, Roberto Griesemer, John Linderman, Minux
   Ma, Bryan Mills, Bala Natarajan, Cosmos Nicolaou, Paul Staniforth, Nigel Tao,
   y a Howard Trickey para muchas sugerencias utiles. Tambien damos las gracias
   a David Brailsford y Raph Levien por los consejos sobre composicion
   tipografica.

#    Our editor Greg Doench at Addison-Wesley got the ball rolling originally and
#    has been continuously helpful ever since. The AW production team—John Fuller,
#    Dayna Isley, Julie Nahil, Chuti Prasertsith, and Barbara Wood—has been
#    outstanding; authors could not hope for better support.
   Nuestro redactor Greg Doench de Addison-Wesley consiguio hacer rodar la bola
   originalmente y ha estado ayunando continuamente desde entonces. El equipo de
   produccion de AW–John Fuller, Dayna Isley, Julie Nahil, Chuti Prasertsith y
   Barbara Wood–ha sido excepcional; Los autores no podrian esperar un mejor
   apoyo.

#    Alan Donovan wishes to thank: Sameer Ajmani, Chris Demetriou, Walt Drummond,
#    and Reid Tatge at Google for allowing him time to write; Stephen Donovan, for
#    his advice and timely encouragement; and above all, his wife Leila Kazemi,
#    for her unhesitating enthusiasm and unwavering support for this project,
#    despite the long hours of distraction and absenteeism from family life that
#    it entailed.
   Alan Donovan desea agradecer a: Sameer Ajmani, Chris Demetriou, Walt
   Drummond, y Reid Tatge en Google por permitirle tiempo para escribir; Stephen
   Donovan, por su consejo y oportuno estimulo; Y sobre todo a su esposa Leila
   Kazemi, por su entusiasmo y apoyo inquebrantable a este proyecto, a pesar de
   las largas horas de distraccion y ausentismo de la vida familiar que ello
   conllevaba.

#    Brian Kernighan is deeply grateful to friends and colleagues for their
#    patience and forbearance as he moved slowly along the path to understanding,
#    and especially to his wife Meg, who has been unfailingly supportive of
#    book-writing and so much else.
   Brian Kernighan esta profundamente agradecido a sus amigos y colegas por su
   paciencia y autodominio mientras avanzaba lentamente por el camino hacia la
   comprension, y especialmente a su esposa Meg, que ha sido infaliblemente
   favorable a la escritura de libros y mucho mas.

#    ..quote >
#      -- New York
#      -- October 2015
#    < quote..
   ..quote >
     --Nueva York
     --Octubre 2015
   < quote..

# * Chapter 1 <> Tutorial
* Capitulo 1 <> Tutorial

#   This chapter is a tour of the basic components of Go. We hope to provide
#   enough information and examples to get you off the ground and doing useful
#   things as quickly as possible. The examples here, and indeed in the whole
#   book, are aimed at tasks that you might have to do in the real world. In this
#   chapter we’ll try to give you a taste of the diversity of programs that one
#   might write in Go, ranging from simple file processing and a bit of graphics
#   to concurrent Internet clients and servers. We certainly won’t explain
#   everything in the first chapter, but studying such programs in a new language
#   can be an effective way to get started.
  Este capitulo es un recorrido por los componentes basicos de Go. Esperamos
  proporcionar suficiente informacion y ejemplos para sacarle del barro y hacer
  cosas utiles lo mas rapido posible. Los ejemplos aqui, y de hecho en todo el
  libro, estan dirigidos a tareas que usted podria tener que hacer en el mundo
  real. En este capitulo intentaremos darle una muestra de la diversidad de
  programas que uno podria escribir en Go, que van desde el simple procesamiento
  de archivos y un poco de graficos, a clientes y servidores de Internet
  concurrentes. Ciertamente no vamos a explicar todo en el primer capitulo, pero
  el estudio de estos programas en un nuevo lenguaje puede ser una manera eficaz
  de empezar.

#   When you’re learning a new language, there’s a natural tendency to write code
#   as you would have written it in a language you already know. Be aware of this
#   bias as you learn Go and try to avoid it. We’ve tried to illustrate and
#   explain how to write good Go, so use the code here as a guide when you’re
#   writing your own.
  Cuando estas aprendiendo un nuevo lenguaje, hay una tendencia natural a
  escribir codigo como lo habrias escrito en un idioma que ya conoces. Este
  consciente de este sesgo a medida que aprende Go y trate de evitarlo. Hemos
  tratado de ilustrar y explicar como escribir buen Go, asi que utilice el
  codigo aqui como guia cuando este escribiendo el suyo propio.

# ** Section 1.1 <> Hello, World
** Seccion 1.1 <> Hola, Mundo

#    We’ll start with the now-traditional @"(hello, world) example, which appears
#    at the beginning of @e(The C Programming Language), published in 1978. C is
#    one of the most direct influences on Go, and @"(hello, world) illustrates a
#    number of central ideas.
   Vamos a empezar con la ya tradicional ejemplo del @"(hola, mundo), que
   aparece al comienzo de @e(El lenguaje de programacion C), publicado
   en 1978. C es una de las influencias mas directas sobre el Go, y @"(hola,
   mundo) ilustra una serie de ideas centrales.

#    ..figure > @l(gopl.io/ch1/helloworld/main.go<>gopl.io/ch1/helloworld)
   ..figure > @l(gopl.io/ch1/helloworld/main.go<>gopl.io/ch1/helloworld)

#      ..src > go
#        package main
#
#        import "fmt"
#
#        func main() {
#          fmt.Println("Hello, 世界")
#        }
#      < src..
     ..src > go
       package main

       import "fmt"

       func main() {
         fmt.Println("Hello, 世界")
       }
     < src..

#    Go is a compiled language. The Go toolchain converts a source program and the
#    things it depends on into instructions in the native machine language of a
#    computer. These tools are accessed through a single command called @$(go)
#    that has a number of subcommands. The simplest of these subcommands is
#    @$(run), which compiles the source code from one or more source files whose
#    names end in @f(.go), links it with libraries, then runs the resulting
#    executable file.  (We will use @$($) as the command prompt throughout the
#    book.)
   Go es un lenguaje compilado. El conjunto de herramienta de Go convierte un el
   codigo fuente de un programa y las cosas de las que depende, en instrucciones
   en el lenguaje maquina nativo de una computadora. Se puede acceder a estas
   herramientas a traves de un unico comando llamado @$(go) que tiene una serie
   de subcomandos. El mas simple de estos subcomandos es @$(run) , que compila
   el codigo fuente de uno o mas archivos de origen cuyos nombres terminan en
   @f(.go), lo vincula con las librerias, y a continuacion, ejecuta el archivo
   ejecutable resultante. (Utilizaremos @$($) como el simbolo del sistema en
   todo el libro.)

#    ..src > sh
#      $ go run helloworld.go
#    < src..
   ..src > sh
     $ go run helloworld.go
   < src..

#    Not surprisingly, this prints
   No es sorprendente que esto imprima

#    ..src > sh
#      Hello, 世界
#    < src..
   ..src > sh
     Hello, 世界
   < src..


#    Go natively handles Unicode, so it can process text in all the world’s languages.
   Go maneja Unicode de forma nativa, por lo que puede procesar texto en todos
   los idiomas del mundo.

#    If the program is more than a one-shot experiment, it’s likely that you would
#    want to compile it once and save the compiled result for later use. That is
#    done with @$(go build):
   Si el programa es mas que un experimento de un solo disparo, es probable que
   quiera compilarlo una vez y guardar el resultado compilado para su uso
   posterior. Esto se hace con @$(go build):

#    ..src > sh
#      $ go build helloworld.go
#    < src..
   ..src > sh
     $ go build helloworld.go
   < src..

#    This creates an executable binary file called @$(helloworld) that can be run
#    any time without further processing:
   Esto crea un archivo binario ejecutable llamado @$(helloworld) que se pueden
   ejecutar en cualquier momento sin procesamiento adicional:

#    ..src > sh
#      $ ./helloworld
#      Hello, 世界
#    < src..
   ..src > sh
     $ ./helloworld
     Hello, 世界
   < src..

#    We have labeled each significant example as a reminder that you can obtain
#    the code from the book’s source code repository at
#    @l(http://www.gopl.io/<>(gopl.io): @l(http://www.gopl.io/ch1/helloworld<>gopl.io/ch1/helloworld)
   Hemos etiquetado cada ejemplo significativo como un recordatorio de que
   puede obtener el codigo fuente del libro desde el repositorio en
   @l(http://www.gopl.io/<>(gopl.io): @l(http://www.gopl.io/ch1/helloworld<>gopl.io/ch1/helloworld)

#    If you run @$(go get gopl.io/ch1/helloworld), it will fetch the source code
#    and place it in the corresponding directory. There’s more about this topic in
#    @l(#Section 2.6) and @l(#Section 10.7).
   Si ejecuta @$(go get gopl.io/ch1/helloworld), se obtendra el codigo fuente y
   lo coloca en el directorio correspondiente. Hay mas informacion sobre este
   tema en la @l(#Seccion 2.6) y la @l(#Seccion 10.7).

#    Let’s now talk about the program itself. Go code is organized into packages,
#    which are similar to libraries or modules in other languages. A package
#    consists of one or more @f(.go) source files in a single directory that
#    define what the package does. Each source file begins with a package
#    declaration, here @c(package main), that states which package the file
#    belongs to, followed by a list of other packages that it imports, and then
#    the declarations of the program that are stored in that file.
   Hablemos ahora del programa en si. El codigo Go esta organizado en paquetes,
   que son similares a librerias o modulos en otros lenguajes. Un paquete se
   compone de uno o mas archivos de codigo @f(.go) en un unico directorio que
   definen lo que hace el paquete. Cada archivo de codigo inicia con una
   declaracion del paquete, aqui es @c(package main), que declara a que paquete
   pertenece el archivo, seguido de una lista de otros paquetes que importa, y
   luego las declaraciones del programa que se almacena en el archivo.

#    The Go standard library has over 100 packages for common tasks like input and
#    output, sorting, and text manipulation. For instance, the @c(fmt) package
#    contains functions for printing formatted output and scanning input.
#    @c(Println) is one of the basic output functions in @c(fmt); it prints one or
#    more values, separated by spaces, with a newline character at the end so that
#    the values appear as a single line of output.
   La libreria estandar de Go tiene mas de 100 paquetes para tareas comunes como
   entrada y salida, clasificacion y manipulacion de texto. Por ejemplo, el
   paquete @c(fmt) contiene funciones para la impresion y entrada de datos con
   formato. @c(Println) es una de las funciones de basicas de salida en @c(fmt);
   esta imprime uno o mas valores, separados por espacios, con un caracter de
   nueva linea al final para que los valores aparezcan como una sola linea de
   salida.

#    Package @c(main) is special. It defines a standalone executable program, not
#    a library. Within package @c(main) the @e(function) @c(main) is also
#    special—it’s where execution of the program begins.  Whatever @c(main) does
#    is what the program does. Of course, @c(main) will normally call upon
#    functions in other packages to do much of the work, such as the function
#    @c(fmt.Println).
   El paquete @c(main) es especial. Define un programa ejecutable independiente,
   no una libreria. Dentro del paquete @c(main) la @e(funcion) @c(main) tambien
   es especial–es donde comienza la ejecucion del programa. Cualquier cosa que
   haga @c(main) es lo que hara el programa. Por supuesto, @c(main) sera
   normalmente un llamado a las funciones de otros paquetes que hacen gran parte
   del trabajo, tales como la funcion @c(fmt.Println).

#    We must tell the compiler what packages are needed by this source file;
#    that’s the role of the @c(import) declaration that follows the @c(package)
#    declaration. The @"(hello, world) program uses only one function from one
#    other package, but most programs will import more packages.
   Debemos decirle al compilador que paquetes son necesarios por este archivo de
   codigo fuente; ese es el papel de la declaracion @c(import) seguida por la
   declaracion del @c(paquete). El programa @"(hola, mundial) utiliza solo una
   funcion de otro paquete, pero en la mayoria de los programas se importaran
   mas paquetes.

#    You must import exactly the packages you need. A program will not compile if
#    there are missing imports or if there are unnecessary ones. This strict
#    requirement prevents references to unused packages from accumulating as
#    programs evolve.
   Debe importar exactamente los paquetes que necesita. Un programa no compilara
   si hay importaciones que faltan o si son innecesarias. Este estricto
   requisito impide que las referencias a paquetes no utilizados se acumulen a
   medida que los programas evolucionan.

#    The @c(import) declarations must follow the @c(package) declaration. After
#    that, a program consists of the declarations of functions, variables,
#    constants, and types (introduced by the keywords @c(func), @c(var),
#    @c(const), and @c(type)); for the most part, the order of declarations does
#    not matter. This program is about as short as possible since it declares only
#    one function, which in turn calls only one other function. To save space, we
#    will sometimes not show the @c(package) and @c(import) declarations when
#    presenting examples, but they are in the source file and must be there to
#    compile the code.
   Las declaraciones @c(import) deben ir luego de la declaracion
   @c(package). Despues de eso, un programa consiste en la declaracion de
   funciones, variables, constantes y tipos (introducidos por las palabras clave
   @c(func), @c(var), @c(const), y @c(type)); En su mayor parte, el orden de las
   declaraciones no importa. Este programa es lo mas corto posible, ya que
   declara solo una funcion, que a su vez solo llama a otra funcion. Para
   ahorrar espacio en la presentacion de ejemplos, a veces no mostramos las
   declaraciones @c(package) e @c(import), pero estaran en el codigo del archivo
   y debemos estar alli para compilar el codigo.

#    A function declaration consists of the keyword @c(func), the name of the
#    function, a parameter list (empty for @c(main)), a result list (also empty
#    here), and the body of the function—the statements that define what it
#    does—enclosed in braces. We’ll take a closer look at functions in @l(#Chapter
#    5).
   Una declaracion de funcion consiste en la palabra clave @c(func), el nombre
   de la funcion, una lista de parametros (vacia para @c(main)), una lista de
   resultados (aqui tambien vacia), y el cuerpo de la funcion–las declaraciones
   que definen lo que hace–encerradas entre llaves. Vamos a echar un vistazo mas
   de cerca a las funciones en el @l(#Capitulo 5).

#    Go does not require semicolons at the ends of statements or declarations,
#    except where two or more appear on the same line. In effect, newlines
#    following certain tokens are converted into semicolons, so where newlines are
#    placed matters to proper parsing of Go code. For instance, the opening brace
#    @c({) of the function must be on the same line as the end of the @c(func)
#    declaration, not on a line by itself, and in the expression @c(x + y), a newline
#    is permitted after but not before the @c(+) operator.
   Go no requiere punto y coma al final de las sentencias o declaraciones,
   excepto donde aparecen dos o mas en la misma linea. En efecto, las nuevas
   lineas que siguen ciertas palabras se convierten en punto y coma, por lo que
   cuando se colocan nuevas lineas se colocan en funcion del correcto analisis
   del codigo Go. Por ejemplo, la llave de apertura @c({) de la funcion, debe
   estar en la misma linea, que el final de la declaracion @c(func), no en una
   linea distinta, y en la expresion @c(x + y), se permite un salto de linea
   despues, pero no antes del operador @c(+).

#    Go takes a strong stance on code formatting. The @$(gofmt) tool rewrites code
#    into the standard format, and the @$(go) tool’s @$(fmt) subcommand applies
#    @$(gofmt) to all the files in the specified package, or the ones in the
#    current directory by default. All Go source files in the book have been run
#    through @$(gofmt), and you should get into the habit of doing the same for
#    your own code.  Declaring a standard format by fiat eliminates a lot of
#    pointless debate about trivia and, more importantly, enables a variety of
#    automated source code transformations that would be infeasible if arbitrary
#    formatting were allowed.
   Go toma una fuerte postura en el formato del codigo. La herramienta @$(gofmt)
   reescribe el codigo en el formato estandar, y el subcomando @$(fmt) de la
   herramienta @$(go) aplica @$(gofmt) a todos los archivos en el paquete
   especificado, o por defecto, a los que estan en el directorio actual.  Se ha
   ejecutado @$(gofmt) sobre todos los archivos de codigo fuente en el libro, y
   usted debe optener el habito de hacer lo mismo con su propio codigo. Declarar
   un formato estandar por mandato elimina un monton de debate inutil sobre
   trivialidades y, lo que es mas importante, permite una variedad de
   transformaciones automatizadas de codigo fuente que serian imposibles si se
   permitiera el formato arbitrario.

#    Many text editors can be configured to run @$(gofmt) each time you save a
#    file, so that your source code is always properly formatted. A related tool,
#    @$(goimports), additionally manages the insertion and removal of import
#    declarations as needed. It is not part of the standard distribution but you
#    can obtain it with this command:
   Muchos editores de texto pueden ser configurados para ejecutar @$(gofmt) cada
   vez que se guarda un archivo, por lo que su codigo fuente siempre tendra el
   formato apropiado. Una herramienta relacionada, @$(goimports) , ademas,
   gestiona la insercion y extraccion de las declaraciones de importacion, segun
   sea necesario. No es parte de la distribucion estandar pero se puede obtener
   con este comando:

#    ..src > sh
#      $ go get golang.org/x/tools/cmd/goimports
#    < src..
   ..src > sh
     $ go get golang.org/x/tools/cmd/goimports
   < src..

#    For most users, the usual way to download and build packages, run their
#    tests, show their documentation, and so on, is with the @$(go) tool, which
#    we’ll look at in @l(#Section 10.7).
   Para la mayoria de los usuarios, la forma habitual de descargar y construir
   paquetes, ejecutar pruebas, mostrar su documentacion, y asi sucesivamente, es
   con la herramienta @$(go), que vamos a ver en la @l(#Seccion 10.7).

# ** Section 1.2 <> Command-Line Arguments
** Seccion 1.2 <> Argumentos de la linea de comandos

#    Most programs process some input to produce some output; that’s pretty much
#    the definition of computing. But how does a program get input data on which
#    to operate? Some programs generate their own data, but more often, input
#    comes from an external source: a file, a network connection, the output of
#    another program, a user at a keyboard, command-line arguments, or the like.
#    The next few examples will discuss some of these alternatives, starting with
#    command-line arguments.
   La mayoria de los programas procesan alguna entrada para producir alguna
   salida; Que es mas o menos la definicion de la computacion. Pero, ¿como un
   programa obtiene datos de entrada para operar? Algunos programas generan sus
   propios datos, pero mas a menudo, la entrada proviene de una fuente externa:
   un archivo, una conexion de red, la salida de otro programa, un usuario en un
   teclado, argumentos de linea de comandos o similares. Los siguientes ejemplos
   discutiran algunas de estas alternativas, comenzando con argumentos de linea
   de comandos.

#    The @c(os) package provides functions and other values for dealing with the
#    operating system in a platform-independent fashion. Command-line arguments
#    are available to a program in a variable named @c(Args) that is part of the
#    @c(os) package; thus its name anywhere outside the @c(os) package is
#    @c(os.Args).
   El paquete @c(os) proporciona funciones y otros valores para relacionarse con
   el sistema operativo de una manera independiente de la plataforma. Los
   argumentos de linea de comandos estan disponibles para un programa en una
   variable denominada @c(Args) que forma parte del paquete @c(os); por lo tanto
   su nombre en cualquier lugar fuera del paquete @c(os) es @c(os.Args).

#    The variable @c(os.Args) is a @e(slice) of strings. Slices are a fundamental
#    notion in Go, and we’ll talk a lot more about them soon. For now, think of a
#    slice as a dynamically sized sequence @c(s) of array elements where
#    individual elements can be accessed as @c(s[i]) and a contiguous subsequence
#    as @c(s[m:n]). The number of elements is given by @c[len(s)]. As in most
#    other programming languages, all indexing in Go uses @e(half-open) intervals
#    that include the first index but exclude the last, because it simplifies
#    logic. For example, the slice @c(s[m:n]), where @c[0 ≤ m ≤ n ≤ len(s)],
#    contains @c(n-m) elements.
   Las variables @c(os.Args) es una @e(slice) de strings. Los slices son una
   nocion fundamental en Go, y hablaremos mucho mas sobre ellos pronto. Por
   ahora, piensa en un slice como una secuencia @c(s) de elementos de un arreglo
   de tamaño dinamico, donde los elementos individuales pueden accederse como
   @c(s[i]) y una subsecuencia contigua como @c(s[m:n]). El numero de elementos esta
   dado por @c[len(s)]. Como en la la mayoria de los otros lenguajes de
   programacion, toda  indexacion en Go utiliza intervalos @e(semiabiertos)
   que incluyen el primer indice, pero no incluyen el ultimo, ya que simplifica
   la logica. Por ejemplo, el slice  @c(s[m:n]), donde @c[0 ≤ m ≤ n ≤ len(s)],
   contiene @c(n-m) elementos.

#    The first element of @c(os.Args), @c(os.Args[0]), is the name of the command
#    itself; the other elements are the arguments that were presented to the
#    program when it started execution. A slice expression of the form @c(s[m:n])
#    yields a slice that refers to elements @c(m) through @c(n-1), so the elements
#    we need for our next example are those in the slice
#    @c{os.Args[1:len(os.Args)]}. If @c(m) or @c(n) is omitted, it defaults to 0
#    or @c[len(s)] respectively, so we can abbreviate the desired slice as
#    @c(os.Args[1:]).
   El primer elemento de @c(os.Args), @c(os.Args[0]), es el nombre del comando
   en si; Los otros elementos son los argumentos que se ofresieron al programa
   cuando se inicio la ejecucion. Una expresion de la forma @c(s[m:n]) produce
   un slice que hace referencia a los elementos entre @c(m) y @c(n-1), por lo
   que los elementos que necesitamos para nuestro siguiente ejemplo corresponden
   al slice @c{os.Args[1:len(os.Args)]}. Si @c(m) o @c(n) se omite, el valor
   predeterminado es 0 o @c[len(s)], respectivamente, por lo que se puede
   abreviar el slice deseado como @c(os.Args[1:]).

#    Here’s an implementation of the Unix @$(echo) command, which prints its
#    command-line arguments on a single line. It imports two packages, which are
#    given as a parenthesized list rather than as individual import declarations.
#    Either form is legal, but conventionally the list form is used. The order of
#    imports doesn’t matter; the @$(gofmt) tool sorts the package names into
#    alphabetical order. (When there are several versions of an example, we will
#    often number them so you can be sure of which one we’re talking about.)
   Aqui esta una implementacion del comando @$(echo) de Unix, que imprime sus
   argumentos de linea de comandos en una sola linea. Importa dos paquetes, que
   se dan como una lista entre parentesis en lugar de como declaraciones de
   importacion individuales. Cualquiera de las formas es legal, pero
   convencionalmente se utiliza el formato de lista. El orden de las
   importaciones no importa; la herramienta @$(gofmt) ordena los nombres de los
   paquetes en orden alfabetico. (Cuando hay varias versiones de un ejemplo, a
   menudo las numeraremos para que pueda estar seguro de cual estamos hablando.)

#    ..figure > @l(gopl.io/ch1/echo1/main.go<>gopl.io/ch1/echo1)
   ..figure > @l(gopl.io/ch1/echo1/main.go<>gopl.io/ch1/echo1)

#      ..src > go
#        // Echo1 prints its command-line arguments.
#        package main
#
#        import (
#          "fmt"
#          "os"
#        )
#
#        func main() {
#          var s, sep string
#          for i := 1; i < len(os.Args); i++ {
#            s += sep + os.Args[i]
#            sep = " "
#          }
#          fmt.Println(s)
#        }
#      < src..
     ..src > go
       // Echo1 imprime sus argumentos de linea de comandos
       package main

       import (
         "fmt"
         "os"
       )

       func main() {
         var s, sep string
         for i := 1; i < len(os.Args); i++ {
           s += sep + os.Args[i]
           sep = " "
         }
         fmt.Println(s)
       }
     < src..


#    Comments begin with @c(//). All text from a @c(//) to the end of the line is
#    commentary for programmers and is ignored by the compiler. By convention, we
#    describe each package in a comment immediately preceding its package
#    declaration; for a @c(main) package, this comment is one or more complete
#    sentences that describe the program as a whole.
   Los comentarios comienzan con @c(//). Todo el texto desde @c(//) hasta el
   final de la linea es el comentario para los programadores y es ignorado por
   el compilador. Por convencion, describimos cada paquete en un comentario
   inmediatamente anterior a su declaracion del paquete; para un paquete
   @c(main), este comentario es una o varias frases completas que describen el
   programa en su conjunto.

#    The @c(var) declaration declares two variables @c(s) and @c(sep), of type
#    @c(string). A variable can be initialized as part of its declaration. If it
#    is not explicitly initialized, it is implicitly initialized to the @e(zero
#    value) for its type, which is @c(0) for numeric types and the empty string
#    @c("") for strings.  Thus in this example, the declaration implicitly
#    initializes @c(s) and @c(sep) to empty strings. We’ll have more to say about
#    variables and declarations in @l(#Chapter 2).
   La declaracion @c(var) declara dos variables @c(s) y @c(sep), de tipo
   @c(string). Una variable se puede inicializar como parte de su
   declaracion. Si no se inicia de forma explicita, se inicializa de forma
   implicita al @e(valor cero) para su tipo, que es 0 para los tipos numericos y
   la cadena vacia "" para strings. Asi, en este ejemplo, la declaracion
   implicita inicializa @c(s) y @c(sep) como cadenas vacias. Tendremos mas que
   decir acerca de las variables y las declaraciones en el @l(#Capitulo 2).

#    For numbers, Go provides the usual arithmetic and logical operators. When
#    applied to strings, however, the @c(+) operator @e(concatenates) the values,
#    so the expression
   Para los numeros, Go proporciona los operadores aritmeticos y logicos
   habituales. Cuando se aplica a las cadenas, sin embargo, el operador @c(+)
   @e(concatena) los valores, por lo que la expresion

#    ..src > go
#      sep + os.Args[i]
#    < src..
   ..src > go
     sep + os.Args[i]
   < src..

#    represents the concatenation of the strings @c(sep) and @c(os.Args[i]). The
#    statement we used in the program,
   representa la concatenacion de las cadenas @c(sep) y @c(os.Args[i]) . La
   declaracion que usamos en el programa,

#    ..src > go
#      s += sep + os.Args[i]
#    < src..
   ..src > go
     s += sep + os.Args[i]
   < src..

#    is an @e(assignment statement) that concatenates the old value of @c(s) with
#    @c(sep) and @c(os.Args[i]) and assigns it back to @c(s); it is equivalent to
   es una @e(sencencia de asignacion) que concatena el antiguo valor de @c(s) con @c(sep)
   y @c(os.Args[i]) y lo asigna de nuevo a @c(s); Es equivalente a

#    ..src > go
#      s = s + sep + os.Args[i]
#    < src..
   ..src > go
     s = s + sep + os.Args[i]
   < src..

#    The operator @c(+=) is an @e(assignment operator). Each arithmetic and logical
#    operator like @c(+) or @c(*) has a corresponding assignment operator.
   El operador @c(+=) es un operador de asignacion. Cada operador aritmetico y
   logico como @c(+) o @c(*) tiene un operador de asignacion correspondiente.

#    The @$(echo) program could have printed its output in a loop one piece at a
#    time, but this version instead builds up a string by repeatedly appending new
#    text to the end. The string @c(s) starts life empty, that is, with value
#    @c(""), and each trip through the loop adds some text to it; after the first
#    iteration, a space is also inserted so that when the loop is finished, there
#    is one space between each argument. This is a quadratic process that could be
#    costly if the number of arguments is large, but for @$(echo), that’s
#    unlikely. We’ll show a number of improved versions of @$(echo) in this
#    chapter and the next that will deal with any real inefficiency.
   El programa @$(echo) podria haber impreso su salida en un bucle de una sola
   pieza a la vez, pero en esta version, en su lugar se acumula una cadena
   añadiendo repetidamente nuevo texto hasta el final. La cadena de @c(s)
   comienza su vida vacia, es decir, con el valor "", y cada ciclo a traves del
   bucle añade un poco de texto a ella; Despues de la primera iteracion, tambien
   se inserta un espacio para que cuando el bucle este terminado, haya un
   espacio entre cada argumento. Este es un proceso cuadratico que podria ser
   costoso si el numero de argumentos es grande, pero para @$(echo), eso es poco
   probable. Vamos a mostrar una serie de versiones mejoradas de @$(echo) en
   este capitulo y el siguiente para hacer frente a cualquier ineficiencia real.

#    The loop index variable @c(i) is declared in the first part of the @c(for)
#    loop. The @c(:=) symbol is part of a @e(short variable declaration), a
#    statement that declares one or more variables and gives them appropriate
#    types based on the initializer values; there’s more about this in the next
#    chapter.
   El indice variable @c(i) de bucle se declara en la primera parte del bucle
   @c(for). El @c(:=) simbolo es parte de una @e(declaracion de variables
   compacta), una sentencia que declara una o mas variables y les da los tipos
   apropiados basados en los valores del inicializador; Hay mas informacion al
   respecto en el proximo capitulo.

#    The increment statement @c(i++) adds 1 to @c(i); it’s equivalent to @c(i
#    += 1) which is in turn equivalent to @c(i = i + 1). There’s a corresponding
#    decrement statement @c(i--) that subtracts 1. These are statements, not
#    expressions as they are in most languages in the C family, so @c(j = i++) is
#    illegal, and they are postfix only, so @c(--i) is not legal either.
   La declaracion de incremento @c(i++) añade 1 a @c(i); que es equivalente a
   @c(i += 1), que es a su vez equivalente a @c(i = i + 1). Hay una declaracion
   de decremento correspondiente @c(i--) que resta 1. Estas son declaraciones,
   no expresiones como lo son en la mayoria de los lenguajes en la familia C,
   por lo que @c(j = i++) es ilegal, y solamente son de sufijo, asi @c(--i)
   tampoco es legal.

#    The @c(for) loop is the only loop statement in Go. It has a number of forms,
#    one of which is illustrated here:
   El bucle @c(for) es la unica sentencia de bucle en Go. Tiene una serie de formas,
   una de las cuales se ilustra aqui:

#    ..src > go
#      for initialization; condition; post {
#          // zero or more statements
#      }
#    < src..
   ..src > go
     for inicializacion; condicion; incremento {
         // zero or more statements
     }
   < src..

#    Parentheses are never used around the three components of a @c(for) loop. The
#    braces are mandatory, however, and the opening brace must be on the same line
#    as the @c(post) statement.
   Los parentesis no se utilizan nunca alrededor de los tres componentes de un
   bucle @c(for). Las llaves son obligatorios, sin embargo, y la llave de apertura
   deben estar en la misma linea que la declaracion @c(incremento).

#    The optional @c(initialization) statement is executed before the loop
#    starts. If it is present, it must be a @e(simple statement), that is, a short
#    variable declaration, an increment or assignment statement, or a function
#    call. The @c(condition) is a boolean expression that is evaluated at the
#    beginning of each iteration of the loop; if it evaluates to @c(true), the
#    statements controlled by the loop are executed. The @c(post) statement is
#    executed after the body of the loop, then the condition is evaluated
#    again. The loop ends when the condition becomes false.
   La declaracion opcional @c(inicializacion) se ejecuta antes de que comience
   el bucle. Si esta presente, debe ser una simple declaracion, es decir, una
   declaracion de variables compacta, una declaracion de incremento o asignacion, o
   una llamada a funcion. La @c(condition) es una expresion booleana que se
   evalua en al inicio de cada iteracion del bucle; si se evalua como @c(true),
   las declaraciones controladas por el bucle se ejecutan. La declaracion
   @c(incremento) se ejecuta despues del cuerpo del bucle, luego la
   @c(condicion) se evalua de nuevo. El bucle termina cuando la condicion se
   convierte en falsa.

#    Any of these parts may be omitted. If there is no @c(initialization) and no @c(post),
#    the semicolons may also be omitted:
   Cualquiera de estas partes puede omitirse. Si no hay @c(inicializacion) y
   ningun @c(incremento), el punto y coma tambien pueden omitirse:

#    ..src > go
#      // a traditional "while" loop
#      for condition {
#          // ...
#      }
#    < src..
   ..src > go
     // un tradicional bucle "while"
     for condicion {
         // ...
     }
   < src..

#    If the condition is omitted entirely in any of these forms, for example in
   Si la condicion se omite totalmente en cualquiera de estas formas, por
   ejemplo en

#    ..src > go
#      // a traditional infinite loop
#      for {
#          // ...
#      }
#    < src..
   ..src > go
     // un tradicional bucle infinito
     for {
         // ...
     }
   < src..

#    the loop is infinite, though loops of this form may be terminated in some
#    other way, like a @c(break) or @c(return) statement.
   el bucle es infinito, aunque los bucles de esta forma se pueden terminar de
   alguna otra forma, como una declaracion @c(break) o @c(return).

#    Another form of the @c(for) loop iterates over a @e(range) of values from a
#    data type like a string or a slice. To illustrate, here’s a second version of
#    @$(echo):
   Otra forma en que el bucle @c(for) itera, es sobre un @e(rango) de valores de
   un tipo de datos como un string o un slice. Para ilustrar esto, he aqui una
   segunda version de @$(echo):

#    ..figure > @l(gopl.io/ch1/echo2/main.go<>gopl.io/ch1/echo2)
   ..figure > @l(gopl.io/ch1/echo2/main.go<>gopl.io/ch1/echo2)

#      ..src > go
#        // Echo2 prints its command-line arguments.
#        package main
#
#        import (
#          "fmt"
#          "os"
#        )
#
#        func main() {
#          s, sep := "", ""
#          for _, arg := range os.Args[1:] {
#            s += sep + arg
#            sep = " "
#          }
#          fmt.Println(s)
#        }
#      < src..
     ..src > go
       // Echo2 imprime sus argumentos de linea de comandos
       package main

       import (
         "fmt"
         "os"
       )

       func main() {
         s, sep := "", ""
         for _, arg := range os.Args[1:] {
           s += sep + arg
           sep = " "
         }
         fmt.Println(s)
       }
     < src..


#    In each iteration of the loop, @c(range) produces a pair of values: the index and
#    the value of the element at that index. In this example, we don’t need the
#    index, but the syntax of a @c(range) loop requires that if we deal with the
#    element, we must deal with the index too. One idea would be to assign the
#    index to an obviously temporary variable like @c(temp) and ignore its value, but
#    Go does not permit unused local variables, so this would result in a
#    compilation error.
   En cada iteracion del bucle, @c(range) produce un par de valores: el indice y
   el valor del elemento en ese indice. En este ejemplo, no necesitamos el
   indice, pero la sintaxis de un bucle @c(range) requiere que si tratamos con
   el elemento, debemos tratar tambien con el indice. Una idea seria asignar el
   indice a una variable temporal, como @c(temp) y pasar por alto su valor, pero
   Go no permite tener variables locales sin utilizar, por lo que esto daria
   lugar a un error de compilacion.

#    The solution is to use the @e(blank identifier), whose name is @c(_) (that
#    is, an underscore). The blank identifier may be used whenever syntax requires
#    a variable name but program logic does not, for instance to discard an
#    unwanted loop index when we require only the element value. Most Go
#    programmers would likely use @c(range) and @c(_) to write the @$(echo)
#    program as above, since the indexing over @c(os.Args) is implicit, not
#    explicit, and thus easier to get right.
   La solucion es utilizar el @e(identificador en blanco), cuyo nombre es @c(_)
   (esto es, un guion bajo). El identificador en blanco puede utilizarse siempre
   que la sintaxis requiera un nombre de variable, pero la logica del programa
   no lo haga, por ejemplo para descartar un indice no deseado del bucle cuando
   solo necesitamos el valor del elemento. La mayoria de los programadores Go
   probablemente usarian @c(range) y @c(_) para escribir el programa @$(echo)
   anterior, ya que la indexacion sobre @c(os.Args) es implicita, no explicita,
   y por lo tanto mas facil de hacerlo bien.

#    This version of the program uses a short variable declaration to declare and
#    initialize @c(s) and @c(sep), but we could equally well have declared the
#    variables separately. There are several ways to declare a string variable;
#    these are all equivalent:
   Esta version del programa utiliza una breve declaracion de variables para
   declarar e inicializar @c(s) y @c(sep), pero podria igualmente haber declarado las
   variables por separado. Hay varias maneras de declarar una variable de
   cadena; Todas estas son equivalentes:

#    ..src > go
#      s := ""
#      var s string
#      var s = ""
#      var s string = ""
#    < src..
   ..src > go
     s := ""
     var s string
     var s = ""
     var s string = ""
   < src..

#    Why should you prefer one form to another? The first form, a short variable
#    declaration, is the most compact, but it may be used only within a function,
#    not for package-level variables.  The second form relies on default
#    initialization to the zero value for strings, which is @c(""). The third form is
#    rarely used except when declaring multiple variables. The fourth form is
#    explicit about the variable’s type, which is redundant when it is the same as
#    that of the initial value but necessary in other cases where they are not of
#    the same type. In practice, you should generally use one of the first two
#    forms, with explicit initialization to say that the initial value is
#    important and implicit initialization to say that the initial value doesn’t
#    matter.
   Por que usted deberia preferir una forma sobre otra? El primer formato, una
   declaracion de variable compacta, es el mas compacto, pero puede ser utilizado
   solo dentro de una funcion, no para variables de nivel de paquete. La segunda
   forma se basa en la inicializacion por defecto al valor cero para strings,
   que es @c("") . La tercera forma se utiliza raramente excepto cuando se
   declaran multiples variables. La cuarta forma es explicita sobre el tipo de
   la variable, que es redundante cuando es el mismo que el del valor inicial
   pero necesario en otros casos donde no son del mismo tipo. En la practica,
   generalmente debe utilizar una de las dos primeras formas, con inicializacion
   explicita para decir que el valor inicial es importante e implicita para
   decir que el valor inicial no importa.

#    As noted above, each time around the loop, the string @c(s) gets completely
#    new contents. The @c(+=) statement makes a new string by concatenating the
#    old string, a space character, and the next argument, then assigns the new
#    string to @c(s). The old contents of @c(s) are no longer in use, so they will
#    be garbage-collected in due course.
   Como se señalo anteriormente, cada iteracion alrededor del bucle, la cadena
   @c(s) obtiene contenidos completamente nuevos. La declaracion @c(+=) crea una
   nueva cadena mediante la concatenacion de la cadena antigua, un caracter de
   espacio, y el siguiente argumento, a continuacion, asigna la nueva cadena a
   @c(s). El contenido antiguo del @c(s) ya no estan en uso, por lo que sera
   recolectado por el recolector de basura en su debido momento.

#    If the amount of data involved is large, this could be costly. A simpler and
#    more efficient solution would be to use the @c(Join) function from the @c(strings)
#    package:
   Si la cantidad de datos involucrados es grande, esto podria ser costoso. Una
   solucion mas simple y mas eficiente seria utilizar la funcion @c(Join) del
   paquete @c(strings):

#    ..figure > @l(gopl.io/ch1/echo3/main.go<>gopl.io/ch1/echo3)
   ..figure > @l(gopl.io/ch1/echo3/main.go<>gopl.io/ch1/echo3)

#      ..src > go
#        func main() {
#          fmt.Println(strings.Join(os.Args[1:], " "))
#        }
#      < src..
     ..src > go
       func main() {
         fmt.Println(strings.Join(os.Args[1:], " "))
       }
     < src..


#    Finally, if we don’t care about format but just want to see the values,
#    perhaps for debugging, we can let @c(Println) format the results for us:
   Por ultimo, si no nos interesa el formato, pero solo queremos ver los
   valores, tal vez para depurar, podemos dejar que @c(Println) formatee el
   resultado por nosotros:

#    ..src > go
#      fmt.Println(os.Args[1:])
#    < src..
   ..src > go
     fmt.Println(os.Args[1:])
   < src..

#    The output of this statement is like what we would get from @c(strings.Join),
#    but with surrounding brackets. Any slice may be printed this way.
   El resultado de esta sentencia es como la que se pueden conseguir mediante
   @c(strings.Join), pero con corchetes al rededor. Cualquier slice se puede
   imprimir de esta manera.

#    @b(Exercise 1.1): Modify the @$(echo) program to also print @c(os.Args[0]),
#    the name of the command that invoked it.
   @b(Ejercicio 1.1): Modificar el programa @$(echo) para imprimir tambien
   @c(os.Args[0]), el nombre del comando que lo invoco.

#    @b(Exercise 1.2): Modify the @$(echo) program to print the index and value of
#    each of its arguments, one per line.
   @b(Ejercicio 1.2): Modificar el programa @$(echo) para imprimir el indice y el
   valor de cada uno de sus argumentos, uno por linea.

#    @b(Exercise 1.3): Experiment to measure the difference in running time
#    between our potentially inefficient versions and the one that uses
#    @c(strings.Join). (@l(#Section 1.6) illustrates part of the @c(time) package,
#    and @l(#Section 11.4) shows how to write benchmark tests for systematic
#    performance evaluation.)
   @b(Ejercicio 1.3): Experimento para medir la diferencia en el tiempo de
   funcionamiento entre nuestras versiones potencialmente ineficientes y el que
   utiliza @c(strings.Join). ( La @l(#Seccion 1.6) ilustra parte del paquete
   @c(time), y la @l(#Seccion 11.4) muestra como escribir pruebas de referencia
   para la evaluacion sistematica del rendimiento.)

# ** Section 1.3 <> Finding Duplicate Lines
** Seccion 1.3 <> Encontrar lineas duplicadas

#    Programs for file copying, printing, searching, sorting, counting, and the
#    like all have a similar structure: a loop over the input, some computation on
#    each element, and generation of output on the fly or at the end. We’ll show
#    three variants of a program called @$(dup); it is partly inspired by the Unix
#    @$(uniq) command, which looks for adjacent duplicate lines. The structures
#    and packages used are models that can be easily adapted.
   Los programas para copiar archivos, imprimir, buscar, clasificar, contar y
   similares tienen una estructura similar: un bucle sobre la entrada, algun
   calculo sobre cada elemento y generacion de salida al vuelo o al
   final. Mostraremos tres variantes de un programa llamado @$(dup); se inspira
   en parte por el comando Unix @$(uniq), que mira las lineas duplicadas
   adyacentes. Las estructuras y paquetes utilizados son modelos que se pueden
   adaptar facilmente.

#    The first version of @$(dup) prints each line that appears more than once in the
#    standard input, preceded by its count. This program introduces the @c(if)
#    statement, the @$(map) data type, and the @c(bufio) package.
   La primer version del @$(dup) imprime cada linea que aparece mas de una vez en
   la entrada estandar, precedido por su recuento. Este programa presenta la declaracion
   @c(if), el  tipo de datos @c(map) y el paquete @c(bufio).

#    ..figure > @l(gopl.io/ch1/dup1/main.go<>gopl.io/ch1/dup1)
   ..figure > @l(gopl.io/ch1/dup1/main.go<>gopl.io/ch1/dup1)

#      ..src > go
#        // Dup1 prints the text of each line that appears more than
#        // once in the standard input, preceded by its count.
#        package main
#
#        import (
#          "bufio"
#          "fmt"
#          "os"
#        )
#
#        func main() {
#          counts := make(map[string]int)
#          input := bufio.NewScanner(os.Stdin)
#          for input.Scan() {
#            counts[input.Text()]++
#          }
#          // NOTE: ignoring potential errors from input.Err()
#          for line, n := range counts {
#            if n > 1 {
#              fmt.Printf("%d\t%s\n", n, line)
#            }
#          }
#        }
#      < src..
     ..src > go
       // Dup1 imprime el texto de cada linea que aparece mas de
       // una vez en la entrada estandar, precedida por su recuento.
       package main

       import (
         "bufio"
         "fmt"
         "os"
       )

       func main() {
         counts := make(map[string]int)
         input := bufio.NewScanner(os.Stdin)
         for input.Scan() {
           counts[input.Text()]++
         }
         // NOTA: ignorando posibles errores de input.Err ()
         for line, n := range counts {
           if n > 1 {
             fmt.Printf("%d\t%s\n", n, line)
           }
         }
       }
     < src..


#    As with @c(for), parentheses are never used around the condition in an @c(if)
#    statement, but braces are required for the body. There can be an optional
#    @c(else) part that is executed if the condition is false.
   Al igual que con @c(for), nunca se usan parentesis alrededor de la
   declaracion de la condicion @c(if), pero se requieren llaves para el
   cuerpo. Puede haber una parte @c(else) opcional que se ejecute si la
   condicion es falsa.

#    A @e(map) holds a set of key/value pairs and provides constant-time
#    operations to store, retrieve, or test for an item in the set. The key may be
#    of any type whose values can compared with @c(==), strings being the most
#    common example; the value may be of any type at all. In this example, the
#    keys are @c(string)s and the values are @c(int)s. The built-in function
#    @c(make) creates a new empty map; it has other uses too. Maps are discussed
#    at length in @l(#Section 4.3).
   Un @e(mapa) contiene un conjunto de pares clave/valor y proporciona
   operaciones de tiempo constante para almacenar, recuperar, o comprobar un
   elemento en el conjunto. La clave puede ser de cualquier tipo cuyos valores
   puedan compararse con @c(==), siendo strings el ejemplo mas comun; El valor
   puede ser de cualquier tipo en absoluto. En este ejemplo, las claves son
   @c(string)s, y los valores son @c(int)s. La funcion incorporada @c(make) crea
   un nuevo mapa vacio; Tiene otros usos tambien. Los mapas se discuten
   extensamente en la @l(#Seccion 4.3).

#    Each time @$(dup) reads a line of input, the line is used as a key into the
#    map and the corresponding value is incremented. The statement
#    @c{counts[input.Text()]++} is equivalent to these two statements:
   Cada vez @$(dup) lee una linea de entrada, la linea se utiliza como una clave
   en el mapa y se incrementa el valor correspondiente. La declaracion
   @c{counts[input.Text()]++} es equivalente a estas dos afirmaciones:

#    ..src > go
#      line := input.Text()
#      counts[line] = counts[line] + 1
#    < src..
   ..src > go
     line := input.Text()
     counts[line] = counts[line] + 1
   < src..

#    It’s not a problem if the map doesn’t yet contain that key. The first time a
#    new line is seen, the expression @c(counts[line]) on the right-hand side
#    evaluates to the zero value for its type, which is 0 for @c(int).
   No es un problema, si el mapa aun no contiene esa clave. La primera vez que
   se ve una nueva linea, la expresion @c(counts[line]) en el lado derecho se
   evalua al valor cero para su tipo, que es 0 para @c(int).

#    To print the results, we use another @c(range)-based @c(for) loop, this time
#    over the @c(counts) map. As before, each iteration produces two results, a
#    key and the value of the map element for that key. The order of map iteration
#    is not specified, but in practice it is random, varying from one run to
#    another. This design is intentional, since it prevents programs from relying
#    on any particular ordering where none is guaranteed.
   Para imprimir los resultados, utilizamos otro bucle de repeticion @c(for)
   basado en @c(range), esta vez sobre el mapa @c(counts). Como antes, cada
   iteracion produce dos resultados, una clave y el valor del elemento del mapa
   para esa clave. El orden de la iteracion del mapa no es especifico, en la
   practica es aleatorio, variando de una ejecucion a otra. Este diseño es
   intencional, ya que impide que los programas se basen en cualquier orden
   particular donde no se garantiza ninguno.

#    Onward to the @c(bufio) package, which helps make input and output efficient and
#    convenient.  One of its most useful features is a type called @c(Scanner) that
#    reads input and breaks it into lines or words; it’s often the easiest way to
#    process input that comes naturally in lines.
   El paquete @c(bufio), ayuda a que la entrada y salida sea eficiente y
   conveniente. Una de sus caracteristicas mas utiles es un tipo llamado
   @c(Scanner) que lee la entrada y la rompe en lineas o palabras; A menudo es
   la manera mas facil de procesar la entrada que llega naturalmente en lineas.

#    The program uses a short variable declaration to create a new variable input
#    that refers to a @c(bufio.Scanner):
   El programa utiliza una breve declaracion de variables para crear una nueva
   variable de entrada que hace referencia a @c(bufio.Scanner):

#    ..src > go
#      input := bufio.NewScanner(os.Stdin)
#    < src..
   ..src > go
     input := bufio.NewScanner(os.Stdin)
   < src..

#    The scanner reads from the program’s standard input. Each call to
#    @c[input.Scan()] reads the next line and removes the newline character from
#    the end; the result can be retrieved by calling @c[input.Text()]. The
#    @c(Scan) function returns @c(true) if there is a line and @c(false) when
#    there is no more input.
   El escaner lee de la entrada estandar del programa. Cada llamada a
   @c[input.Scan()] lee la siguiente linea y elimina el caracter de nueva linea
   al final; el resultado puede ser recuperado llamando a @c[input.Text()]. La
   funcion @c(Scan) devuelve @c(true) si hay una linea y @c(false) cuando no hay
   mas entrada.

#    The function @c(fmt.Printf), like @c(printf) in C and other languages,
#    produces formatted output from a list of expressions. Its first argument is a
#    format string that specifies how subsequent arguments should be
#    formatted. The format of each argument is determined by a conversion
#    character, a letter following a percent sign. For example, @c(%d) formats an
#    integer operand using decimal notation, and @c(%s) expands to the value of a
#    string operand.
   La funcion @c(fmt.Printf), como @c(printf) en C y otros lenguajes, produce
   una salida con formato de una lista de expresiones. Su primer argumento es
   una cadena de formato que especifica como deben formatearse los argumentos
   posteriores. El formato de cada argumento esta determinado por un caracter de
   conversion, una letra siguiendo un signo de porcentaje. Por ejemplo, @c(%d)
   formatea un operando entero usando la notacion decimal, y @c(%s) se expande
   para el valor de un operando de cadena.

#    @c(Printf) has over a dozen such conversions, which Go programmers call
#    @e(verbs). This table is far from a complete specification but illustrates
#    many of the features that are available:
   @c(Printf) tiene mas de una docena de estas conversiones, que los
   programadores de Go llaman @e(verbos). Esta tabla esta lejos de ser una
   especificacion completa, pero ilustra muchas de las caracteristicas que estan
   disponibles:

#    | @c(%d)                 | decimal integer                                                |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%x), @c(%o), @c(%b) | integer in hexadecimal, octal, binary                          |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%f), @c(%g), @c(%e) | floating-point number: 3.141593 3.141592653589793 3.141593e+00 |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%t)                 | boolean: @c(true) or @c(false)                                 |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%c)                 | rune (Unicode code point)                                      |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%s)                 | string                                                         |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%q)                 | quoted string @c("abc") or rune @c('c')                        |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%v)                 | any value in a natural format                                  |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%T)                 | type of any value                                              |
#    |------------------------|----------------------------------------------------------------|
#    | @c(%%)                 | literal percent sign (no operand)                              |
   | @c(%d)                 | entero decimal                                                     |
   |------------------------|--------------------------------------------------------------------|
   | @c(%x), @c(%o), @c(%b) | entero en hexadecimal, octal, binario                              |
   |------------------------|--------------------------------------------------------------------|
   | @c(%f), @c(%g), @c(%e) | numero de coma flotante: 3.141593 3.141592653589793 3.141593e + 00 |
   |------------------------|--------------------------------------------------------------------|
   | @c(%t)                 | booleano: @c(true) o @c(false)                                     |
   |------------------------|--------------------------------------------------------------------|
   | @c(%c)                 | runa (punto de codigo Unicode)                                     |
   |------------------------|--------------------------------------------------------------------|
   | @c(%s)                 | string                                                             |
   |------------------------|--------------------------------------------------------------------|
   | @c(%q)                 | citar string @c("abc") o runa @c('c')                              |
   |------------------------|--------------------------------------------------------------------|
   | @c(%v)                 | cualquier valor en un formato natural                              |
   |------------------------|--------------------------------------------------------------------|
   | @c(%T)                 | cualquier tipo de valor                                            |
   |------------------------|--------------------------------------------------------------------|
   | @c(%%)                 | signo literal de porcentaje (sin operando)                         |

#    The format string in @c(dup1) also contains a tab @c(\t) and a newline
#    @c(\n). String literals may contain such @e(escape sequences) for
#    representing otherwise invisible characters. @c(Printf) does not write a
#    newline by default. By convention, formatting functions whose names end in
#    @c(f), such as @c(log.Printf) and @c(fmt.Errorf), use the formatting rules of
#    @c(fmt.Printf), whereas those whose names end in @c(ln) follow @c(Println),
#    formatting their arguments as if by @c(%v), followed by a newline.
   El formato de cadena en @c(dup1) tambien contiene una tabulacion @c(\t) y un
   salto de linea @c(\n). Los literales de cadena pueden contener tales
   @e(secuencias de escape) para la representacion de caracteres de otra manera
   invisibles. @c(Printf) no escribe una nueva linea por defecto. Por
   convencion, las funciones de formato cuyos nombres terminan en f, tales como
   @c(log.Printf) y @c(fmt.Errorf), utilizan las reglas de formato de
   @c(fmt.Printf), mientras que aquellas cuyos nombres terminan en @c(ln) como
   @c(Println), formatean sus argumentos con %v, seguido por una nueva linea.

#    Many programs read either from their standard input, as above, or from a
#    sequence of named files. The next version of @c(dup) can read from the
#    standard input or handle a list of file names, using @c(os.Open) to open each
#    one:
   Muchos programas leen ya sea a partir de su entrada estandar, como
   anteriormente, o de una secuencia de archivos con nombre. La proxima version
   de @$(dup) puede leer desde la entrada estandar o manejar una lista de
   nombres de archivos, utilizando @c(os.Open) para abrir cada uno de ellos:

#    ..figure > @l(gopl.io/ch1/dup2/main.go<>gopl.io/ch1/dup2)
   ..figure > @l(gopl.io/ch1/dup2/main.go<>gopl.io/ch1/dup2)

#      ..src > go
#        // Dup2 prints the count and text of lines that appear more than once
#        // in the input.  It reads from stdin or from a list of named files.
#        package main
#
#        import (
#          "bufio"
#          "fmt"
#          "os"
#        )
#
#        func main() {
#          counts := make(map[string]int)
#          files := os.Args[1:]
#          if len(files) == 0 {
#            countLines(os.Stdin, counts)
#          } else {
#            for _, arg := range files {
#              f, err := os.Open(arg)
#              if err != nil {
#                fmt.Fprintf(os.Stderr, "dup2: %v\n", err)
#                continue
#              }
#              countLines(f, counts)
#              f.Close()
#            }
#          }
#          for line, n := range counts {
#            if n > 1 {
#              fmt.Printf("%d\t%s\n", n, line)
#            }
#          }
#        }
#
#        func countLines(f *os.File, counts map[string]int) {
#          input := bufio.NewScanner(f)
#          for input.Scan() {
#            counts[input.Text()]++
#          }
#          // NOTE: ignoring potential errors from input.Err()
#        }
#      < src..
     ..src > go
       // Dup2 imprime el recuento y el texto de las lineas que aparecen mas de una vez
       // en la entrada.  Se lee desde stdin o desde una lista de archivos con nombre.
       package main

       import (
         "bufio"
         "fmt"
         "os"
       )

       func main() {
         counts := make(map[string]int)
         files := os.Args[1:]
         if len(files) == 0 {
           countLines(os.Stdin, counts)
         } else {
           for _, arg := range files {
             f, err := os.Open(arg)
             if err != nil {
               fmt.Fprintf(os.Stderr, "dup2: %v\n", err)
               continue
             }
             countLines(f, counts)
             f.Close()
           }
         }
         for line, n := range counts {
           if n > 1 {
             fmt.Printf("%d\t%s\n", n, line)
           }
         }
       }

       func countLines(f *os.File, counts map[string]int) {
         input := bufio.NewScanner(f)
         for input.Scan() {
           counts[input.Text()]++
         }
         // NOTE: Ignora errores potenciales de input.Err()
       }
     < src..


#    The function @c(os.Open) returns two values. The first is an open file
#    (@c(*os.File)) that is used in subsequent reads by the @c(Scanner).
   La funcion @c(os.Open) devuelve dos valores. El primero es un archivo abierto
   (@c(*os.File)) que se utiliza en lecturas posteriores por @c(Scanner).

#    The second result of @c(os.Open) is a value of the built-in @c(error)
#    type. If @c(err) equals the special built-in value @c(nil), the file was
#    opened successfully. The file is read, and when the end of the input is
#    reached, @c(Close) closes the file and releases any resources. On the other
#    hand, if @c(err) is not @c(nil), something went wrong. In that case, the
#    error value describes the problem. Our simple-minded error handling prints a
#    message on the standard error stream using @c(Fprintf) and the verb @c(%v),
#    which displays a value of any type in a default format, and @$(dup) then
#    carries on with the next file; the @c(continue) statement goes to the next
#    iteration of the enclosing @c(for) loop.
   El segundo resultado de @c(os.Open) es un valor nativo de tipo @c(error). Si
   @c(err) es igual al valor especial nativo @c(nil), el archivo fue abierto
   correctamente. El archivo se lee, y cuando se llega al final de la entrada,
   @c(Close) cierra el archivo y libera cualquier recurso. Por otro lado, si
   @c(err) no es @c(nil), algo salio mal. En ese caso, el valor de error
   describe el problema. Nuestra sencillo manejo de errores imprime un mensaje
   en el flujo de error estandar utilizando @c(Fprintf) y el verbo @c(%v), que
   muestra un valor de cualquier tipo en un formato predeterminado, y luego
   @c(dup) continua con el siguiente archivo; la instruccion @c(continue) va a
   la siguiente iteracion del bucle @c(for).

#    In the interests of keeping code samples to a reasonable size, our early
#    examples are intentionally somewhat cavalier about error handling. Clearly we
#    must check for an error from @c(os.Open); however, we are ignoring the less
#    likely possibility that an error could occur while reading the file with
#    @c(input.Scan). We will note places where we’ve skipped error checking, and
#    we will go into the details of error handling in @l(#Section 5.4).
   Con el fin de mantener los ejemplos de codigo de un tamaño razonable,
   nuestros primeros ejemplos son intencionalmente un tanto descuidados en el
   manejo de errores. Es evidente que hay que comprobar si hay un error de parte
   de @c(os.Open); Sin embargo, estamos ignorando la menos probable posibilidad
   de que pueda producirse un error al leer el archivo con @c(input.Scan).
   Anotaremos los lugares donde hemos omitido la comprobacion de errores,
   entraremos en detalles sobre el manejo de errores en la @l(#Seccion 5.4).

#    Notice that the call to @c(countLines) precedes its declaration. Functions
#    and other package-level entities may be declared in any order.
   Observe que la llamada a @c(countLines) precede a su declaracion. Las
   funciones y otras entidades a nivel de paquete se pueden declarar en
   cualquier orden.

#    A map is a @e(reference) to the data structure created by @c(make). When a map is
#    passed to a function, the function receives a copy of the reference, so any
#    changes the called function makes to the underlying data structure will be
#    visible through the caller’s map reference too. In our example, the values
#    inserted into the counts map by @c(countLines) are seen by @c(main).
   Un mapa es una referencia a la estructura de datos creada por @c(make).
   Cuando un mapa se pasa a una funcion, la funcion recibe una copia de la
   referencia, De modo que cualquier cambio que haga la funcion llamada en la
   estructura de datos subyacente, sera tambien visible a traves de la
   referencia del mapa del llamador. En nuestro ejemplo, los valores insertados
   en el mapa @c(counts) por @c(countLines) son vistos por @c(main).

#    The versions of @$(dup) above operate in a @"(streaming) mode in which input
#    is read and broken into lines as needed, so in principle these programs can
#    handle an arbitrary amount of input. An alternative approach is to read the
#    entire input into memory in one big gulp, split it into lines all at once,
#    then process the lines. The following version, @$(dup3), operates in that
#    fashion. It introduces the function @c(ReadFile) (from the @c(io/ioutil)
#    package), which reads the entire contents of a named file, and
#    @c(strings.Split), which splits a string into a slice of substrings.
#    (@c(Split) is the opposite of @c(strings.Join), which we saw earlier.)
   Las versiones anteriores de @$(dup) operan en un modo @"(streaming) en el que
   la entrada se lee y divide en lineas segun sea necesario, por lo que, en
   principio, estos programas pueden manejar una cantidad arbitraria de
   entrada. Un enfoque alternativo es leer la entrada entera en la memoria de un
   solo trago, dividirlo en lineas a la vez, y luego procesar las lineas. La
   siguiente version, @$(dup3), funciona de esa manera. Se introduce la funcion
   @c(ReadFile) (del paquete @c(io/ioutil)), que lee todo el contenido de un
   archivo, y @c(strings.Split), que divide una cadena en una slice de
   subcadenas. ( @c(Split) es lo contrario de @c(strings.Join), que vimos
   anteriormente.)

#    We’ve simplified @$(dup3) somewhat. First, it only reads named files, not the
#    standard input, since @c(ReadFile) requires a file name argument. Second, we
#    moved the counting of the lines back into @c(main), since it is now needed in
#    only one place.
   Hemos simplificado un poco @$(dup3). En primer lugar, solo lee archivos por
   su nombre, no la entrada estandar, ya que @c(ReadFile) requiere como
   argumento un nombre de archivo. En segundo lugar, se paso el conteo de las
   lineas de nuevo a @c(main), ya que ahora solo es necesario un solo lugar.

#    ..figure > @l(gopl.io/ch1/dup3/main.go<>gopl.io/ch1/dup3)
   ..figure > @l(gopl.io/ch1/dup3/main.go<>gopl.io/ch1/dup3)

#      ..src > go
#        package main
#
#        import (
#          "fmt"
#          "io/ioutil"
#          "os"
#          "strings"
#        )
#
#        func main() {
#          counts := make(map[string]int)
#          for _, filename := range os.Args[1:] {
#            data, err := ioutil.ReadFile(filename)
#            if err != nil {
#              fmt.Fprintf(os.Stderr, "dup3: %v\n", err)
#              continue
#            }
#            for _, line := range strings.Split(string(data), "\n") {
#              counts[line]++
#            }
#          }
#          for line, n := range counts {
#            if n > 1 {
#              fmt.Printf("%d\t%s\n", n, line)
#            }
#          }
#        }
#      < src..
     ..src > go
       package main

       import (
         "fmt"
         "io/ioutil"
         "os"
         "strings"
       )

       func main() {
         counts := make(map[string]int)
         for _, filename := range os.Args[1:] {
           data, err := ioutil.ReadFile(filename)
           if err != nil {
             fmt.Fprintf(os.Stderr, "dup3: %v\n", err)
             continue
           }
           for _, line := range strings.Split(string(data), "\n") {
             counts[line]++
           }
         }
         for line, n := range counts {
           if n > 1 {
             fmt.Printf("%d\t%s\n", n, line)
           }
         }
       }
     < src..


#    @c(ReadFile) returns a byte slice that must be converted into a @c(string) so
#    it can be split by @c(strings.Split). We will discuss strings and byte slices
#    at length in @l(#Section 3.5.4).
   @c(ReadFile) devuelve un slice de @c(byte)s que se debe convertirse en un
   @c(string) para que pueda ser dividido por @c(strings.Split). Vamos a
   discutir los strings y slices de bytes en detalle en la @l(#Seccion 3.5.4).

#    Under the covers, @c(bufio.Scanner), @c(ioutil.ReadFile), and
#    @c(ioutil.WriteFile) use the Read and Write methods of @c(*os.File), but it’s
#    rare that most programmers need to access those lower-level routines
#    directly. The higher-level functions like those from @c(bufio) and @c(io/ioutil)
#    are easier to use.
   Bajo la cubierta, @c(bufio.Scanner), @c(ioutil.ReadFile) y
   @c(ioutil.WriteFile) utilizan los metodos @c(Read) y @c(Write) de
   @c(*os.File), pero es raro que la mayoria de los programadores necesiten
   acceder directamente a las rutinas de bajo nivel. Las funciones de nivel
   superior como @c(bufio) y @c(io/ioutil) son mas faciles de usar.

#    @b(Exercise 1.4): Modify @$(dup2) to print the names of all files in which
#    each duplicated line occurs.
   @b(Ejercicio 1.4): Modificar @$(dup2) para imprimir los nombres de todos los
   archivos en los que se produce cada linea duplicada.

# ** Section 1.4 <> Animated GIFs
** Seccion 1.4 <> GIF animados

#    The next program demonstrates basic usage of Go’s standard image packages,
#    which we’ll use to create a sequence of bit-mapped images and then encode the
#    sequence as a GIF animation. The images, called @e(Lissajous figures), were a
#    staple visual effect in sci-fi films of the 1960s. They are the parametric
#    curves produced by harmonic oscillation in two dimensions, such as two sine
#    waves fed into the @m(x) and @m(y) inputs of an oscilloscope. Figure 1.1
#    shows some examples.
   El siguiente programa demuestra el uso basico de los paquetes de imagenes
   estandar en Go, que usaremos para crear una secuencia de imagenes de mapa de
   bits y luego codificar la secuencia como una animacion GIF. Las imagenes,
   llamadas @e(figuras de Lissajous), eran un efecto visual basico en peliculas
   de ciencia ficcion de la decada de 1960. Son las curvas parametricas
   producidas por oscilacion armonica en dos dimensiones, tales como dos ondas
   sinusoidales alimentados en el entradas @m(x) e @m(y) de un osciloscopio. La
   Figura 1.1 muestra algunos ejemplos.

#    ..figure > Figure 1.1. Four Lissajous figures.
   ..figure > Figura 1.1. Cuatro figuras de Lissajous.

#      ..img > img/Figure-1.1.jpg
     ..img > img/Figure-1.1.jpg


#    There are several new constructs in this code, including @c(const) declarations,
#    struct types, and composite literals. Unlike most of our examples, this one
#    also involves floating-point computations. We’ll discuss these topics only
#    briefly here, pushing most details off to later chapters, since the primary
#    goal right now is to give you an idea of what Go looks like and the kinds of
#    things that can be done easily with the language and its libraries.
     Hay varias nuevas construcciones en este codigo, incluyendo declaraciones
     const, tipos de estructura, y literales compuestos. A diferencia de la
     mayoria de nuestros ejemplos, este tambien implica calculos de punto
     flotante.  Aqui vamos a discutir estos temas solo brevemente, desplazando
     la mayoria de los detalles a los capitulos posteriores, ya que el objetivo
     principal en este momento es darle una idea de como se ve Go y el tipo de
     cosas que se pueden hacer facilmente con el lenguaje y sus librerias.

#    ..figure > @l(gopl.io/ch1/lissajous/main.go<>gopl.io/ch1/lissajous)
   ..figure > @l(gopl.io/ch1/lissajous/main.go<>gopl.io/ch1/lissajous)

#      ..src > go
#        // Lissajous generates GIF animations of random Lissajous figures.
#        package main
#
#        import (
#          "image"
#          "image/color"
#          "image/gif"
#          "io"
#          "math"
#          "math/rand"
#          "os"
#        )
#
#        var palette = []color.Color{color.White, color.Black}
#
#        const (
#          whiteIndex = 0 // first color in palette
#          blackIndex = 1 // next color in palette
#        )
#
#        func main() {
#          lissajous(os.Stdout)
#        }
#
#        func lissajous(out io.Writer) {
#          const (
#            cycles  = 5     // number of complete x oscillator revolutions
#            res     = 0.001 // angular resolution
#            size    = 100   // image canvas covers [-size..+size]
#            nframes = 64    // number of animation frames
#            delay   = 8     // delay between frames in 10ms units
#          )
#          freq := rand.Float64() * 3.0 // relative frequency of y oscillator
#          anim := gif.GIF{LoopCount: nframes}
#          phase := 0.0 // phase difference
#          for i := 0; i < nframes; i++ {
#            rect := image.Rect(0, 0, 2*size+1, 2*size+1)
#            img := image.NewPaletted(rect, palette)
#            for t := 0.0; t < cycles*2*math.Pi; t += res {
#              x := math.Sin(t)
#              y := math.Sin(t*freq + phase)
#              img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),
#                blackIndex)
#            }
#            phase += 0.1
#            anim.Delay = append(anim.Delay, delay)
#            anim.Image = append(anim.Image, img)
#          }
#          gif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors
#        }
#      < src..
     ..src > go
       // Lissajous genera GIF animados de figuras Lissajous aleatorias.
       package main

       import (
         "image"
         "image/color"
         "image/gif"
         "io"
         "math"
         "math/rand"
         "os"
       )

       var palette = []color.Color{color.White, color.Black}

       const (
         whiteIndex = 0 // primer color en la paleta
         blackIndex = 1 // siguiente color en la paleta
       )

       func main() {
         lissajous(os.Stdout)
       }

       func lissajous(out io.Writer) {
         const (
           cycles  = 5     // numero de revoluciones completas del oscilador x
           res     = 0.001 // resolucion angular
           size    = 100   // dimencion de la imagen [-size..+size]
           nframes = 64    // numero de cuadros de animacion
           delay   = 8     // retardo entre fotogramas en unidades de 10ms
         )
         freq := rand.Float64() * 3.0 // frecuencia relativa del oscilador y
         anim := gif.GIF{LoopCount: nframes}
         phase := 0.0 // diferencia de fase
         for i := 0; i < nframes; i++ {
           rect := image.Rect(0, 0, 2*size+1, 2*size+1)
           img := image.NewPaletted(rect, palette)
           for t := 0.0; t < cycles*2*math.Pi; t += res {
             x := math.Sin(t)
             y := math.Sin(t*freq + phase)
             img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),
               blackIndex)
           }
           phase += 0.1
           anim.Delay = append(anim.Delay, delay)
           anim.Image = append(anim.Image, img)
         }
         gif.EncodeAll(out, &anim) // NOTA: Ignorados errores de codificacion
       }
     < src..


#    After importing a package whose path has multiple components, like
#    @c(image/color), we refer to the package with a name that comes from the last
#    component. Thus the variable @c(color.White) belongs to the @c(image/color)
#    package and @c(gif.GIF) belongs to @c(image/gif).
   Despues de importar un paquete cuya ruta tiene multiples componentes, como
   @c(image/color), nos referimos al paquete con el nombre que procede del
   ultimo componente. Por lo tanto la variable @c(color.White) pertenece al
   paquete @c(image/color) y @c(gif.GIF) pertenece a @c(image/gif).

#    A @c(const) declaration (@l(#Section 3.6<>§3.6)) gives names to constants,
#    that is, values that are fixed at compile time, such as the numerical
#    parameters for cycles, frames, and delay. Like @c(var) declarations,
#    @c(const) declarations may appear at package level (so the names are visible
#    throughout the package) or within a function (so the names are visible only
#    within that function). The value of a constant must be a number, string, or
#    boolean.
   Una declaracion @c(const) (@l(#Seccion 3.6<>§3.6)) da nombres a las
   constantes, es decir, valores que se establecen en tiempo de compilacion,
   tales como los parametros numericos para ciclos, cuadros, y el retardo. Igual
   a las declaraciones @c(var), las declaraciones @c(const) pueden aparecer a
   nivel de paquete (por lo que los nombres son visibles en todo el paquete) o
   dentro de una funcion (por lo que los nombres son visibles solo dentro de esa
   funcion). El valor de una constante debe ser un numero, una cadena o un
   booleano.

#    The expressions @c([]color.Color{...}) and @c(gif.GIF{...}) are @e(composite
#    literals) (@l(#Section 4.2<>§4.2), @l(#Section 4.4.1<>§4.4.1)), a compact
#    notation for instantiating any of Go’s composite types from a sequence of
#    element values. Here, the first one is a slice and the second one is a
#    @e(struct).
   Las expresiones @c([]color.Color{...}) y @c(gif.GIF{...}) son @e(literales
   compuestos) (@l(#Seccion 4.2<>§4.2), @l(#Seccion 4.4.1<>§4.4.1)), una
   notacion compacta de Go para instanciar cualquiera de los tipos compuestos de
   una secuencia de valores de los elementos. Aqui, la primera es un slice y
   la segunda es una @e(estructura).

#    The type @c(gif.GIF) is a struct type (@l(#Section 4.4<>§4.4)). A struct is a
#    group of values called @e(fields), often of different types, that are
#    collected together in a single object that can be treated as a unit. The
#    variable @c(anim) is a struct of type @c(gif.GIF). The struct literal creates
#    a struct value whose @c(LoopCount) field is set to @c(nframes); all other
#    fields have the zero value for their type. The individual fields of a struct
#    can be accessed using dot notation, as in the final two assignments which
#    explicitly update the @c(Delay) and @c(Image) fields of @c(anim).
   El tipo @c(gif.GIF) es de tipo struct (@l(#Seccion 4.4<>§4.4)). Una
   estructura es un grupo de valores denominados @e(campos), a menudo de
   diferentes tipos, que se recogen juntos en un unico objeto que puede tratarse
   como una unidad. La variable @c(anim) es una estructura de tipo
   @c(gif.GIF). La estructura literal crea un valor estructura cuyo campo
   @c(LoopCount) se establece en @c(nframes); Todos los demas campos tienen el
   valor cero para su tipo. Los campos individuales de una estructura se puede
   acceder usando la notacion punto, al igual que en las dos ultimas
   asignaciones que actualizan de forma explicita los campos @c(Delay) e
   @c(Image) de @c(anim).

#    The @c(lissajous) function has two nested loops. The outer loop runs for 64
#    iterations, each producing a single frame of the animation. It creates a new
#    201x201 image with a palette of two colors, white and black. All pixels are
#    initially set to the palette’s zero value (the zeroth color in the palette),
#    which we set to white. Each pass through the inner loop generates a new image
#    by setting some pixels to black. The result is appended, using the built-in
#    @c(append) function (@l(#Section 4.2.1<>§4.2.1)), to a list of frames in
#    @c(anim), along with a specified delay of 80ms. Finally the sequence of
#    frames and delays is encoded into GIF format and written to the output stream
#    @c(out). The type of @c(out) is @c(io.Writer), which lets us write to a wide
#    range of possible destinations, as we’ll show soon.
   La funcion @c(lissajous) tiene dos bucles anidados. El bucle exterior se
   ejecuta 64 iteraciones, cada una produciendo un solo fotograma de la
   animacion. Crea una nueva imagen de 201x201 con una paleta de dos colores,
   blanco y negro. Todos los pixeles se ajustan inicialmente al valor cero de la
   paleta (el color cero de la paleta), que se establece en blanco. Cada paso a
   traves del bucle interno genera una nueva imagen estableciendo algunos
   pixeles en negro. El resultado se añade a una lista de cuadros en @c(anim)
   utilizando la funcion incorporada @c(append) (@l(#Seccion 4.2.1<>§4.2.1)),
   junto con un retardo especificado de 80 ms. Por ultimo, la secuencia de
   cuadros y los retrasos se codifica en formato GIF y se escribe en la salida
   de fluje @c(out). El tipo de @c(out) es @c(io.Writer), lo que nos permite
   escribir a una amplia gama de posibles destinos, como vamos a mostrar pronto.

#    The inner loop runs the two oscillators. The @c(x) oscillator is just the
#    sine function. The @c(y) oscillator is also a sinusoid, but its frequency
#    relative to the @c(x) oscillator is a random number between 0 and 3, and its
#    phase relative to the @c(x) oscillator is initially zero but increases with
#    each frame of the animation. The loop runs until the @c(x) oscillator has
#    completed five full cycles. At each step, it calls @c(SetColorIndex) to color
#    the pixel corresponding to (@c(x), @c(y)) black, which is at position 1 in
#    the palette.
   El bucle interior ejecuta los dos osciladores. El oscilador @c(x) es
   simplemente la funcion sinusoidal. El oscilador @c(y) es tambien una
   sinusoide, pero su frecuencia es relativa a la del oscilador @c(x) un numero
   aleatorio entre 0 y 3, y su fase relativa al oscilador @c(x) es inicialmente
   cero, pero aumenta con cada fotograma de la animacion. El bucle se ejecuta
   hasta que el oscilador @c(x) ha completado cinco ciclos completos. En cada
   paso, que llaman a @c(SetColorIndex) para colorear el pixel correspondiente
   en (@c(x), @c(y)) negro, que es en la posicion 1 de la paleta.

#    The @c(main) function calls the @c(lissajous) function, directing it to write
#    to the standard output, so this command produces an animated GIF with frames
#    like those in Figure 1.1:
   La funcion @c(main) llama a la funcion @c(lissajous), dirigiendola a escribir en la
   salida estandar, por lo que este comando produce un GIF animado con marcos
   como los de la Figura 1.1:

#    ..src > sh
#      $ go build gopl.io/ch1/lissajous
#      $ ./lissajous >out.gif
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/lissajous
     $ ./lissajous >out.gif
   < src..

#    @b(Exercise 1.5): Change the Lissajous program’s color palette to green on
#    black, for added authenticity. To create the web color @c(#RRGGBB), use
#    @c(color.RGBA{0xRR, 0xGG, 0xBB, 0xff}), where each pair of hexadecimal digits
#    represents the intensity of the red, green, or blue component of the pixel.
   @b(Ejercicio 1.5): Cambiar la paleta de colores del programa Lissajous a
   verde sobre negro, para mayor autenticidad. Para crear el color web
   @c(#RRGGBB), utilice @c(color.RGBA{0xRR, 0xGG, 0xBB, 0xff}), donde cada par
   de digitos hexadecimales representa la intensidad del componente de color
   rojo, verde o azul del pixel.

#    @b(Exercise 1.6): Modify the Lissajous program to produce images in multiple
#    colors by adding more values to palette and then displaying them by changing
#    the third argument of @c(SetColorIndex) in some interesting way.
   @b(Ejercicio 1.6): Modificar el programa Lissajous para producir imagenes de
   multiples colores mediante la adicion de mas valores a la paleta y luego
   mostrarlos cambiando el tercer argumento de @c(SetColorIndex) de alguna
   manera interesante.

# ** Section 1.5 <> Fetching a URL
** Seccion 1.5 <> Obtener una URL

#    For many applications, access to information from the Internet is as
#    important as access to the local file system. Go provides a collection of
#    packages, grouped under net, that make it easy to send and receive
#    information through the Internet, make low-level network connections, and set
#    up servers, for which Go’s concurrency features (introduced in @l(#Chapter
#    8)) are particularly useful.
   Para muchas aplicaciones, el acceso a la informacion de Internet es tan
   importante como el acceso al sistema de archivos local. Go ofrece una
   coleccion de paquetes, agrupados bajo @c(net), que hacen que sea facil de
   enviar y recibir informacion a traves de Internet, realizar conexiones de red
   de bajo nivel, y configurar servidores, por lo que las caracteristicas de
   concurrencia de Go (introducidas en el @l(#Capitulo 8)) son particularmente
   utiles.

#    To illustrate the minimum necessary to retrieve information over HTTP, here’s
#    a simple program called @$(fetch) that fetches the content of each specified URL
#    and prints it as uninterpreted text; it’s inspired by the invaluable utility
#    @$(curl). Obviously one would usually do more with such data, but this shows the
#    basic idea. We will use this program frequently in the book.
   Para ilustrar el minimo necesario para recuperar la informacion a traves de
   HTTP, aqui esta un programa simple llamado @$(fetch) que recupera el
   contenido de cada URL y lo imprime como texto sin interpretar; esta inspirado
   en la invaluable utilidad @$(curl) . Obviamente uno normalmente haria mas con
   tales datos, pero esto muestra la idea basica. Usaremos este programa con
   frecuencia en el libro.

#    ..figure > @l(gopl.io/ch1/fetch/main.go<>gopl.io/ch1/fetch)
   ..figure > @l(gopl.io/ch1/fetch/main.go<>gopl.io/ch1/fetch)

#      ..src > go
#        // Fetch prints the content found at each specified URL.
#        package main
#
#        import (
#          "fmt"
#          "io/ioutil"
#          "net/http"
#          "os"
#        )
#
#        func main() {
#          for _, url := range os.Args[1:] {
#            resp, err := http.Get(url)
#            if err != nil {
#              fmt.Fprintf(os.Stderr, "fetch: %v\n", err)
#              os.Exit(1)
#            }
#            b, err := ioutil.ReadAll(resp.Body)
#            resp.Body.Close()
#            if err != nil {
#              fmt.Fprintf(os.Stderr, "fetch: reading %s: %v\n", url, err)
#              os.Exit(1)
#            }
#            fmt.Printf("%s", b)
#          }
#        }
#      < src..
     ..src > go
       // Fetch imprime el contenido encontrado en cada URL especificada.
       package main

       import (
         "fmt"
         "io/ioutil"
         "net/http"
         "os"
       )

       func main() {
         for _, url := range os.Args[1:] {
           resp, err := http.Get(url)
           if err != nil {
             fmt.Fprintf(os.Stderr, "fetch: %v\n", err)
             os.Exit(1)
           }
           b, err := ioutil.ReadAll(resp.Body)
           resp.Body.Close()
           if err != nil {
             fmt.Fprintf(os.Stderr, "fetch: reading %s: %v\n", url, err)
             os.Exit(1)
           }
           fmt.Printf("%s", b)
         }
       }
     < src..


#    This program introduces functions from two packages, @c(net/http) and
#    @c(io/ioutil). The @c(http.Get) function makes an HTTP request and, if there
#    is no error, returns the result in the response struct @c(resp). The @c(Body)
#    field of @c(resp) contains the server response as a readable stream. Next,
#    @c(ioutil.ReadAll) reads the entire response; the result is stored in
#    @c(b). The @c(Body) stream is closed to avoid leaking resources, and
#    @c(Printf) writes the response to the standard output.
   Este programa introduce funciones a partir de dos paquetes, @c(net/http) y
   @c(io/ioutil). La funcion @c(http.Get) realiza una peticion HTTP y, si no hay
   error, devuelve el resultado en la estructura @c(resp) . El campo @c(Body) de
   @c(resp) contiene la respuesta del servidor como un flujo legible. A
   continuacion, @c(ioutil.ReadAll) lee toda la respuesta; el resultado se
   almacena en @c(b). El flujo @c(Body) es cerrado para evitar fuga de recursos
   y @c(Printf) escribe la respuesta a la salida estandar.

#    ..src > sh
#      $ go build gopl.io/ch1/fetch
#      $ ./fetch http://gopl.io
#      <html>
#      <head>
#      <title>The Go Programming Language</title>
#      ...
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetch
     $ ./fetch http://gopl.io
     <html>
     <head>
     <title>The Go Programming Language</title>
     ...
   < src..

#    If the HTTP request fails, fetch reports the failure instead:
   Si la solicitud HTTP falla, en su lugar, @$(fetch) reportara el error:

#    ..src > sh
#      $ ./fetch http://bad.gopl.io
#      fetch: Get http://bad.gopl.io: dial tcp: lookup bad.gopl.io: no such host
#    < src..
   ..src > sh
     $ ./fetch http://bad.gopl.io
     fetch: Get http://bad.gopl.io: dial tcp: lookup bad.gopl.io: no such host
   < src..

#    In either error case, @c[os.Exit(1)] causes the process to exit with a status
#    code of 1.
   En cualquiera de los casos de error, @c[os.Exit(1)] hace que el proceso
   termine con un codigo de estado de valor 1.

#    @b(Exercise 1.7): The function call @c[io.Copy(dst, src)] reads from @c(src)
#    and writes to @c(dst). Use it instead of @c(ioutil.ReadAll) to copy the
#    response body to @c(os.Stdout) without requiring a buffer large enough to
#    hold the entire stream. Be sure to check the error result of @c(io.Copy).
   @b(Ejercicio 1.7): La funcion @c[io.Copy(dst, src)] lee desde @c(src) y
   escribe en @c(dst). Utilicelo en lugar de @c(ioutil.ReadAll) para copiar el
   cuerpo de la respuesta a @c(os.Stdout) sin requerir un buffer lo
   suficientemente grande como para contener todo el fluje de datos. Asegurese
   de comprobar el resultado del error de @c(io.Copy).

#    @b(Exercise 1.8): Modify @$(fetch) to add the prefix @c(http://) to each
#    argument URL if it is missing. You might want to use @c(strings.HasPrefix).
   @b(Ejercicio 1.8): Modificar @$(fetch) para agregar el prefijo @c(http://) a
   cada argumento URL si este so se proporciona. Es posible que desee utilizar
   @c(strings.HasPrefix).

#    @b(Exercise 1.9): Modify @$(fetch) to also print the HTTP status code, found
#    in @c(resp.Status).
   @b(Ejercicio 1.9): Modificar @$(fetch) para imprimir tambien el codigo de
   estado HTTP, que se encuentra en @c(resp.Status).

# ** Section 1.6 <> Fetching URLs Concurrently
** Seccion 1.6 <> Obteniendo URL Concurrentemente

#    One of the most interesting and novel aspects of Go is its support for
#    concurrent programming. This is a large topic, to which @l(#Chapter 8) and
#    Chapter 9 are devoted, so for now we’ll give you just a taste of Go’s main
#    concurrency mechanisms, goroutines and channels.
   Uno de los aspectos mas interesantes y novedosos de Go es su soporte para la
   programacion concurrente. Este es un tema muy amplio, al que se dedican el
   @l(#Capitulo 8) y el @l(#Capitulo 9), asi que por ahora le daremos solo una
   muestra de los principales mecanismos de la concurrencia en Go, @e(gorutinas)
   y @e(canales).

#    The next program, @$(fetchall), does the same fetch of a URL’s contents as
#    the previous example, but it fetches many URLs, all concurrently, so that the
#    process will take no longer than the longest fetch rather than the sum of all
#    the fetch times. This version of @$(fetchall) discards the responses but
#    reports the size and elapsed time for each one:
   El siguiente programa, @$(fetchall), realiza la misma busqueda del contenido
   de una URL como en el ejemplo anterior, pero obtiene muchas URL, todas al
   mismo tiempo, de modo que el proceso no tardara mas que la busqueda mas
   prolongada en lugar de la suma de todos los tiempos de busqueda. Esta version
   de @$(fetchall) descarta las respuestas, pero indica el tamaño y el tiempo
   transcurrido de cada una:

#    ..figure > @l(gopl.io/ch1/fetchall/main.go<>gopl.io/ch1/fetchall)
   ..figure > @l(gopl.io/ch1/fetchall/main.go<>gopl.io/ch1/fetchall)

#      ..src > go
#        // Fetchall fetches URLs in parallel and reports their times and sizes.
#        package main
#
#        import (
#          "fmt"
#          "io"
#          "io/ioutil"
#          "net/http"
#          "os"
#          "time"
#        )
#
#        func main() {
#          start := time.Now()
#          ch := make(chan string)
#          for _, url := range os.Args[1:] {
#            go fetch(url, ch) // start a goroutine
#          }
#          for range os.Args[1:] {
#            fmt.Println(<-ch) // receive from channel ch
#          }
#          fmt.Printf("%.2fs elapsed\n", time.Since(start).Seconds())
#        }
#
#        func fetch(url string, ch chan<- string) {
#          start := time.Now()
#          resp, err := http.Get(url)
#          if err != nil {
#            ch <- fmt.Sprint(err) // send to channel ch
#            return
#          }
#
#          nbytes, err := io.Copy(ioutil.Discard, resp.Body)
#          resp.Body.Close() // don't leak resources
#          if err != nil {
#            ch <- fmt.Sprintf("while reading %s: %v", url, err)
#            return
#          }
#          secs := time.Since(start).Seconds()
#          ch <- fmt.Sprintf("%.2fs  %7d  %s", secs, nbytes, url)
#        }
#      < src..
     ..src > go
       // Fetchall busca URLs en paralelo e informa de sus tiempos y tamaños.
       package main

       import (
         "fmt"
         "io"
         "io/ioutil"
         "net/http"
         "os"
         "time"
       )

       func main() {
         start := time.Now()
         ch := make(chan string)
         for _, url := range os.Args[1:] {
           go fetch(url, ch) // inicia una gorutina
         }
         for range os.Args[1:] {
           fmt.Println(<-ch) // recibir desde el canal ch
         }
         fmt.Printf("%.2fs elapsed\n", time.Since(start).Seconds())
       }

       func fetch(url string, ch chan<- string) {
         start := time.Now()
         resp, err := http.Get(url)
         if err != nil {
           ch <- fmt.Sprint(err) // enviar al canal ch
           return
         }

         nbytes, err := io.Copy(ioutil.Discard, resp.Body)
         resp.Body.Close() // no pierdas recursos
         if err != nil {
           ch <- fmt.Sprintf("while reading %s: %v", url, err)
           return
         }
         secs := time.Since(start).Seconds()
         ch <- fmt.Sprintf("%.2fs  %7d  %s", secs, nbytes, url)
       }
     < src..


#    Here’s an example:
   He aqui un ejemplo:

#    ..src > sh
#      $ go build gopl.io/ch1/fetchall
#      $ ./fetchall https://golang.org http://gopl.io https://godoc.org
#      0.14s     6852 https://godoc.org
#      0.16s     7261 https://golang.org
#      0.48s     2475 http://gopl.io
#      0.48s elapsed
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetchall
     $ ./fetchall https://golang.org http://gopl.io https://godoc.org
     0.14s     6852 https://godoc.org
     0.16s     7261 https://golang.org
     0.48s     2475 http://gopl.io
     0.48s elapsed
   < src..

#    A @e(goroutine) is a concurrent function execution. A @e(channel) is a
#    communication mechanism that allows one goroutine to pass values of a
#    specified type to another goroutine. The function @c(main) runs in a
#    goroutine and the @c(go) statement creates additional goroutines.
   Una @e(gorutina) es una funcion de ejecucion concurrente. Un @e(canal) es un
   mecanismo de comunicacion que permite a una @e(gorutina) para pasar valores
   de un tipo especificado a otra @e(gorutina). La funcion @e(main) se ejecuta
   en una gorutina y la sentencia @c(go) crea gorutinas adicionales.

#    The @c(main) function creates a channel of strings using @c(make). For each
#    command-line argument, the @c(go) statement in the first range loop starts a
#    new goroutine that calls @c(fetch) asynchronously to fetch the URL using
#    @c(http.Get). The @c(io.Copy) function reads the body of the response and
#    discards it by writing to the @c(ioutil.Discard) output stream. @c(Copy)
#    returns the byte count, along with any error that occurred. As each result
#    arrives, @c(fetch) sends a summary line on the channel @c(ch). The second
#    range loop in @c(main) receives and prints those lines.
   La funcion @c(main) crea un canal de strings utilizando @c(make) . Para cada
   argumento de linea de comandos, la sentencia @c(go) en el primer bucle inicia
   una nueva gorutina que llama a @c(fetch) asincronamente para buscar la URL
   usando @c(http.Get). La funcion @c(io.Copy) lee el cuerpo de la respuesta y
   la descarta escribiendo en el flujo de salida @c(ioutil.Discard). @c(Copy)
   devuelve el numero de bytes, junto con cualquier error que prodicido. A
   medida que llega cada resultado, @c(fetch) envia una linea de resumen en el
   canal @c(ch). El segundo bucle en @c(main) recibe e imprime esas lineas.

#    When one goroutine attempts a send or receive on a channel, it blocks until
#    another goroutine attempts the corresponding receive or send operation, at
#    which point the value is transferred and both goroutines proceed. In this
#    example, each @c(fetch) sends a value (@c(ch <-) @e(expression)) on the
#    channel @c(ch), and @c(main) receives all of them (@c(<-ch)). Having @c(main)
#    do all the printing ensures that output from each goroutine is processed as a
#    unit, with no danger of interleaving if two goroutines finish at the same
#    time.
   Cuando una gorutina intenta enviar o recibir en un canal, se bloquea hasta
   que otra gorutina intente la operacion correspondiente de recepcion o envio,
   momento en el cual se transfiere el valor y ambas gorutinas continuan. En
   este ejemplo, cada @c(fetch) envia un valor (@e(expresion) @c(ch <-)) en el
   canal @c(ch), y @c(main) recibe todos ellos (@c(<-ch)). Tener a @c(main)
   haciendo toda la impresion, asegura que la salida de cada gorutina se procesa
   como una unidad, sin el peligro de entrelazado si dos gorutinas terminan al
   mismo tiempo.

#    @b(Exercise 1.10): Find a web site that produces a large amount of
#    data. Investigate caching by running @c(fetchall) twice in succession to see
#    whether the reported time changes much. Do you get the same content each
#    time? Modify @c(fetchall) to print its output to a file so it can be
#    examined.
   @b(Ejercicio 1.10): Encontrar un sitio web que produce una gran cantidad de
   datos. Investiga el almacenamiento en cache mediante la ejecucion de
   @$(fetchall) dos veces consecutivas para ver si el tiempo reportado cambia
   mucho. ¿Obtienes el mismo contenido cada vez? Modificar @$(fetchall) para
   imprimir su salida a un archivo para que pueda ser examinado.

#    @b(Exercise 1.11): Try @c(fetchall) with longer argument lists, such as
#    samples from the top million web sites available at @l(http://www.alexa.com/<>alexa.com). How does
#    the program behave if a web site just doesn’t respond? (@l(#Section 8.9)
#    describes mechanisms for coping in such cases.)
   @b(Ejercicio 1.11): Pruebe @$(fetchall) con listas de argumentos mas
   extensas, como muestras de los mejores sitios web disponibles en
   @l(http://www.alexa.com/<>alexa.com). ¿Como se comporta el programa si un
   sitio web simplemente no responde? (La @l(#Seccion 8.9) describe los
   mecanismos para hacer frente en estos casos.)

# ** Section 1.7 <> A Web Server
** Seccion 1.7 <> Un servidor Web

#    Go’s libraries makes it easy to write a web server that responds to client
#    requests like those made by @$(fetch). In this section, we’ll show a minimal
#    server that returns the path component of the URL used to access the
#    server. That is, if the request is for @c(http://localhost:8000/hello), the
#    response will be @c(URL.Path = "/hello").
   Las Librerias de Go hacen que sea facil escribir un servidor web que responde
   a las solicitudes de los clientes, como las realizadas por @$(fetch). En esta
   seccion, mostraremos un servidor minimo que devuelve el componente de ruta de
   la URL utilizada para acceder al servidor. Es decir, si la solicitud es
   @c(http://localhost:8000/hello), la respuesta sera @c(URL.Path = "/hello").

#    ..figure > @l(gopl.io/ch1/server1/main.go<>gopl.io/ch1/server1)
   ..figure > @l(gopl.io/ch1/server1/main.go<>gopl.io/ch1/server1)

#      ..src > go
#        // Server1 is a minimal "echo" server.
#        package main
#
#        import (
#          "fmt"
#          "log"
#          "net/http"
#        )
#
#        func main() {
#          http.HandleFunc("/", handler) // each request calls handler
#          log.Fatal(http.ListenAndServe("localhost:8000", nil))
#        }
#
#        // handler echoes the Path component of the requested URL.
#        func handler(w http.ResponseWriter, r *http.Request) {
#          fmt.Fprintf(w, "URL.Path = %q\n", r.URL.Path)
#        }
#      < src..
     ..src > go
       // Server1 es un servidor de "eco" minimo.
       package main

       import (
         "fmt"
         "log"
         "net/http"
       )

       func main() {
         http.HandleFunc("/", handler) // cada solicitud llama a handler
         log.Fatal(http.ListenAndServe("localhost:8000", nil))
       }

       // handler hace eco del componente Path de la URL solicitida.
       func handler(w http.ResponseWriter, r *http.Request) {
         fmt.Fprintf(w, "URL.Path = %q\n", r.URL.Path)
       }
     < src..


#    The program is only a handful of lines long because library functions do most
#    of the work. The @c(main) function connects a handler function to incoming
#    URLs that begin with @c(/), which is all URLs, and starts a server listening
#    for incoming requests on port 8000. A request is represented as a struct of
#    type @c(http.Request), which contains a number of related fields, one of
#    which is the URL of the incoming request. When a request arrives, it is given
#    to the handler function, which extracts the path component (@c(/hello)) from
#    the request URL and sends it back as the response, using @c(fmt.Fprintf). Web
#    servers will be explained in detail in @l(#Section 7.7).
   El programa esta formado por solo un puñado de lineas, porque las funciones
   de la libreria hacen la mayor parte del trabajo. La funcion @c(main) conecta
   una funcion de manejo a las direcciones URL entrantes que comienzan con
   @c(/), que son todas las direcciones URL, e inicia un servidor que escucha
   las peticiones entrantes en el puerto 8000. La solicitud se representa como
   una estructura de tipo @c(http.Request), que contiene una serie de campos
   relacionados, uno de los cuales es la URL de la solicitud entrante. Cuando
   llega una peticion, se le da a la funcion de manejo, que extrae el componente
   de ruta (@c(/hello)) a partir de la URL de solicitud y la envia de vuelta
   como la respuesta, utilizando @c(fmt.Fprintf). Los servidores web se
   explicaran en detalle en la @l(#Seccion 7.7).

#    Let’s start the server in the background. On Mac OS X or Linux, add an
#    ampersand (@c(&)) to the command; on Microsoft Windows, you will need to run
#    the command without the ampersand in a separate command window.
   Iniciemos el servidor en segundo plano. En Mac OS X o GNU/Linux, añadir un
   simbolo ampersand (@c(&)) al comando; En Microsoft Windows, necesitara
   ejecutar el comando sin el signo ampersand en una ventana de comandos
   distinta.

#    ..src > sh
#      $ go run src/gopl.io/ch1/server1/main.go &
#    < src..
   ..src > sh
     $ go run src/gopl.io/ch1/server1/main.go &
   < src..

#    We can then make client requests from the command line:
   A continuacion, podemos hacer solicitudes desde la linea de comandos:

#    ..src > sh
#      $ go build gopl.io/ch1/fetch
#      $ ./fetch http://localhost:8000
#      URL.Path = "/"
#      $ ./fetch http://localhost:8000/help
#      URL.Path = "/help"
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetch
     $ ./fetch http://localhost:8000
     URL.Path = "/"
     $ ./fetch http://localhost:8000/help
     URL.Path = "/help"
   < src..

#    Alternatively, we can access the server from a web browser, as shown in
#    Figure 1.2.
   Como alternativa, podemos acceder al servidor desde un navegador web, como se
   muestra en la Figura 1.2.

#    ..figure > Figure 1.2. A response from the echo server.
   ..figure > Figura 1.2. Una respuesta del servidor de eco.

#      ..img > img/Figure-1.2.jpg
     ..img > img/Figure-1.2.jpg


#    It’s easy to add features to the server. One useful addition is a specific
#    URL that returns a status of some sort. For example, this version does the
#    same echo but also counts the number of requests; a request to the URL
#    @c(/count) returns the count so far, excluding @c(/count) requests
#    themselves:
   Es facil agregar funciones al servidor. Una adicion util es una URL
   especifica que devuelve un estado de algun tipo. Por ejemplo, esta version
   hace eco, pero tambien cuenta el numero de peticiones; una peticion a la URL
   @c(/count) devuelve el recuento hasta el momento, excluyendo la solicitud
   @c(/count) a si misma:

#    ..figure > @l(gopl.io/ch1/server2/main.go<>gopl.io/ch1/server2)
   ..figure > @l(gopl.io/ch1/server2/main.go<>gopl.io/ch1/server2)

#      ..src > go
#        // Server2 is a minimal "echo" and counter server.
#        package main
#
#        import (
#          "fmt"
#          "log"
#          "net/http"
#          "sync"
#        )
#
#        var mu sync.Mutex
#        var count int
#
#        func main() {
#          http.HandleFunc("/", handler)
#          http.HandleFunc("/count", counter)
#          log.Fatal(http.ListenAndServe("localhost:8000", nil))
#        }
#
#        // handler echoes the Path component of the requested URL.
#        func handler(w http.ResponseWriter, r *http.Request) {
#          mu.Lock()
#          count++
#          mu.Unlock()
#          fmt.Fprintf(w, "URL.Path = %q\n", r.URL.Path)
#        }
#
#        // counter echoes the number of calls so far.
#        func counter(w http.ResponseWriter, r *http.Request) {
#          mu.Lock()
#          fmt.Fprintf(w, "Count %d\n", count)
#          mu.Unlock()
#        }
#      < src..
     ..src > go
       // Server2 es un servidor de eco y conteo minimo
       package main

       import (
         "fmt"
         "log"
         "net/http"
         "sync"
       )

       var mu sync.Mutex
       var count int

       func main() {
         http.HandleFunc("/", handler)
         http.HandleFunc("/count", counter)
         log.Fatal(http.ListenAndServe("localhost:8000", nil))
       }

       // handler hace eco del componente Path de la URL solicitida.
       func handler(w http.ResponseWriter, r *http.Request) {
         mu.Lock()
         count++
         mu.Unlock()
         fmt.Fprintf(w, "URL.Path = %q\n", r.URL.Path)
       }

       // counter hace eco del numero de lamadas hasta ahora.
       func counter(w http.ResponseWriter, r *http.Request) {
         mu.Lock()
         fmt.Fprintf(w, "Count %d\n", count)
         mu.Unlock()
       }
     < src..


#    The server has two handlers, and the request URL determines which one is
#    called: a request for @c(/count) invokes @c(counter) and all others invoke
#    @c(handler). A handler pattern that ends with a slash matches any URL that
#    has the pattern as a prefix. Behind the scenes, the server runs the handler
#    for each incoming request in a separate goroutine so that it can serve
#    multiple requests simultaneously. However, if two concurrent requests try to
#    update count at the same time, it might not be incremented consistently; the
#    program would have a serious bug called a @e(race condition) (@l(#Section
#    9.1<>§9.1)). To avoid this problem, we must ensure that at most one goroutine
#    accesses the variable at a time, which is the purpose of the @c[mu.Lock()]
#    and @c[mu.Unlock()] calls that bracket each access of @c(count). We’ll look
#    more closely at concurrency with shared variables in @l(#Chapter 9).
   El servidor tiene dos manejadores, y la URL de la solicitud determina cual se
   llama: una solicitud por @c(/count) invoca a @c(counter) y todas los demas
   invocan a @c(handler). Un patron de manejo que termina con una barra diagonal
   coincide con cualquier URL que tenga el patron como prefijo. Detras de
   escena, el servidor ejecuta el controlador para cada solicitud entrante en
   una gorutina separada para que pueda servir multiples solicitudes
   simultaneamente. Sin embargo, si dos solicitudes simultaneas intentan
   actualizar @c(count) al mismo tiempo, es posible que no se incremente
   consistentemente; El programa tendria un error grave llamado @e(condicion de
   carrera) (@l(#Seccion 9.1<>§9.1)). Para evitar este problema, debemos
   asegurarnos de que a lo sumo solo una gorutina accede a la variable a la vez,
   que es el proposito de las llamadas a @c[mu.Lock()] y @c[mu.Unlock()] que
   rodean el acceso a @c(count). Examinaremos mas de cerca a la concurrencia con
   variables compartidas en el @l(#Capitulo 9).

#    As a richer example, the handler function can report on the headers and form
#    data that it receives, making the server useful for inspecting and debugging
#    requests:
   Como un ejemplo mas rico, la funcion de manejo puede informar sobre los
   encabezados y datos de formulario que recibe, haciendo que el servidor sea
   util para inspeccionar y depurar peticiones:

#    ..figure > @l(gopl.io/ch1/server3/main.go<>gopl.io/ch1/server3)
   ..figure > @l(gopl.io/ch1/server3/main.go<>gopl.io/ch1/server3)

#      ..src > go
#        // handler echoes the HTTP request.
#        func handler(w http.ResponseWriter, r *http.Request) {
#          fmt.Fprintf(w, "%s %s %s\n", r.Method, r.URL, r.Proto)
#          for k, v := range r.Header {
#            fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
#          }
#          fmt.Fprintf(w, "Host = %q\n", r.Host)
#          fmt.Fprintf(w, "RemoteAddr = %q\n", r.RemoteAddr)
#          if err := r.ParseForm(); err != nil {
#            log.Print(err)
#          }
#          for k, v := range r.Form {
#            fmt.Fprintf(w, "Form[%q] = %q\n", k, v)
#          }
#        }
#      < src..
     ..src > go
       // handler responde a la peticion HTTP.
       func handler(w http.ResponseWriter, r *http.Request) {
         fmt.Fprintf(w, "%s %s %s\n", r.Method, r.URL, r.Proto)
         for k, v := range r.Header {
           fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
         }
         fmt.Fprintf(w, "Host = %q\n", r.Host)
         fmt.Fprintf(w, "RemoteAddr = %q\n", r.RemoteAddr)
         if err := r.ParseForm(); err != nil {
           log.Print(err)
         }
         for k, v := range r.Form {
           fmt.Fprintf(w, "Form[%q] = %q\n", k, v)
         }
       }
     < src..


#    This uses the fields of the @c(http.Request) struct to produce output like
#    this:
   Este utiliza los campos de la estructura @c(http.Request) para producir una
   salida como esta:

#    ..pre >
#      GET /?q=query HTTP/1.1
#      Header["Accept-Encoding"] = ["gzip, deflate, sdch"]
#      Header["Accept-Language"] = ["en-US,en;q=0.8"]
#      Header["Connection"] = ["keep-alive"]
#      Header["Accept"] = ["text/html,application/xhtml+xml,application/xml;..."]
#      Header["User-Agent"] = ["Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)..."]
#      Host = "localhost:8000"
#      RemoteAddr = "127.0.0.1:59911"
#      Form["q"] = ["query"]
#    < pre..
   ..pre >
     GET /?q=query HTTP/1.1
     Header["Accept-Encoding"] = ["gzip, deflate, sdch"]
     Header["Accept-Language"] = ["en-US,en;q=0.8"]
     Header["Connection"] = ["keep-alive"]
     Header["Accept"] = ["text/html,application/xhtml+xml,application/xml;..."]
     Header["User-Agent"] = ["Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)..."]
     Host = "localhost:8000"
     RemoteAddr = "127.0.0.1:59911"
     Form["q"] = ["query"]
   < pre..

#    Notice how the call to @c(ParseForm) is nested within an @c(if) statement. Go
#    allows a simple statement such as a local variable declaration to precede the
#    @c(if) condition, which is particularly useful for error handling as in this
#    example. We could have written it as
   Observe como la llamada a @c(ParseForm) esta anidada dentro de una sentencia
   @c(if). Go permite una declaracion simple, como una declaracion de variable
   local para preceder la sentencia @c(if), lo que es particularmente util para
   el tratamiento de errores como en este ejemplo. Podriamos haberlo escrito
   como

#    ..src > go
#      err := r.ParseForm()
#      if err != nil {
#        log.Print(err)
#      }
#    < src..
   ..src > go
     err := r.ParseForm()
     if err != nil {
       log.Print(err)
     }
   < src..

#    but combining the statements is shorter and reduces the scope of the variable
#    @c(err), which is good practice. We’ll define scope in @l(#Section 2.7).
   la combinacion de las sentencias es mas corta y reduce el alcance de la
   variable @c(err), que es una buena practica. Vamos a definir el alcance en la
   @l(#Seccion 2.7).

#    In these programs, we’ve seen three very different types used as output
#    streams. The @$(fetch) program copied HTTP response data to @c(os.Stdout), a
#    file, as did the @$(lissajous) program. The @$(fetchall) program threw the
#    response away (while counting its length) by copying it to the trivial sink
#    @c(ioutil.Discard). And the web server above used @c(fmt.Fprintf) to write to
#    an @c(http.ResponseWriter) representing the web browser.
   En estos programas, hemos visto tres tipos muy diferentes utilizados como
   flujos de salida. El programa @$(fetch) copia datos de la respuesta HTTP a
   @c(os.Stdout), a un archivo, al igual que el programa @$(lissajous). El
   programa @$(fetchall) arroja la respuesta copiando el flujo (mientras cuenta
   su longitud) de forma trivial en @c(ioutil.Discard). Y el anterior servidor
   web utiliza @c(fmt.Fprintf) para escribir una representacion del navegador
   @c(http.ResponseWriter).

#    Although these three types differ in the details of what they do, they all
#    satisfy a common @e(interface), allowing any of them to be used wherever an
#    output stream is needed. That interface, called @c(io.Writer), is discussed
#    in @l(#Section 7.1).
   Aunque estos tres tipos difieren en los detalles de lo que hacen, todos ellos
   satisfacen una interfaz comun, permitiendo que cualquiera pueda ser utilizado
   cuando sea necesario crear un flujo de salida. Esa interfaz, llamada
   @c(io.Writer), se discute en la @l(#Seccion 7.1).

#    Go’s interface mechanism is the topic of @l(#Chapter 7), but to give an idea
#    of what it’s capable of, let’s see how easy it is to combine the web server
#    with the @c(lissajous) function so that animated GIFs are written not to the
#    standard output, but to the HTTP client. Just add these lines to the web
#    server:
   El mecanismo de interfaz de Go es el tema del @l(#Capitulo 7), pero para dar
   una idea de lo que es capaz de hacer, vamos a ver lo facil que es combinar el
   servidor web con la funcion @c(lissajous) para que los archivos GIF animados
   se escriben no en la salida estandar, en su lugar en el cliente
   HTTP. Simplemente agregue estas lineas al servidor web:

#    ..src > go
#      handler := func(w http.ResponseWriter, r *http.Request) {
#        lissajous(w)
#      }
#      http.HandleFunc("/", handler)
#    < src..
   ..src > go
     handler := func(w http.ResponseWriter, r *http.Request) {
       lissajous(w)
     }
     http.HandleFunc("/", handler)
   < src..

#    or equivalently:
   o su equivalente:

#    ..src > go
#      http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
#        lissajous(w)
#      })
#    < src..
   ..src > go
     http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
       lissajous(w)
     })
   < src..

#    The second argument to the @c(HandleFunc) function call immediately above is
#    a @e(function literal), that is, an anonymous function defined at its point
#    of use. We will explain it further in @l(#Section 5.6).
   El segundo argumento de la funcion @c(HandleFunc) se conoce como una
   e(funcion literal), es decir, una funcion anonima definida en su punto de
   uso. Vamos a explicar mas a fondo en la @l(#Seccion 5.6).

#    Once you’ve made this change, visit @l(http://localhost:8000) in your
#    browser. Each time you load the page, you’ll see a new animation like the one
#    in Figure 1.3.
   Una vez que haya realizado este cambio, visite @l(http://localhost:8000) en su
   navegador. Cada vez que cargue la pagina, vera una nueva animacion como la de
   la Figura 1.3.

#    @b(Exercise 1.12): Modify the Lissajous server to read parameter values from
#    the URL. For example, you might arrange it so that a URL like
#    @c(http://localhost:8000/?cycles=20) sets the number of cycles to 20 instead
#    of the default 5. Use the @c(strconv.Atoi) function to convert the string
#    parameter into an integer. You can see its documentation with @$(go doc
#    strconv.Atoi).
   @b(Ejercicio 1.12): Modificar el servidor de Lissajous para leer valores de
   los parametros de la URL. Por ejemplo, es posible disponer de forma que una
   URL como @c(http://localhost:8000/?cycles=20) establece el numero de ciclos a
   20 en lugar del predeterminado 5. Utilice la funcion @c(strconv.Atoi) para
   convertir el parametro de string a un entero. Puede ver su mediante con @$(go
   doc strconv.Atoi).

#    ..figure > Figure 1.3. Animated Lissajous figures in a browser.
   ..figure > Figura 1.3. Figuras animadas de Lissajous en un navegador.

#      ..img > img/Figure-1.3.jpg
     ..img > img/Figure-1.3.jpg

# ** Section 1.8 <> Loose Ends
** Seccion 1.8 <> Cabos sueltos

#    There is a lot more to Go than we’ve covered in this quick introduction. Here
#    are some topics we’ve barely touched upon or omitted entirely, with just
#    enough discussion that they will be familiar when they make brief appearances
#    before the full treatment.
   Hay mucho mas de Go de lo que hemos cubierto en esta introduccion rapida.
   Aqui hay algunos temas que apenas hemos tocado o omitido por completo, con
   tratamiento suficiente para empezar a familiarizarse con ellos antes de un
   tratamiento completo.

#    - Control flow :: We covered the two fundamental control-flow statements,
#      @c(if) # and @c(for), but not the @c(switch) statement, which is a
#      multi-way branch. Here’s a # small example:
   - Control flow :: Cubrimos los dos estados de flujos de control fundamentales,
     @c(if) y @c(for), pero no la sentencia @c(switch), que es una via de
     multiples ramas. Aqui hay un pequeño ejemplo:

#      ..src > go
#        switch coinflip() {
#        case "heads":
#          heads++
#        case "tails":
#          tails++
#        default:
#          fmt.Println("landed on edge!")
#        }
#      < src..
     ..src > go
       switch coinflip() {
       case "heads":
         heads++
       case "tails":
         tails++
       default:
         fmt.Println("landed on edge!")
       }
     < src..

#      The result of calling @c(coinflip) is compared to the value of each
#      case. Cases are evaluated from top to bottom, so the first matching one
#      is executed. The optional default case matches if none of the other cases
#      does; it may be placed anywhere. Cases do not fall through from one to
#      the next as in C-like languages (though there is a rarely used
#      @c(fallthrough) statement that overrides this behavior).
     El resultado de llamar a @c(coinflip) se compara con el valor de cada
     caso. Los casos se evaluan de arriba a abajo, por lo que se ejecuta la
     primera coincidencia. El caso opcional @c(default) coincide si ninguno de
     los otros casos lo hace; Puede colocarse en cualquier lugar. Los casos no
     caigan uno sobre otro, como en lenguajes tipo C (aunque hay una poco
     utilizada declaracion @c(fallthrough) que anula este comportamiento).

#      A @c(switch) does not need an operand; it can just list the cases, each of which
#      is a boolean expression:
     Un @c(switch) no necesita un operando; Solo puede enumerar los casos, cada
     uno de los cuales es una expresion booleana:

#      ..src > go
#        func Signum(x int) int {
#          switch {
#          case x > 0:
#            return +1
#          default:
#            return 0
#          case x < 0:
#            return -1
#          }
#        }
#      < src..
     ..src > go
       func Signum(x int) int {
         switch {
         case x > 0:
           return +1
         default:
           return 0
         case x < 0:
           return -1
         }
       }
     < src..

#      This form is called a @e(tagless switch); it’s equivalent to @c(switch true).
     Esta forma se llama @e(switch sin etiquetas); que es equivalente a
     @c(switch true).

#      Like the @c(for) and @c(if) statements, a @c(switch) may include an
#      optional simple statement—a short variable declaration, an increment or
#      assignment statement, or a function call—that can be used to set a value
#      before it is tested.
     Al igual que las sentencias @c(for) e @c(if), un @c(switch) puede incluir
     una declaracion, una unica declaracion de variables compacta opcional, una
     declaracion de incremento o asignacion, o una funcion de llamada que se
     puede utilizar para establecer un valor antes de ser puesto a prueba.

#      The @c(break) and @c(continue) statements modify the flow of control. A
#      @c(break) causes control to resume at the next statement after the
#      innermost @c(for), @c(switch), or @c(select) statement (which we’ll see
#      later), and as we saw in @l(#Section 1.3), a @c(continue) causes the
#      innermost @c(for) loop to start its next iteration. Statements may be
#      labeled so that @c(break) and @c(continue) can refer to them, for
#      instance to break out of several nested loops at once or to start the
#      next iteration of the outermost loop. There is even a @c(goto) statement,
#      though it’s intended for machine-generated code, not regular use by
#      programmers.
     Las declaraciones @c(break) y @c(continue) modifican el flujo de
     control. Un @c(break) proboca control se reanude la siguiente sentencia
     despues de la secuenca @c(for), @c(switch), o @c(select) (que veremos mas
     adelante) mas anidada, y como hemos visto en la @l(#Seccion 1.3), un
     @c(continue) proboca que el bucle @c(for) mas interno inicie su proxima
     iteracion. Las declaraciones pueden etiquetarse de forma que un @c(break) y
     @c(continue) pueden referirse a ellos, por ejemplo, para salir de varios
     bucles anidados a la vez o para iniciar la siguiente iteracion del bucle
     mas externo. Hay incluso una sentencia @c(goto), aunque esta destinada para
     el codigo generado por la maquina, sin el uso regular por los
     programadores.

#    - Named types :: A @c(type) declaration makes it possible to give a name to an
#      existing type. Since struct types are often long, they are nearly always
#      named. A familiar example is the definition of a @c(Point) type for a 2-D
#      graphics system:
   - Tipos con nombre :: Una declaracion @c(type) hace que sea posible dar un
     nombre a un tipo existente. Puesto que los tipos de la estructura son a
     menudo largos, se nombran casi siempre. Un ejemplo conocido es la
     definicion de un tipo para un sistema de graficos 2-D @c(Point):

#      ..src > go
#        type Point struct {
#          X, Y int
#        }
#        var p Point
#      < src..
     ..src > go
       type Point struct {
         X, Y int
       }
       var p Point
     < src..

#      Type declarations and named types are covered in @l(#Chapter 2).
     Las declaracion de tipos y tipos con nombre se trata en el @l(#Capitulo 2).

#    - Pointers :: Go provides pointers, that is, values that contain the address
#      of a variable. In some languages, notably C, pointers are relatively
#      unconstrained. In other languages, pointers are disguised as
#      @"(references,) and there’s not much that can be done with them except pass
#      them around. Go takes a position somewhere in the middle. Pointers are
#      explicitly visible. The @c(&) operator yields the address of a variable,
#      and the @c(*) operator retrieves the variable that the pointer refers to,
#      but there is no pointer arithmetic. We’ll explain pointers in @l(#Section
#      2.3.2).
   - Punteros :: Go proporciona punteros, es decir, los valores que contienen
     la direccion de una variable. En algunos lenguajes, notablemente C, los
     punteros son relativamente sin restricciones. En otros lenguajes, los
     punteros son disfrazados como @"(referencias), y no hay mucho que se
     pueda hacer con ellos, excepto pasar a su alrededor. Go toma una posicion
     en algun lugar en el medio. Los punteros son explicitamente
     visibles. operador @c(&) obtiene la direccion de una variable, y el
     operador @c(*) recupera la variable a la que se refiere el puntero, pero
     no hay aritmetica de punteros. Vamos a explicar los punteros en la
     @l(#Seccion 2.3.2).

#    - Methods and interfaces :: A method is a function associated with a named
#      type; Go is unusual in that methods may be attached to almost any named
#      type. Methods are covered in @l(#Chapter 6). Interfaces are abstract types
#      that let us treat different concrete types in the same way based on what
#      methods they have, not how they are represented or implemented. Interfaces
#      are the subject of @l(#Chapter 7).
   - Metodos e interfaces :: Un metodo es una funcion asociada con un tipo de
     dato; Go es inusual en el echo que los metodos se pueden vincular a casi
     cualquier tipo nombrado. Los Metodos son cubiertos en el @l(#Capitulo
     6). Las interfaces son tipos abstractos que nos permiten manejar tipos
     concretos diferentes de la misma manera basados ​​en que metodos tienen, no
     como se representan o implementan. Las interfaces son el tema del
     @l(#Capitulo 7).

#    - Packages :: Go comes with an extensive standard library of useful packages,
#      and the Go community has created and shared many more. Programming is often
#      more about using existing packages than about writing original code of
#      one’s own. Throughout the book, we will point out a couple of dozen of the
#      most important standard packages, but there are many more we don’t have
#      space to mention, and we cannot provide anything remotely like a complete
#      reference for any package.
   - Paquetes :: Go llega con una extensa libreria de paquetes utiles estandar,
     y la comunidad Go ha creado y compartido muchas mas. La programacion es a
     menudo mas sobre el uso de paquetes existentes que sobre la escritura de
     codigo propio original. A lo largo del libro, vamos a señalar un par de
     docenas de los paquetes estandar mas importantes, pero hay muchos mas que
     no tenemos espacio para mencionar, y no podemos proporcionar nada
     remotamente cercana a una referencia completa para cualquier paquete.

#      Before you embark on any new program, it’s a good idea to see if packages
#      already exist that might help you get your job done more easily. You can find
#      an index of the standard library packages at @l(https://golang.org/pkg) and
#      the packages contributed by the community at @l(https://godoc.org). The @$(go
#      doc) tool makes these documents easily accessible from the command line:
     Antes de embarcarse en cualquier programa nuevo, es una buena idea ver si
     ya existen paquetes que podrian ayudarle a hacer su trabajo mas
     facilmente. Puede encontrar un indice de los paquetes de librerias estandar
     en @l(https://golang.org/pkg) y los paquetes aportados por la comunidad en
     @l(https://godoc.org). La herramienta @$(go doc) hace que estos documentos
     sean facilmente accesibles desde la linea de comandos:

#      ..src > sh
#        $ go doc http.ListenAndServe
#        package http // import "net/http"
#
#        func ListenAndServe(addr string, handler Handler) error
#            ListenAndServe listens on the TCP network address addr and then
#            calls Serve with handler to handle requests on incoming connections.
#        ...
#      < src..
     ..src > sh
       $ go doc http.ListenAndServe
       package http // import "net/http"

       func ListenAndServe(addr string, handler Handler) error
           ListenAndServe listens on the TCP network address addr and then
           calls Serve with handler to handle requests on incoming connections.
       ...
     < src..

#    - Comments :: We have already mentioned documentation comments at the
#      beginning of a program or package. It’s also good style to write a comment
#      before the declaration of each function to specify its behavior. These
#      conventions are important, because they are used by tools like @$(go doc)
#      and @$(godoc) to locate and display documentation (@l(#Section
#      10.7.4<>§10.7.4)).
   - Comentarios :: Ya hemos mencionado los comentarios de documentacion al
     inicio de un programa o paquete. Tambien es un buen estilo escribir un
     comentario antes de la declaracion de cada funcion para especificar su
     comportamiento. Estas convenciones son importantes, ya que se utilizan por
     herramientas como @$(go doc) y @$(godoc) para localizar y monstrar la
     documentacion en pantalla (@l(#Seccion 10.7.4<>§10.7.4)).

#      For comments that span multiple lines or appear within an expression or
#      statement, there is also the @c(/* ... */) notation familiar from other
#      languages. Such comments are sometimes used at the beginning of a file for
#      a large block of explanatory text to avoid a @c(//) on every line. Within a
#      comment, @c(//) and @c(/*) have no special meaning, so comments do not
#      nest.
     Para los comentarios que abarcan varias lineas o aparecen dentro de una
     expresion o declaracion, tambien existe la conocida notacion @c(/* ... */)
     de otros lenguajes. Este tipo de comentarios se utilizan a veces al
     principio de un archivo en un gran bloque de texto explicativo para evitar
     un @c(//) en cada linea. Dentro de un comentario, @c(//) y @c(/*) no tienen
     ningun significado especial, por que los comentarios no se anidan.

# * Chapter 2 <> Program Structure
* Capitulo 2 <> Estructura del programa

#   In Go, as in any other programming language, one builds large programs from a
#   small set of basic constructs. Variables store values. Simple expressions are
#   combined into larger ones with operations like addition and subtraction. Basic
#   types are collected into aggregates like arrays and structs. Expressions are
#   used in statements whose execution order is determined by control-flow
#   statements like @c(if) and @c(for). Statements are grouped into functions for
#   isolation and reuse. Functions are gathered into source files and packages.
  En Go, como en cualquier otro lenguaje de programacion, se construyen grandes
  programas a partir de un pequeño conjunto de construcciones basicas. Las
  variables almacenan los valores. Las expresiones simples se combinan en las
  mas grandes con operaciones como suma y resta. Los tipos basicos se reunen en
  agregados como matrices y estructuras. Las expresiones se utilizan en
  declaraciones cuyo orden de ejecucion es determinado por instrucciones de
  control de flujo como @c(if) y @c(for). Las declaraciones se agrupan en
  funciones por aislamiento y reutilizacion. Las funciones se agrupan en
  archivos de codigo fuente y paquetes.

#   We saw examples of most of these in the previous chapter. In this chapter,
#   we’ll go into more detail about the basic structural elements of a Go
#   program. The example programs are intentionally simple, so we can focus on the
#   language without getting sidetracked by complicated algorithms or data
#   structures.
  Vimos ejemplos de la mayoria de estos en el capitulo anterior. En este
  capitulo, vamos a entrar en mas detalles sobre los elementos estructurales
  basicos de un programa Go. Los programas de ejemplo son intencionalmente
  simples, por lo que podemos centrarnos en el lenguaje sin desviarnos de
  complicados algoritmos o estructuras de datos.

# ** Section 2.1 <> Names
** Seccion 2.1 <> Nombres

#    The names of Go functions, variables, constants, types, statement labels, and
#    packages follow a simple rule: a name begins with a letter (that is, anything
#    that Unicode deems a letter) or an underscore and may have any number of
#    additional letters, digits, and underscores. Case matters: @c(heapSort) and
#    @c(Heapsort) are different names.
   Los nombres de las funciones Go, variables, constantes, tipos, etiquetas de
   instrucciones y paquetes siguen una regla simple: un nombre comienza con una
   letra (es decir, cualquier cosa que Unicode considera una letra) o un guion
   bajo y puede tener cualquier numero de letras adicionales, Digitos y giones
   bajos. Las mayusculas importan: @c(heapSort) y @c(Heapsort) son nombres
   diferentes.

#    Go has 25 @e(keywords) like @c(if) and @c(switch) that may be used only where the
#    syntax permits; they can’t be used as names.
   Go tiene 25 @e(palabras claves) como @c(if) y @c(switch) que solo puede
   utilizarse cuando la sintaxis lo permita; No pueden usarse como nombres.

#    ..pre >
#      break      default       func     interface   select
#      case       defer         go       map         struct
#      chan       else          goto     package     switch
#      const      fallthrough   if       range       type
#      continue   for           import   return      var
#    < pre..
   ..pre >
     break      default       func     interface   select
     case       defer         go       map         struct
     chan       else          goto     package     switch
     const      fallthrough   if       range       type
     continue   for           import   return      var
   < pre..

#    In addition, there are about three dozen @e(predeclared) names like @c(int)
#    and @c(true) for built-in constants, types, and functions:
   Ademas, hay cerca de tres docenas de nombres @e(predeclarados) como @c(int) y
   @c(true) para las constantes, tipos y funciones incorporadas:

#    - Constants ::
   - Constantes ::

#      ..pre >
#        true false iota nil
     ..pre >
       true false iota nil

#    - Types     ::
   - Tipos      ::

#      ..pre >
#        int int8 int16 int32 int64
#        uint uint8 uint16 uint32 uint64 uintptr
#        float32 float64 complex128 complex64
#        bool byte rune string error
     ..pre >
       int int8 int16 int32 int64
       uint uint8 uint16 uint32 uint64 uintptr
       float32 float64 complex128 complex64
       bool byte rune string error

#    - Functions ::
   - Functions  ::

#      ..pre >
#        make len cap new append copy close delete
#        complex real imag
#        panic recover
     ..pre >
       make len cap new append copy close delete
       complex real imag
       panic recover


#    These names are not reserved, so you may use them in declarations. We’ll see
#    a handful of places where redeclaring one of them makes sense, but beware of
#    the potential for confusion.
   Estos nombres no estan reservados, por lo que puede utilizarlos en
   declaraciones. Vamos a ver un puñado de lugares donde redeclarar uno de
   ellos tiene sentido, pero tenga cuidado con la potencial confusion.

#    If an entity is declared within a function, it is @e(local) to that
#    function. If declared outside of a function, however, it is visible in all
#    files of the package to which it belongs. The case of the first letter of a
#    name determines its visibility across package boundaries. If the name begins
#    with an upper-case letter, it is @e(exported), which means that it is visible
#    and accessible outside of its own package and may be referred to by other
#    parts of the program, as with @c(Printf) in the @c(fmt) package. Package
#    names themselves are always in lower case.
   Si una entidad se declara dentro de una funcion, esta es @e(local) a esa
   funcion. Si se declara fuera de una funcion, sin embargo, es visible en todos
   los archivos del paquete al que pertenece. La primer letra de un nombre
   determina su visibilidad a traves de los limites del paquete. Si el nombre
   comienza con una letra mayuscula, se exporta, lo que significa que es visible
   y accesible fuera de su propio paquete y puede hacer referencia a otras
   partes del programa, al igual que con @c(Printf) en el paquete @c(fmt). Los
   nombres de los paquetes estan siempre en minusculas.

#    There is no limit on name length, but convention and style in Go programs
#    lean toward short names, especially for local variables with small scopes;
#    you are much more likely to see variables named @c(i) than @c(theLoopIndex).
#    Generally, the larger the scope of a name, the longer and more meaningful it
#    should be.
   No hay limite en la longitud del nombre, pero la convencion y el estilo en
   los programas de Go se inclinan hacia nombres cortos, especialmente para
   variables locales con ambitos pequeños; es mucho mas probable ver variables
   con nombre @c(i) que @c(indiceDelBucle). Generalmente, cuanto mayor es el
   alcance de un nombre, mas largo y mas significativo debe ser.

#    Stylistically, Go programmers use @"(camel case) when forming names by
#    combining words; that is, interior capital letters are preferred over
#    interior underscores. Thus the standard libraries have functions with names
#    like @c(QuoteRuneToASCII) and @c(parseRequestLine) but never
#    @c(quote_rune_to_ASCII) or @c(parse_request_line). The letters of acronyms
#    and initialisms like @A(ASCII) and @A(HTML) are always rendered in the same
#    case, so a function might be called @c(htmlEscape), @c(HTMLEscape), or @c(escapeHTML),
#    but not @c(escapeHtml).
   Estilisticamente, los programadores Go utilizan la @"(notacion camello)
   cuando se forma nombres mediante la combinacion de palabras; Es decir, las
   letras mayusculas internas se prefieren sobre los subrayados interiores. Por
   lo tanto las librerias estandar tienen funciones con nombres como
   @c(QuoteRuneToASCII) y @c(parseRequestLine) pero nunca @c(quote_rune_to_ASCII)
   o @c(parse_request_line). Las letras de acronimos y siglas como @A(ASCII) y
   @A(HTML) siempre se prestan en el mismo tipo, por lo que una funcion sera
   llamada @c(htmlEscape), @c(HTMLEscape) o @c(escapeHTML), pero no
   @c(escapeHtml).

# ** Section 2.2 <> Declarations
** Seccion 2.2 <> Declaraciones

#    A @e(declaration) names a program entity and specifies some or all of its
#    properties. There are four major kinds of declarations: @c(var), @c(const),
#    @c(type), and @c(func). We’ll talk about variables and types in this chapter,
#    constants in @l(#Chapter 3), and functions in @l(#Chapter 5).
   Una @e(declaracion) nombra una entidad del programa y especifica todas o
   algunas de sus propiedades. Hay cuatro tipos principales de declaraciones:
   @c(var), @c(const), @c(type) y @c(func). Hablaremos sobre variables y tipos
   en este capitulo, constantes en el @l(#Capitulo 3), y funciones en el
   @l(#Capitulo 5).

#    A Go program is stored in one or more files whose names end in @f(.go). Each
#    file begins with a @c(package) declaration that says what package the file is
#    part of. The @c(package) declaration is followed by any @c(import)
#    declarations, and then a sequence of @e(package-level) declarations of types,
#    variables, constants, and functions, in any order. For example, this program
#    declares a constant, a function, and a couple of variables:
   Un programa Go se almacena en uno o mas archivos cuyos nombres terminan en
   @f(.go). Cada archivo comienza con una declaracion @c(package) que indica de
   que paquete forma parte el archivo. La declaracion @c(package) es seguido por
   cualquier declaraciones @c(import), y luego una secuencia de declaraciones a
   nivel de paquete de tipos, variables, constantes y funciones, en cualquier
   orden. Por ejemplo, este programa declara una constante, una funcion y un par
   de variables:

#    ..figure > @l(gopl.io/ch2/boiling/main.go<>gopl.io/ch2/boiling)
   ..figure > @l(gopl.io/ch2/boiling/main.go<>gopl.io/ch2/boiling)

#      ..src > go
#        // Boiling prints the boiling point of water.
#        package main
#
#        import "fmt"
#
#        const boilingF = 212.0
#
#        func main() {
#          var f = boilingF
#          var c = (f - 32) * 5 / 9
#          fmt.Printf("boiling point = %g°F or %g°C\n", f, c)
#          // Output:
#          // boiling point = 212°F or 100°C
#        }
#      < src..
     ..src > go
       // Boiling imprime el punto de ebullicion del agua.
       package main

       import "fmt"

       const boilingF = 212.0

       func main() {
         var f = boilingF
         var c = (f - 32) * 5 / 9
         fmt.Printf("boiling point = %g°F or %g°C\n", f, c)
         // Salida:
         // boiling point = 212°F or 100°C
       }
     < src..


#    The constant @c(boilingF) is a package-level declaration (as is @c(main)),
#    whereas the variables @c(f) and @c(c) are local to the function @c(main). The
#    name of each package-level entity is visible not only throughout the source
#    file that contains its declaration, but throughout all the files of the
#    package. By contrast, local declarations are visible only within the function
#    in which they are declared and perhaps only within a small part of it.
   La constante @c(boilingF) es una declaracion de nivel de paquete (como es
   @c(main)), mientras que las variables @c(f) y @c(c) son locales a la funcion
   @c(main). El nombre de cada entidad de nivel de paquete es visible no solo en
   todo el archivo de origen que contiene su declaracion, sino en todos los
   archivos del paquete. Por el contrario, las declaraciones locales son
   visibles solo dentro de la funcion en la que se declaran y tal vez solo
   dentro de una pequeña parte de ella.

#    A function declaration has a name, a list of parameters (the variables whose
#    values are provided by the function’s callers), an optional list of results,
#    and the function body, which contains the statements that define what the
#    function does. The result list is omitted if the function does not return
#    anything. Execution of the function begins with the first statement and
#    continues until it encounters a return statement or reaches the end of a
#    function that has no results. Control and any results are then returned to
#    the caller.
   Una declaracion de funcion tiene un nombre, una lista de parametros (las
   variables cuyos valores se proporcionan por quien llama a la funcion), una
   lista opcional de resultados y el cuerpo de la funcion, que contiene las
   sentencias que definen lo que hace la funcion. La lista de resultados se
   omite si la funcion no devuelve nada. La ejecucion de la funcion comienza con
   la primer instruccion y continua hasta que encuentra una instruccion de
   retorno o llega al final de una funcion que no tiene resultados. El control y
   los resultados se devuelven a quien hiso la llamada.

#    We’ve seen a fair number of functions already and there are lots more to
#    come, including an extensive discussion in @l(#Chapter 5), so this is only a
#    sketch. The function @c(fToC) below encapsulates the temperature conversion
#    logic so that it is defined only once but may be used from multiple
#    places. Here @c(main) calls it twice, using the values of two different local
#    constants:
   Hemos visto un buen numero de funciones ya y hay muchas mas por venir,
   incluyendo una extenso tratamiento en el @l(#Capitulo 5), asi que esto es
   solo un esbozo. La funcion @c(fToC) a continuacion, encapsula la logica de
   conversion de temperatura de manera que se define solo una vez, pero puede
   utilizarse desde multiples lugares. Aqui @c(main) llama dos veces, utilizando
   los valores de las constantes de dos locales diferentes:

#    ..figure > @l(gopl.io/ch2/ftoc/main.go<>gopl.io/ch2/ftoc)
   ..figure > @l(gopl.io/ch2/ftoc/main.go<>gopl.io/ch2/ftoc)

#      ..src > go
#        // Ftoc prints two Fahrenheit-to-Celsius conversions.
#        package main
#
#        import "fmt"
#
#        func main() {
#          const freezingF, boilingF = 32.0, 212.0
#          fmt.Printf("%g°F = %g°C\n", freezingF, fToC(freezingF)) // "32°F = 0°C"
#          fmt.Printf("%g°F = %g°C\n", boilingF, fToC(boilingF))   // "212°F = 100°C"
#        }
#
#        func fToC(f float64) float64 {
#          return (f - 32) * 5 / 9
#        }
#      < src..
     ..src > go
       // Ftoc imprime dos conversiones de Fahrenheit a Celsius.
       package main

       import "fmt"

       func main() {
         const freezingF, boilingF = 32.0, 212.0
         fmt.Printf("%g°F = %g°C\n", freezingF, fToC(freezingF)) // "32°F = 0°C"
         fmt.Printf("%g°F = %g°C\n", boilingF, fToC(boilingF))   // "212°F = 100°C"
       }

       func fToC(f float64) float64 {
         return (f - 32) * 5 / 9
       }
     < src..

# ** Section 2.3 <> Variables
** Seccion 2.3 <> Variables

#    A @c(var) declaration creates a variable of a particular type, attaches a
#    name to it, and sets its initial value. Each declaration has the general form
   Un declaracion @c(var) crea una variable de un tipo particular, vinculando un
   nombre a la misma, y se define su valor inicial. Cada declaracion tiene la
   forma general

#    ..src > go
#      var name type = expression
#    < src..
   ..src > go
     var nombre tipo = expresion
   < src..

#    Either the type or the @c(= expression) part may be omitted, but not both. If
#    the type is omitted, it is determined by the initializer expression. If the
#    expression is omitted, the initial value is the @e(zero value) for the type,
#    which is @c(0) for numbers, @c(false) for booleans, @c("") for strings, and
#    @c(nil) for interfaces and reference types (slice, pointer, map, channel,
#    function). The zero value of an aggregate type like an array or a struct has
#    the zero value of all of its elements or fields.
   O bien el tipo o la parte @c(= expresion) pueden omitirse, pero no ambos. Si
   se omite el tipo, se determina mediante la expresion del inicializador. Si se
   omite la expresion, el valor inicial es el @e(valor cero) para el tipo, que
   es 0 para los numeros, @c(false) para booleanos, @c("") para string, y
   @c(nil) para interfaces y tipos de referencia (slices, punteros, mapa, canal,
   funcion). El valor cero de un tipo agregado como una matriz o una estructura
   tiene el valor cero de todos sus elementos o campos.

#    The zero-value mechanism ensures that a variable always holds a well-defined
#    value of its type; in Go there is no such thing as an uninitialized
#    variable. This simplifies code and often ensures sensible behavior of
#    boundary conditions without extra work. For example,
   El mecanismo de valor cero asegura que una variable siempre tenga un valor
   bien definido de su tipo; En Go no hay tal cosa como una variable no
   inicializada. Esto simplifica el codigo y, a menudo, asegura un
   comportamiento sensible de las condiciones limite sin trabajo adicional. Por
   ejemplo,

#    ..src > go
#      var s string
#      fmt.Println(s) // ""
#    < src..
   ..src > go
     var s string
     fmt.Println(s) // ""
   < src..

#    prints an empty string, rather than causing some kind of error or
#    unpredictable behavior. Go programmers often go to some effort to make the
#    zero value of a more complicated type meaningful, so that variables begin
#    life in a useful state.
   Imprime una cadena vacia, en lugar de causar algun tipo de error o
   comportamiento impredecible. Los programadores Go, suelen hacer algun
   esfuerzo por hacer el valor cero de un tipo mas complicado significativo, por
   lo que las variables comienzan su vida en un estado util.

#    It is possible to declare and optionally initialize a set of variables in a
#    single declaration, with a matching list of expressions. Omitting the type
#    allows declaration of multiple variables of different types:
   Es posible declarar y opcionalmente inicializar un conjunto de variables en
   una sola declaracion, con una lista de expresiones correspondiente. Omitir el
   tipo permite la declaracion de multiples variables de diferentes tipos:

#    ..src > go
#      var i, j, k int                 // int, int, int
#      var b, f, s = true, 2.3, "four" // bool, float64, string
#    < src..
   ..src > go
     var i, j, k int                 // int, int, int
     var b, f, s = true, 2.3, "four" // bool, float64, string
   < src..

#    Initializers may be literal values or arbitrary expressions. Package-level
#    variables are initialized before @c(main) begins (@l(#Section
#    2.6.2<>§2.6.2)), and local variables are initialized as their declarations
#    are encountered during function execution.
   Los inicializadores pueden ser valores literales o expresiones
   arbitrarias. Las variables a nivel de paquete se inicializan antes del inicio
   de @c(main) (@l(#Seccion 2.6.2<>§2.6.2)), y las variables locales se
   inicializan a medida que se encuentran sus declaraciones durante la ejecucion
   de la funcion.

#    A set of variables can also be initialized by calling a function that returns
#    multiple values:
   Tambien se puede inicializar un conjunto de variables llamando a una funcion
   que devuelve valores multiples:

#    ..src > go
#      var f, err = os.Open(name) // os.Open returns a file and an error
#    < src..
   ..src > go
     var f, err = os.Open(name) // os.Open returns a file and an error
   < src..

# *** Section 2.3.1 <> Short Variable Declarations
*** Seccion 2.3.1 <> Declaraciones de Variables Compacta

#     Within a function, an alternate form called a @e(short variable declaration)
#     may be used to declare and initialize local variables. It takes the form
#     @c(name := expression), and the type of @c(name) is determined by the type
#     of @c(expression). Here are three of the many short variable declarations in
#     the @c(lissajous) function (@l(#Section 1.4<>§1.4)):
    Dentro de una funcion, una forma alternativa llamada @e(declaracion de
    variables compacta) se puede usar para declarar e inicializar las variables
    locales. Toma la forma @c(nombre := expresion), y el tipo de @c(nombre) esta
    determinada por el tipo de @c(expresion). Aqui estan tres de las muchas
    declaraciones de variables compacta en la funcion @c(lissajous) (@l(#Seccion
    1.4<>§1.4)):

#     ..src > go
#       anim := gif.GIF{LoopCount: nframes}
#       freq := rand.Float64() * 3.0
#       t := 0.0
#     < src..
    ..src > go
      anim := gif.GIF{LoopCount: nframes}
      freq := rand.Float64() * 3.0
      t := 0.0
    < src..

#     Because of their brevity and flexibility, short variable declarations are
#     used to declare and initialize the majority of local variables. A @c(var)
#     declaration tends to be reserved for local variables that need an explicit
#     type that differs from that of the initializer expression, or for when the
#     variable will be assigned a value later and its initial value is
#     unimportant.
    Debido a su brevedad y flexibilidad, la declaracion compacta de variables se
    utilizan para declarar e inicializar la mayoria de las variables
    locales. Una sentencia @c(var) tiende a ser reservado para las variables
    locales que necesitan un tipo explicito que difiere de la de la expresion de
    inicializacion, o para cuando se le asignara un valor mas adelante la
    variable y su valor inicial no es importante.

#     ..src > go
#       i := 100                  // an int
#       var boiling float64 = 100 // a float64
#
#       var names []string
#       var err error
#       var p Point
#     < src..
    ..src > go
      i := 100                  // an int
      var boiling float64 = 100 // a float64

      var names []string
      var err error
      var p Point
    < src..

#     As with @c(var) declarations, multiple variables may be declared and initialized
#     in the same short variable declaration,
    Como con las sentencias @c(var), multiples variables pueden ser declaradas e
    inicializadas en la misma declaracion compacta de variables,

#     ..src > go
#       i, j := 0, 1
#     < src..
    ..src > go
      i, j := 0, 1
    < src..

#     but declarations with multiple initializer expressions should be used only
#     when they help readability, such as for short and natural groupings like the
#     initialization part of a @c(for) loop.
    pero las declaraciones con multiples expresiones de inicializador deben
    utilizarse solo cuando ayudan a la legibilidad, como en agrupaciones cortas
    y naturales, como la parte de inicializacion de un bucle @c(for).

#     Keep in mind that @c(:=) is a declaration, whereas @c(=) is an assignment. A
#     multi-variable declaration should not be confused with a @e(tuple
#     assignment) (@l(#Section 2.4.1<>§2.4.1)), in which each variable on the
#     left-hand side is assigned the corresponding value from the right-hand side:
    Tenga en cuenta que @c(:=) es una declaracion, mientras que @c(=) es una
    asignacion. Una declaracion de multiples variables no debe confundirse con
    una asignacion de tuplas (@l(#Seccion 2.4.1<>§2.4.1)), en la que se asigna a
    cada variable en el lado de la izquierda el valor correspondiente de la
    parte derecha:

#     ..src > go
#       i, j = j, i // swap values of i and j
#     < src..
    ..src > go
      i, j = j, i // swap values of i and j
    < src..

#     Like ordinary @c(var) declarations, short variable declarations may be used
#     for calls to functions like @c(os.Open) that return two or more values:
    Al igual que en declaraciones @c(var) ordinarias, la declaraciones de
    variables compacta se puede utilizar para las llamadas a funciones como
    @c(os.Open) que devuelve dos o mas valores:

#     ..src > go
#       f, err := os.Open(name)
#       if err != nil {
#         return err
#       }
#       // ...use f...
#       f.Close()
#     < src..
    ..src > go
      f, err := os.Open(name)
      if err != nil {
        return err
      }
      // ...use f...
      f.Close()
    < src..

#     One subtle but important point: a short variable declaration does not
#     necessarily @e(declare) all the variables on its left-hand side. If some of
#     them were already declared in the @e(same) lexical block (@l(#Section
#     2.7<>§2.7)), then the short variable declaration acts like an @e(assignment)
#     to those variables.
    Un punto sutil pero importante: una declaracion de variables compacta no
    declara necesariamente todas las variables en su lado izquierdo. Si algunos
    de ellos ya fueron declarados en el @e(mismo) bloque lexico (@l(#Seccion
    2.7<>§2.7)), entonces la declaracion de variables compacta se comporta como
    una asignacion a esas variables.

#     In the code below, the first statement declares both @c(in) and @c(err). The second
#     declares @c(out) but only assigns a value to the existing @c(err) variable.
    En el codigo siguiente, la primera sentencia declara tanto @c(in) como
    @c(err). El segundo declara @c(out) pero solo asigna un valor a la variable
    @c(err) existente.

#     ..src > go
#       in, err := os.Open(infile)
#       // ...
#       out, err := os.Create(outfile)
#     < src..
    ..src > go
      in, err := os.Open(infile)
      // ...
      out, err := os.Create(outfile)
    < src..

#     A short variable declaration must declare at least one new variable,
#     however, so this code will not compile:
    Sin embargo, una declaracion de variable corta debe declarar al menos una
    variable nueva, por lo que este codigo no compilara:

#     ..src > go
#       f, err := os.Open(infile)
#       // ...
#       f, err := os.Create(outfile) // compile error: no new variables
#     < src..
    ..src > go
      f, err := os.Open(infile)
      // ...
      f, err := os.Create(outfile) // error de compilacion: no hay nuevas variables
    < src..


#     The fix is to use an ordinary assignment for the second statement.
    La correccion consiste en utilizar una asignacion ordinaria para la segunda
    instruccion.

#     A short variable declaration acts like an assignment only to variables that
#     were already declared in the same lexical block; declarations in an outer
#     block are ignored. We’ll see examples of this at the end of the chapter.
    Una declaracion de variable compacta actua como una asignacion solo a
    variables que ya estaban declaradas en el mismo bloque lexico; Las
    declaraciones en un bloque externo se ignoran. Veremos ejemplos de esto al
    final del capitulo.

# *** Section 2.3.2 <> Pointers
*** Seccion 2.3.2 <> Punteros

#     A @e(variable) is a piece of storage containing a value. Variables created
#     by declarations are identified by a name, such as @c(x), but many variables
#     are identified only by expressions like @c(x[i]) or @c(x.f). All these
#     expressions read the value of a variable, except when they appear on the
#     lefthand side of an assignment, in which case a new value is assigned to the
#     variable.
    Una variable es una pieza de almacenamiento que contiene un valor. Las
    variables creadas por las declaraciones se identifican por un nombre, como
    @c(x), pero muchas variables se idientifican solo por expresion como
    @c(x[i]) o @c(x.f). Todas estas expresiones leen el valor de una variable,
    excepto cuando aparecen en el lado izquierdo de una asignacion, en cuyo caso
    se asigna un nuevo valor a la variable.

#     A @e(pointer) value is the @e(address) of a variable. A pointer is thus the
#     location at which a value is stored. Not every value has an address, but
#     every variable does. With a pointer, we can read or update the value of a
#     variable @e(indirectly), without using or even knowing the name of the
#     variable, if indeed it has a name.
    El valor de un @e(puntero) es la @e(direccion) de una variable. Un puntero
    es, por tanto, la ubicacion en la que se almacena un valor. No todos los
    valores tienen una direccion, pero todas las variables si. Con un puntero,
    podemos leer o actualizar el valor de una variable @e(indirectamente), sin
    utilizar o incluso saber el nombre de la variable, si es que tiene un
    nombre.

#     If a variable is declared @c(var x int), the expression @c(&x) (@"(address of
#     @c(x))) yields a pointer to an integer variable, that is, a value of type
#     @c(*int), which is pronounced @"(pointer to int.) If this value is called
#     @c(p), we say @"(@c(p) points to @c(x),) or equivalently @"(@c(p) contains
#     the address of @c(x).) The variable to which @c(p) points is written
#     @c(*p). The expression @c(*p) yields the value of that variable, an @c(int),
#     but since @c(*p) denotes a variable, it may also appear on the left-hand
#     side of an assignment, in which case the assignment updates the variable.
    Si se declara una variable @c(var x int), la expresion @c(&x) (@"(direccion
    de @c(x))) produce un puntero a una variable de de tipo entero, es decir, un
    valor de tipo @c(*int), que se pronuncia @"(puntero a int.) Si este valor se
    llama @c(p), decimos @"(@c(p) apunta a @c(x),)" o equivalentemente @"(@c(p)
    contiene la direccion de @c(x).) La variable a la que @c(p) apunta se
    escribe @c(*p). La expresion @c(*p) produce el valor de dicha variable, un
    @c(int), pero desde @c(*p) indica una variable, tambien puede aparecer en la
    parte izquierda de una asignacion, en cuyo caso la asignacion actualiza la
    variable.

#     ..src > go
#       x := 1
#       p := &x         // p, of type *int, points to x
#       fmt.Println(*p) // "1"
#       *p = 2          // equivalent to x = 2
#       fmt.Println(x)  // "2"
#     < src..
    ..src > go
      x := 1
      p := &x         // p, of type *int, points to x
      fmt.Println(*p) // "1"
      *p = 2          // equivalent to x = 2
      fmt.Println(x)  // "2"
    < src..

#     Each component of a variable of aggregate type—a field of a struct or an
#     element of an array— is also a variable and thus has an address too.
    Cada componente de una variable de tipo agregado–un campo de una estructura
    o un elemento de una matriz– es tambien una variable y por lo tanto tiene
    una direccion tambien.

#     Variables are sometimes described as @e(addressable) values. Expressions
#     that denote variables are the only expressions to which the @e(address-of)
#     operator @c(&) may be applied.
    Las variables se describen a veces como valores @e(direccionables).
    Expresiones que denotan variables son las unicas expresiones a las que el
    operador de direccion @c(&) se puede aplicar.

#     The zero value for a pointer of any type is @c(nil). The test @c(p != nil) is true
#     if @c(p) points to a variable. Pointers are comparable; two pointers are equal
#     if and only if they point to the same variable or both are nil.
    El valor cero de un puntero de cualquier tipo es @c(nil). La prueba de @c(p
    != nil) es verdadera si @c(p) apunta a una variable. Los punteros son
    comparables; Dos punteros son iguales si y solo si apuntan a la misma
    variable o ambos son @c(nil).

#     ..src > go
#       var x, y int
#       fmt.Println(&x == &x, &x == &y, &x == nil) // "true false false"
#     < src..
    ..src > go
      var x, y int
      fmt.Println(&x == &x, &x == &y, &x == nil) // "true false false"
    < src..

#     It is perfectly safe for a function to return the address of a local
#     variable. For instance, in the code below, the local variable @c(v) created by
#     this particular call to @c(f) will remain in existence even after the call has
#     returned, and the pointer @c(p) will still refer to it:
    Es perfectamente seguro para una funcion devolver la direccion de una
    variable local. Por ejemplo, en el codigo siguiente, la variable local @c(v)
    creada por la llamada a @c(f) seguira existiendo incluso despues de devolver
    la llamada, y el puntero @c(p) todavia se referira a ella:

#     ..src > go
#       var p = f()
#
#       func f() *int {
#         v := 1
#         return &v
#       }
#     < src..
    ..src > go
      var p = f()

      func f() *int {
        v := 1
        return &v
      }
    < src..

#     Each call of @c(f) returns a distinct value:
    Cada llamada a @c(f) devuelve un valor distinto:

#     ..src > go
#       fmt.Println(f() == f()) // "false"
#     < src..
    ..src > go
      fmt.Println(f() == f()) // "false"
    < src..

#     Because a pointer contains the address of a variable, passing a pointer
#     argument to a function makes it possible for the function to update the
#     variable that was indirectly passed. For example, this function increments
#     the variable that its argument points to and returns the new value of the
#     variable so it may be used in an expression:
    Debido a que un puntero contiene la direccion de una variable, pasar un
    argumento de puntero a una funcion hace posible que la funcion actualice la
    variable que se paso indirectamente. Por ejemplo, esta funcion incrementa la
    variable a la que apunta su argumento y devuelve el nuevo valor de la
    variable para que pueda ser utilizada en una expresion:

#     ..src > go
#       func incr(p *int) int {
#         *p++ // increments what p points to; does not change p
#         return *p
#       }
#
#       v := 1
#       incr(&v)              // side effect: v is now 2
#       fmt.Println(incr(&v)) // "3" (and v is 3)
#     < src..
    ..src > go
      func incr(p *int) int {
        *p++ // incrementa a lo que apunta p; no cambia p
        return *p
      }

      v := 1
      incr(&v)              // efecto secundario: ahora v es 2
      fmt.Println(incr(&v)) // "3" (y v es 3)
    < src..

#     Each time we take the address of a variable or copy a pointer, we create new
#     @e(aliases) or ways to identify the same variable. For example, @c(*p) is an
#     alias for @c(v). Pointer aliasing is useful because it allows us to access a
#     variable without using its name, but this is a double-edged sword: to find
#     all the statements that access a variable, we have to know all its
#     aliases. It’s not just pointers that create aliases; aliasing also occurs
#     when we copy values of other reference types like slices, maps, and
#     channels, and even structs, arrays, and interfaces that contain these types.
    Cada vez que se toma la direccion de una variable o se copia un puntero,
    creamos nuevos @e(alias) o maneras de identificar a la misma variable. Por
    ejemplo, @c(*p) es un alias para @c(v). Los punteros como alias son utiles
    porque nos permite acceder a una variable sin usar su nombre, pero esto es
    una espada de doble filo: para encontrar todas las sentencias que acceden a
    una variable, tenemos que conocer todos sus alias. No son solo los punteros
    que crean alias; los alias tambien se crean cuando copiamos valores de otros
    tipos de referencia como slices, mapas y canales, e incluso estructuras,
    matrices e interfaces que contienen estos tipos.

#     Pointers are key to the @c(flag) package, which uses a program’s
#     command-line arguments to set the values of certain variables distributed
#     throughout the program. To illustrate, this variation on the earlier
#     @$(echo) command takes two optional flags: @c(-n) causes @$(echo) to omit
#     the trailing newline that would normally be printed, and @c(-s sep) causes
#     it to separate the output arguments by the contents of the string @c(sep)
#     instead of the default single space. Since this is our fourth version, the
#     package is called @f(gopl.io/ch2/echo4).
    Los punteros son clave para el paquete @c(flag), que utiliza los argumentos
    de linea de comandos de un programa, para establecer los valores de ciertas
    variables distribuidas a lo largo del programa. Para ilustrar, esta
    variacion en el anterior comando @$(echo) tiene dos indicadores opcionales:
    @c(-n) provaca que @$(echo) omita el salto de linea final que normalmente se
    imprime, y @c(-s sep) hace que se separe los argumentos de salida por el
    contenido de la cadena @c(sep) en lugar de El espacio unico
    predeterminado. Como esta es nuestra cuarta version, el paquete se llama
    @f(gopl.io/ch2/echo4).

#     ..figure > @l(gopl.io/ch2/echo4/main.go<>gopl.io/ch2/echo4)
    ..figure > @l(gopl.io/ch2/echo4/main.go<>gopl.io/ch2/echo4)

#       ..src > go
#         // Echo4 prints its command-line arguments.
#         package main
#
#         import (
#           "flag"
#           "fmt"
#           "strings"
#         )
#
#         var n = flag.Bool("n", false, "omit trailing newline")
#         var sep = flag.String("s", " ", "separator")
#
#         func main() {
#           flag.Parse()
#           fmt.Print(strings.Join(flag.Args(), *sep))
#           if !*n {
#             fmt.Println()
#           }
#         }
#       < src..
      ..src > go
        // Echo4 imprime sus argumentos de linea de comandos.
        package main

        import (
          "flag"
          "fmt"
          "strings"
        )

        var n = flag.Bool("n", false, "omit trailing newline")
        var sep = flag.String("s", " ", "separator")

        func main() {
          flag.Parse()
          fmt.Print(strings.Join(flag.Args(), *sep))
          if !*n {
            fmt.Println()
          }
        }
      < src..


#     The function @c(flag.Bool) creates a new flag variable of type @c(bool). It
#     takes three arguments: the name of the flag (@c("n")), the variable’s
#     default value (@c(false)), and a message that will be printed if the user
#     provides an invalid argument, an invalid flag, or @c(-h) or
#     @c(-help). Similarly, @c(flag.String) takes a name, a default value, and a
#     message, and creates a @c(string) variable. The variables @c(sep) and @c(n)
#     are pointers to the flag variables, which must be accessed indirectly as
#     @c(*sep) and @c(*n).
    La funcion @c(flag.Bool) crea una nueva variable bandera de tipo @c(bool).
    Toma tres argumentos: el nombre de la bandera (@c("n")), el valor por
    defecto de la variable (@c(false)), y un mensaje que se imprimira si el
    usuario proporciona un argumento invalido, una bandera invalida, o @c(-h) o
    @c(-help). Del mismo modo, @c(flag.String) toma un nombre, un valor por
    defecto, y un mensaje, y crea una variable @c(string). Las variables @c(sep)
    y @c(n) son punteros a las variables de la bandera, que deben accederse
    indirectamente como @c(*sep) y @c(*n).

#     When the program is run, it must call @c(flag.Parse) before the flags are
#     used, to update the flag variables from their default values. The non-flag
#     arguments are available from @c[flag.Args()] as a slice of strings. If
#     @c(flag.Parse) encounters an error, it prints a usage message and calls
#     @c[os.Exit(2)] to terminate the program.
    Cuando se ejecuta el programa, debe llamar a @c(flag.Parse) antes de
    utilizar las banderas, para actualizar las variables bandera de sus valores
    por defecto. Los argumentos que no sean banderas estan disponibles mediante
    @c[flag.Args()] como un slice de strings. Si @c(flag.Parse) encuentra un
    error, se imprime un mensaje sobre el uso y llama a @c[os.Exit(2)] para terminar
    el programa.

#     Let’s run some test cases on @$(echo):
    Vamos a ejecutar algunos casos de prueba a @$(echo):

#     ..src > sh
#       $ go build gopl.io/ch2/echo4
#       $ ./echo4 a bc def
#       a bc def
#       $ ./echo4 -s / a bc def
#       a/bc/def
#       $ ./echo4 -n a bc def
#       a bc def$
#       $ ./echo4 -help
#       Usage of ./echo4:
#         -n    omit trailing newline
#         -s string
#               separator (default " ")
#     < src..
    ..src > sh
      $ go build gopl.io/ch2/echo4
      $ ./echo4 a bc def
      a bc def
      $ ./echo4 -s / a bc def
      a/bc/def
      $ ./echo4 -n a bc def
      a bc def$
      $ ./echo4 -help
      Usage of ./echo4:
        -n    omit trailing newline
        -s string
              separator (default " ")
    < src..

# *** Section 2.3.3 <> The @c(new) Function
*** Seccion 2.3.3 <> La Funcion @c(new)

#     Another way to create a variable is to use the built-in function @c(new).
#     The expression @c[new(T)] creates an @e(unnamed variable) of type @c(T),
#     initializes it to the zero value of @c(T), and returns its address, which is
#     a value of type @c(*T).
    Otra forma de crear una variable es utilizar la funcion nativa de @c(new).
    La expresion @c[new(T)] crea una @e(variable sin nombre) del tipo @c(T), la
    inicializa al valor cero de @c(T), y devuelve su direccion, que es un valor
    de tipo @c(*T).

#     ..src > go
#       p := new(int)   //  p, of type *int, points to an unnamed int variable
#       fmt.Println(*p) //  "0"
#       *p = 2          //  sets the unnamed int to 2
#       fmt.Println(*p) //  "2"
#     < src..
    ..src > go
      p := new(int)   //  p, de tipo *int, apunta a una varible int sin nombre
      fmt.Println(*p) //  "0"
      *p = 2          //  establece el int sin nombre a 2
      fmt.Println(*p) //  "2"
    < src..

#     A variable created with @c(new) is no different from an ordinary local
#     variable whose address is taken, except that there’s no need to invent (and
#     declare) a dummy name, and we can use @c[new(T)] in an expression. Thus
#     @c(new) is only a syntactic convenience, not a fundamental notion:
    Una variable creada con @c(new) no es diferente de una variable local
    ordinaria cuya direccion es tomada, excepto que no hay necesidad de inventar
    (y declarar) un nombre ficticio, y podemos usar @c[new(T)] en una expresion.
    De este modo @c(new) es solo una conveniencia sintactica, no es una idea
    fundamental:

#     the two @c(newInt) functions below have identical behaviors.
    las dos funciones @c(newInt) a continuacion tienen comportamientos
    identicos.

#     ..cols >
    ..cols >

#       ..src > go
#         func newInt() *int {
#           return new(int)
#         }
#       < src..
      ..src > go
        func newInt() *int {
          return new(int)
        }
      < src..

#       ::
      ::

#       ..src > go
#         func newInt() *int {
#           var dummy int
#           return &dummy
#         }
#       < src..
      ..src > go
        func newInt() *int {
          var dummy int
          return &dummy
        }
      < src..

#     Each call to @c(new) returns a distinct variable with a unique address:
    Cada llamada a @c(new) devuelve una variable distinta con una direccion
    unica:

#     ..src > go
#       p := new(int)
#       q := new(int)
#       fmt.Println(p == q) // "false"
#     < src..
    ..src > go
      p := new(int)
      q := new(int)
      fmt.Println(p == q) // "false"
    < src..

#     There is one exception to this rule: two variables whose type carries no
#     information and is therefore of size zero, such as @c(struct{}) or
#     @c([0]int), may, depending on the implementation, have the same address.
    Hay una excepcion a esta regla: dos variables cuyo tipo no lleva ninguna
    informacion y por lo tanto es de tamaño cero, como @c(struct{}) o
    @c([0]int), puede, dependiendo de la aplicacion, tener la misma direccion.

#     The @c(new) function is relatively rarely used because the most common
#     unnamed variables are of struct types, for which the struct literal syntax
#     (@l(#Section 4.4.1<>§4.4.1)) is more flexible.
    La funcion @c(new) se utiliza relativamente rara vez porque las variables
    sin nombre mas comunes son de tipo estructura, para el que la sintaxis
    literal @c(struct) (@l(#Seccion 4.4.1<>§4.4.1)) es mas flexible.

#     Since @c(new) is a predeclared function, not a keyword, it’s possible to redefine the name for
#     something else within a function, for example:
    Dado que @c(new) es una funcion nativa, no una palabra clave, es posible
    redefinir el nombre para algo distinto dentro de una funcion, por ejemplo:

#     ..src > go
#       func delta(old, new int) int { return new - old }
#     < src..
    ..src > go
      func delta(old, new int) int { return new - old }
    < src..

#     Of course, within @c(delta), the built-in @c(new) function is unavailable.
    Por supuesto, dentro de @c(delta), la funcion nativa @c(new) no esta
    disponible.

# *** Section 2.3.4 <> Lifetime of Variables
*** Seccion 2.3.4 <> Tiempo de Vida de las Variables

#     The @e(lifetime) of a variable is the interval of time during which it
#     exists as the program executes.  The lifetime of a package-level variable is
#     the entire execution of the program. By contrast, local variables have
#     dynamic lifetimes: a new instance is created each time the declaration
#     statement is executed, and the variable lives on until it becomes
#     @e(unreachable), at which point its storage may be recycled. Function
#     parameters and results are local variables too; they are created each time
#     their enclosing function is called.
    La @e(vida util) de una variable es el intervalo de tiempo durante el cual
    existe a medida que el programa se ejecuta. La duracion de una variable a
    nivel de paquete, es la ejecucion completa del programa. Por el contrario,
    las variables locales tienen una vida util dinamica: una nueva instancia se
    crea cada vez que se ejecuta la instruccion de declaracion, y la variable
    vive hasta que se vuelve @e(inaccesible), momento en el que su
    almacenamiento se puede reciclar. Los parametros de funcion y los resultados
    tambien son variables locales; Se crean cada vez que se llama a la funcion
    que las encierra.

#     For example, in this excerpt from the Lissajous program of @l(#Section 1.4),
    Por ejemplo, en este extracto del programa de Lissajous de la @l(#Seccion 1.4),

#     ..src > go
#       for t := 0.0; t < cycles*2*math.Pi; t += res {
#         x := math.Sin(t)
#         y := math.Sin(t*freq + phase)
#         img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),
#           blackIndex)
#       }
#     < src..
    ..src > go
      for t := 0.0; t < cycles*2*math.Pi; t += res {
        x := math.Sin(t)
        y := math.Sin(t*freq + phase)
        img.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),
          blackIndex)
      }
    < src..

#     the variable @c(t) is created each time the @c(for) loop begins, and new
#     variables @c(x) and @c(y) are created on each iteration of the loop.
    la variable @c(t) se crea cada vez que el bucle @c(for) comienza, y nuevas
    variables @c(x) y @c(y) se crean en cada iteracion del bucle.

#     How does the garbage collector know that a variable’s storage can be
#     reclaimed? The full story is much more detailed than we need here, but the
#     basic idea is that every package-level variable, and every local variable of
#     each currently active function, can potentially be the start or root of a
#     path to the variable in question, following pointers and other kinds of
#     references that ultimately lead to the variable. If no such path exists, the
#     variable has become unreachable, so it can no longer affect the rest of the
#     computation.
    ¿Como sabe el recolector de basura que el almacenamiento de una variable
    puede ser recuperado? La historia completa es mucho mas detallada de lo que
    necesitamos aqui, pero la idea basica es que cada variable a nivel de
    paquete, y cada variable local de cada funcion actualmente activa, puede ser
    el inicio o la raiz de una ruta a la variable en cuestion, sugiendo punteros
    y otros tipos de referencias que finalmente conducen a la variable. Si no
    existe tal ruta, la variable se ha vuelto inaccesible, por lo que ya no
    puede afectar el resto del calculo.

#     Because the lifetime of a variable is determined only by whether or not it
#     is reachable, a local variable may outlive a single iteration of the
#     enclosing loop. It may continue to exist even after its enclosing function
#     has returned.
    Debido a que el tiempo de vida de una variable se determina por ser o no
    accesible, una variable local puede sobrevivir a una sola iteracion del
    bucle que lo rodea. Puede seguir existiendo incluso despues de que su
    funcion de inclusion ha regresado.

#     A compiler may choose to allocate local variables on the heap or on the
#     stack but, perhaps surprisingly, this choice is not determined by whether
#     var or @c(new) was used to declare the variable.
    Un compilador puede elegir por asignar las variables locales en el monticulo
    o en la pila, pero, tal vez sorprendentemente, esta eleccion no depende de
    si se utiliza @c(var) o @c(new) para declarar la variable.

#     ..cols >
    ..cols >

#       ..src > go
#         var global *int
#
#         func f() {
#           var x int
#           x = 1
#           global = &x
#         }
#       < src..
      ..src > go
        var global *int

        func f() {
          var x int
          x = 1
          global = &x
        }
      < src..

#       ::
      ::

#       ..src > go
#         func g() {
#           y := new(int)
#           *y = 1
#         }
#       < src..
      ..src > go
        func g() {
          y := new(int)
          *y = 1
        }
      < src..

#     Here, @c(x) must be heap-allocated because it is still reachable from the
#     variable @c(global) after @c(f) has returned, despite being declared as a
#     local variable; we say @c(x) @e(escapes from) @c(f). Conversely, when @c(g)
#     returns, the variable @c(*y) becomes unreachable and can be recycled. Since
#     @c(*y) does not escape from @c(g), it’s safe for the compiler to allocate
#     @c(*y) on the stack, even though it was allocated with @c(new). In any case,
#     the notion of escaping is not something that you need to worry about in
#     order to write correct code, though it’s good to keep in mind during
#     performance optimization, since each variable that escapes requires an extra
#     memory allocation.
    Aqui, @c(x) debe ser asignado al monticulo porque todavia es accesible desde
    la variable @c(global) despues de haber devuelto @c(f), a pesar de ser
    declarado como una variable local; decimos que @c(x) escapa de @c(f). Por el
    contrario, cuando @c(g) regresa la variable @c(*y) se vuelve inaccesible y
    se pueden reciclar. Dado que @c(*y) no escapa de @c(g), es seguro para el
    compilador asignar @c(*y) en la pila, a pesar de que se asigno con @c(new).
    En cualquier caso, la nocion de escapar no es algo de lo que tengas que
    preocuparte para escribir codigo correcto, aunque es bueno tenerlo en cuenta
    durante la optimizacion de rendimiento, ya que cada variable que escapa
    requiere una asignacion de memoria adicional.

#     Garbage collection is a tremendous help in writing correct programs, but it
#     does not relieve you of the burden of thinking about memory. You don’t need
#     to explicitly allocate and free memory, but to write efficient programs you
#     still need to be aware of the lifetime of variables. For example, keeping
#     unnecessary pointers to short-lived objects within long-lived objects,
#     especially global variables, will prevent the garbage collector from
#     reclaiming the short-lived objects.
    La recoleccion de basura es una tremenda ayuda para escribir programas
    correctos, pero no elimina la carga de pensar en la memoria. No es necesario
    asignar y liberar memoria de forma explicita, pero para escribir programas
    eficientes es necesario tener en cuenta la duracion de las variables. Por
    ejemplo, mantener punteros innecesarios a objetos de corta duracion dentro
    de objetos de larga vida, especialmente variables globales, evitara que el
    recolector de basura recupere los objetos de corta duracion.

# ** Section 2.4 <> Assignments
** Seccion 2.4 <> Asignaciones

#    The value held by a variable is updated by an assignment statement, which in
#    its simplest form has a variable on the left of the @c(=) sign and an expression
#    on the right.
   El valor contenido en una variable es actualizado por una instruccion de
   asignacion, que en su forma mas simple tiene una variable a la izquierda del
   signo @c(=) y una expresion a la derecha.

#    ..src > go
#      x = 1                       // named variable
#      *p = true                   // indirect variable
#      person.name = "bob"         // struct field
#      count[x] = count[x] * scale // array or slice or map element
#    < src..
   ..src > go
     x = 1                       // variable con nombre
     *p = true                   // variable indirecta
     person.name = "bob"         // campo de ustructura
     count[x] = count[x] * scale // elemento de arreglo, slice o mapa
   < src..

#    Each of the arithmetic and bitwise binary operators has a corresponding
#    @e(assignment operator) allowing, for example, the last statement to be
#    rewritten as
   Cada uno de los operadores aritmeticos y operadores binarios a nivel de bits
   tiene su correspondiente @e(operador de asignacion) permitiendo, por ejemplo,
   reescribir la ultima instruccion como

#    ..src > go
#      count[x] *= scale
#    < src..
   ..src > go
     count[x] *= scale
   < src..

#    which saves us from having to repeat (and re-evaluate) the expression for the
#    variable.
   Lo que nos ahorra tener que repetir (y reevaluar) la expresion de la
   variable.

#    Numeric variables can also be incremented and decremented by @c(++) and
#    @c(--) statements:
   Las variables numericas tambien se pueden incrementar y disminuir con las
   declaraciones @c(++) y @c(--):

#    ..src > go
#      v := 1
#      v++    // same as v = v + 1; v becomes 2
#      v--    // same as v = v - 1; v becomes 1 again
#    < src..
   ..src > go
     v := 1
     v++    // igual a v = v + 1; v es 2
     v--    // igual a v = v - 1; v es 1 de nuevo
   < src..

# *** section 2.4.1 <> tuple assignment
*** seccion 2.4.1 <> Asignacion de Tuplas

#     another form of assignment, known as @e(tuple assignment), allows several
#     variables to be assigned at once. all of the right-hand side expressions are
#     evaluated before any of the variables are updated, making this form most
#     useful when some of the variables appear on both sides of the assignment, as
#     happens, for example, when swapping the values of two variables:
    Otra forma de asignacion, conocida como @e(asignacion de tuplas), permite
    asignar varias variables a la vez. Todas las expresiones del lado derecho se
    evaluan antes de actualizar cualquiera de las variables, haciendo que este
    formato sea mas util cuando algunas de las variables aparecen en ambos lados
    de la asignacion, como sucede, por ejemplo, al intercambiar los valores de
    dos variables:

#     ..src > go
#       x, y = y, x
#       a[i], a[j] = a[j], a[i]
#     < src..
    ..src > go
      x, y = y, x
      a[i], a[j] = a[j], a[i]
    < src..

#     or when computing the greatest common divisor (GCD) of two integers:
    O cuando se calcula el mayor comun divisor de dos enteros:

#     ..src > go
#       func gcd(x, y int) int {
#         for y != 0 {
#           x, y = y, x%y
#         }
#         return x
#       }
#     < src..
    ..src > go
      func gcd(x, y int) int {
        for y != 0 {
          x, y = y, x%y
        }
        return x
      }
    < src..

#     or when computing the n-th Fibonacci number iteratively:
    O al calcular el n-esimo numero de Fibonacci iterativamente:

#     ..src > go
#       func fib(n int) int {
#         x, y := 0, 1
#         for i := 0; i < n; i++ {
#           x, y = y, x+y
#         }
#         return x
#       }
#     < src..
    ..src > go
      func fib(n int) int {
        x, y := 0, 1
        for i := 0; i < n; i++ {
          x, y = y, x+y
        }
        return x
      }
    < src..

#     Tuple assignment can also make a sequence of trivial assignments more compact,
    La asignacion de tuplas tambien puede hacer una secuencia de tareas
    triviales mas compacta,

#     ..src > go
#       i, j, k = 2, 3, 5
#     < src..
    ..src > go
      i, j, k = 2, 3, 5
    < src..

#     though as a matter of style, avoid the tuple form if the expressions are
#     complex; a sequence of separate statements is easier to read.
    Aunque por una cuestion de estilo, evite la forma de tupla si las
    expresiones son complejas; una secuencia de declaraciones separadas es mas
    facil de leer.

#     Certain expressions, such as a call to a function with multiple results,
#     produce several values. When such a call is used in an assignment statement,
#     the left-hand side must have as many variables as the function has results.
    Ciertas expresiones, como una llamada a una funcion con resultados
    multiples, producen varios valores. Cuando se utiliza una llamada de este
    tipo en una instruccion de asignacion, el lado izquierdo debe tener tantas
    variables como la funcion tenga resultados.

#     ..src > go
#       f, err = os.Open("foo.txt") // function call returns two values
#     < src..
    ..src > go
      f, err = os.Open("foo.txt") // Llamada de funcion devuelve dos valores
    < src..

#     Often, functions use these additional results to indicate some kind of
#     error, either by returning an @c(error) as in the call to @c(os.Open), or a
#     @c(bool), usually called @c(ok). As we’ll see in later chapters, there are
#     three operators that sometimes behave this way too. If a map lookup
#     (@l(#Section 4.3<>§4.3)), type assertion (@l(#Section 7.10<>§7.10)), or
#     channel receive (@l(#Section 8.4.2<>§8.4.2)) appears in an assignment in
#     which two results are expected, each produces an additional boolean result:
    A menudo, las funciones utilizan estos resultados adicionales para indicar
    algun tipo de error, ya sea devolviendo un @c(error) como en la llamada a
    @c(os.Open), o un @c(bool), generalmente llamado @c(ok). Como veremos en
    capitulos posteriores, hay tres operadores que a veces se comportan de esta
    manera tambien. Si la busqueda en un mapa (@l(#Seccion 4.3<>§4.3)), un tipo
    de asercion (@l(#Seccion 7.10<>§7.10)), o la recepcion de un canal
    (@l(#Seccion 8.4.2<>§8.4.2)) aparece en una asignacion en la que se esperan
    dos resultados, cada una produce un resultado booleano adicional:

#     ..src > go
#       v, ok = m[key]         // map lookup
#       v, ok = x.(T)          // type assertion
#       v, ok = <-ch           // channel receive
#     < src..
    ..src > go
      v, ok = m[key]         // map lookup
      v, ok = x.(T)          // type assertion
      v, ok = <-ch           // channel receive
    < src..

#     As with variable declarations, we can assign unwanted values to the blank
#     identifier:
    Al igual que con la declaracion de variables, podemos asignar valores no
    deseados al identificador en blanco:

#     ..src > go
#       _, err = io.Copy(dst, src) // discard byte count
#       _, ok = x.(T)              // check type but discard result
#     < src..
    ..src > go
      _, err = io.Copy(dst, src) // discard byte count
      _, ok = x.(T)              // check type but discard result
    < src..

# *** Section 2.4.2 <> Assignability
*** Seccion 2.4.2 <> Asignacion

#     Assignment statements are an explicit form of assignment, but there are many
#     places in a program where an assignment occurs @e(implicitly): a function
#     call implicitly assigns the argument values to the corresponding parameter
#     variables; a @c(return) statement implicitly assigns the @c(return) operands
#     to the corresponding result variables; and a literal expression for a
#     composite type (@l(#Section 4.2<>§4.2)) such as this slice:
    Las sentencias de asignacion son una forma explicita de asignacion, pero hay
    muchos lugares en un programa donde se produce una asignacion @e(implicita):
    una llamada de funcion asigna implicitamente los valores de los argumentos a
    las variables de parametros correspondientes; una instruccion @c(return)
    asigna implicitamente los operandos de retorno a las variables de resultado
    correspondientes; y una expresion literal para un tipo compuesto
    (@l(#Seccion 4.2<>§4.2)), tal como esta slice:

#     ..src > go
#       medals := []string{"gold", "silver", "bronze"}
#     < src..
    ..src > go
      medallas := []string{"oro", "plata", "bronce"}
    < src..

#     implicitly assigns each element, as if it had been written like this:
    Implicitamente asigna cada elemento, como si se hubiera escrito asi:

#     ..src > go
#       medals[0] = "gold"
#       medals[1] = "silver"
#       medals[2] = "bronze"
#     < src..
    ..src > go
      medallas[0] = "oro"
      medallas[1] = "plata"
      medallas[2] = "bronce"
    < src..

#     The elements of maps and channels, though not ordinary variables, are also
#     subject to similar implicit assignments.
    Los elementos de mapas y canales, aunque no son variables ordinarias,
    tambien estan sujetos a asignaciones implicitas similares.

#     An assignment, explicit or implicit, is always legal if the left-hand side
#     (the variable) and the right-hand side (the value) have the same type. More
#     generally, the assignment is legal only if the value is @e(assignable) to
#     the type of the variable.
    Una asignacion, explicita o implicita, siempre es legal si el lado izquierdo
    (la variable) y el lado derecho (el valor) tienen el mismo tipo. En terminos
    mas generales, la asignacion es legal solo si el valor es @e(asignable) al
    tipo de la variable.

#     The rule for @e(assignability) has cases for various types, so we’ll explain
#     the relevant case as we introduce each new type. For the types we’ve
#     discussed so far, the rules are simple: the types must exactly match, and
#     @c(nil) may be assigned to any variable of interface or reference type.
#     Constants (@l(#Section 3.6<>§3.6)) have more flexible rules for
#     assignability that avoid the need for most explicit conversions.
    La regla para la @e(asignabilidad) tiene casos para varios tipos, por lo que
    vamos a explicar el caso relevante a medida que introducimos cada nuevo
    tipo. Para los tipos que hemos discutido hasta ahora, las reglas son
    simples: los tipos deben coincidir exactamente, y @c(nil) puede ser asignado
    a cualquier variable de interfaz o tipo de referencia. Las constantes
    (@l(#Seccion 3.6<>§3.6)) tienen reglas mas flexibles para la asignacion que
    evitan la necesidad de conversiones mas explicitos.

#     Whether two values may be compared with @c(==) and @c(!=) is related to
#     assignability: in any comparison, the first operand must be assignable to
#     the type of the second operand, or vice versa.  As with assignability, we’ll
#     explain the relevant cases for @e(comparability) when we present each new
#     type.
    Si dos valores pueden compararse con @c(==) y @c(!=) se relaciona con la
    asignacion: en cualquier comparacion, el primer operando debe ser asignable
    al tipo del segundo operando, o viceversa. Al igual que con la
    asignabilidad, vamos a explicar los casos relevantes para la comparabilidad
    cuando presentamos cada nuevo tipo.

# ** Section 2.5 <> Type Declarations
** Seccion 2.5 <> Declaraciones de tipo

#    The type of a variable or expression defines the characteristics of the
#    values it may take on, such as their size (number of bits or number of
#    elements, perhaps), how they are represented internally, the intrinsic
#    operations that can be performed on them, and the methods associated with
#    them.
   El tipo de una variable o expresion define las caracteristicas de los valores
   que puede tomar, como su tamaño (numero de bits o numero de elementos, tal
   vez), como se representan internamente, las operaciones intrinsecas que se
   pueden realizar en ellos, Y los metodos asociados con ellos.

#    In any program there are variables that share the same representation but
#    signify very different concepts. For instance, an @c(int) could be used to
#    represent a loop index, a timestamp, a file descriptor, or a month; a @c(float64)
#    could represent a velocity in meters per second or a temperature in one of
#    several scales; and a @c(string) could represent a password or the name of a
#    color.
   En cualquier programa hay variables que comparten la misma representacion
   pero que significan conceptos muy diferentes. Por ejemplo, un @c(int) podria
   ser usado para representar un indice de bucle, una marca de tiempo, un
   descriptor de archivo, o un mes; un @c(float64) podria representar una
   velocidad en metros por segundo o una temperatura en una de varias escalas; y
   un @c(string) podria representar una contraseña o el nombre de un color.

#    A @c(type) declaration defines a new @e(named type) that has the same
#    @e(underlying type) as an existing type. The named type provides a way to
#    separate different and perhaps incompatible uses of the underlying type so
#    that they can’t be mixed unintentionally.
   Una declaracion @c(type) define un nuevo @e(tipo con nombre) que tiene el
   mismo @e(tipo subyacente) como un tipo existente. El tipo nombrado
   proporciona una manera de separar los diferentes usos y quizas incompatibles
   del tipo subyacente para que no puedan ser mezclados involuntariamente.

#    ..src > go
#      type name underlying-type
#    < src..
   ..src > go
     type name underlying-type
   < src..

#    Type declarations most often appear at package level, where the named type is
#    visible throughout the package, and if the name is exported (it starts with
#    an upper-case letter), it’s accessible from other packages as well.
   Las declaraciones de tipo aparecen mas a menudo en el nivel de paquete, donde
   el tipo nombrado es visible en todo el paquete, y si el nombre se exporta
   (inicia con una letra mayuscula), es accesible desde otros paquetes tambien.

#    To illustrate type declarations, let’s turn the different temperature scales
#    into different types:
   Para ilustrar la declaracion de tipos, vamos a convertir las diferentes
   escalas de temperatura en tipos distintos:

#    ..figure > @l(gopl.io/ch2/tempconv0/celsius.go<>gopl.io/ch2/tempconv0)
   ..figure > @l(gopl.io/ch2/tempconv0/celsius.go<>gopl.io/ch2/tempconv0)

#      ..src > go
#        // Package tempconv performs Celsius and Fahrenheit temperature computations.
#        package tempconv
#
#        import "fmt"
#
#        type Celsius float64
#        type Fahrenheit float64
#
#        const (
#          AbsoluteZeroC Celsius = -273.15
#          FreezingC     Celsius = 0
#          BoilingC      Celsius = 100
#        )
#
#        func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }
#        func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
#      < src..
     ..src > go
       // Paquete tempconv realiza calculos de temperatura Celsius y Fahrenheit.
       package tempconv

       import "fmt"

       type Celsius float64
       type Fahrenheit float64

       const (
         AbsoluteZeroC Celsius = -273.15
         FreezingC     Celsius = 0
         BoilingC      Celsius = 100
       )

       func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }
       func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
     < src..


#    This package defines two types, @c(Celsius) and @c(Fahrenheit), for the two
#    units of temperature. Even though both have the same underlying type,
#    @c(float64), they are not the same type, so they cannot be compared or
#    combined in arithmetic expressions. Distinguishing the types makes it
#    possible to avoid errors like inadvertently combining temperatures in the two
#    different scales; an explicit type @e(conversion) like @c[Celsius(t)] or
#    @c[Fahrenheit(t)] is required to convert from a @c[float64]. @c[Celsius(t)]
#    and @c[Fahrenheit(t)] are conversions, not function calls. They don’t change
#    the value or representation in any way, but they make the change of meaning
#    explicit.  On the other hand, the functions @c(CToF) and @c(FToC) convert
#    between the two scales; they do return different values.
   Este paquete define dos tipos, @c(Celsius) y @c(Fahrenheit), para las dos
   unidades de temperatura. A pesar de que ambos tienen el mismo tipo
   subyacente, @c(float64), no son del mismo tipo, por lo que no pueden
   compararse o ser combinados en expresiones aritmeticas. Distinguir los tipos
   hace posible evitar errores como combinar inadvertidamente temperaturas en
   las dos escalas diferentes; una conversion de tipo explicita como
   @c[Celsius(t)] o @c[Fahrenheit(t)] es necesario para convertir desde un
   @c(float64). @c[Celsius(t)] y @c[Fahrenheit(t)] son conversiones, no llamadas
   a funcion. No cambian el valor o la representacion de ninguna manera, pero
   hacen que el cambio de significado sea explicito. Por otro lado, las
   funciones @c(CToF) y @c(FToC) convertir entre las dos escalas; Estas
   devuelven valores diferentes.

#    For every type @c(T), there is a corresponding conversion operation @c[T(x)]
#    that converts the value @c(x) to type @c(T). A conversion from one type to
#    another is allowed if both have the same underlying type, or if both are
#    unnamed pointer types that point to variables of the same underlying type;
#    these conversions change the type but not the representation of the value. If
#    @c(x) is assignable to @c(T), a conversion is permitted but is usually
#    redundant,
   Para cada tipo @c(T), hay una operacion de conversion correspondiente
   @c[T(x)] que convierte el valor @c(x) al tipo @c(T). Se permite una
   conversion de un tipo a otro si ambos tienen el mismo tipo subyacente, o si
   ambos son tipos apuntador sin nombre que apuntan a variables del mismo tipo
   subyacente; Estas conversiones cambian el tipo pero no la representacion del
   valor. Si @c(x) es asignable a @c(T), se permite una conversion, pero suele
   ser redundante,

#    Conversions are also allowed between numeric types, and between string and
#    some slice types, as we will see in the next chapter. These conversions may
#    change the representation of the value. For instance, converting a
#    floating-point number to an integer discards any fractional part, and
#    converting a string to a @c([]byte) slice allocates a copy of the string
#    data. In any case, a conversion never fails at run time.
   Las conversiones tambien se permiten entre tipos numericos, y entre la cadena
   y algunos tipos de slices, como veremos en el siguiente capitulo. Estas
   conversiones pueden cambiar la representacion del valor. Por ejemplo, la
   conversion de un numero de coma flotante a un entero descarta cualquier parte
   fraccionaria, y la conversion de una cadena a un slice @c([]byte) asigna una
   copia de los datos de cadena. En cualquier caso, una conversion nunca falla
   en tiempo de ejecucion.

#    The underlying type of a named type determines its structure and
#    representation, and also the set of intrinsic operations it supports, which
#    are the same as if the underlying type had been used directly. That means
#    that arithmetic operators work the same for @c(Celsius) and @c(Fahrenheit) as
#    they do for @c(float64), as you might expect.
   El tipo subyacente de un tipo con nombre determina su estructura y
   representacion, asi como el conjunto de operaciones intrinsecas que admite,
   que son iguales que si el tipo subyacente se hubiera utilizado
   directamente. Eso significa que los operadores aritmeticos funcionan igual
   para @c(Celsius) y @c(Fahrenheit) como lo hacen para @c(float64), como se
   podria esperar.

#    ..src > go
#      fmt.Printf("%g\n", BoilingC-FreezingC)       // "100" °C
#      boilingF := CToF(BoilingC)
#      fmt.Printf("%g\n", boilingF-CToF(FreezingC)) // "180" °F
#      fmt.Printf("%g\n", boilingF-FreezingC)       // compile error: type mismatch
#    < src..
   ..src > go
     fmt.Printf("%g\n", BoilingC-FreezingC)       // "100" °C
     boilingF := CToF(BoilingC)
     fmt.Printf("%g\n", boilingF-CToF(FreezingC)) // "180" °F
     fmt.Printf("%g\n", boilingF-FreezingC)       // error de compilacion: tipo incorrecto
   < src..

#    Comparison operators like @c(==) and @c(<) can also be used to compare a
#    value of a named type to another of the same type, or to a value of the
#    underlying type. But two values of different named types cannot be compared
#    directly :
   Los operadores de comparacion como @c(==) y @c(<) tambien se puede utilizar
   para comparar un valor de un tipo con nombre a otro del mismo tipo, o a un
   valor del tipo subyacente. Pero dos valores de diferentes tipos con nombre no
   pueden compararse directamente:

#    ..src > go
#      var c Celsius
#      var f Fahrenheit
#      fmt.Println(c == 0)          // "true"
#      fmt.Println(f >= 0)          // "true"
#      fmt.Println(c == f)          // compile error: type mismatch
#      fmt.Println(c == Celsius(f)) // "true"!
#    < src..
   ..src > go
     var c Celsius
     var f Fahrenheit
     fmt.Println(c == 0)          // "true"
     fmt.Println(f >= 0)          // "true"
     fmt.Println(c == f)          // error de compilacion: tipo incorrecto
     fmt.Println(c == Celsius(f)) // "true"!
   < src..

#    Note the last case carefully. In spite of its name, the type conversion
#    @c[Celsius(f)] does not change the value of its argument, just its type. The
#    test is true because @c(c) and @c(f) are both zero.
   Anote cuidadosamente el ultimo caso. A pesar de su nombre, la conversion de
   tipo @c[Celsius(f)] no cambia el valor de su argumento, a su tipo. La prueba
   es cierto porque @c(c) y @c(f) son ambos cero.

#    A named type may provide notational convenience if it helps avoid writing out
#    complex types over and over again. The advantage is small when the underlying
#    type is simple like @c(float64), but big for complicated types, as we will see
#    when we discuss structs.
   Un tipo con nombre puede proporcionar conveniencia de notacion si ayuda a
   evitar escribir tipos complejos una y otra vez. La ventaja es pequeña cuando
   el tipo subyacente es tan simple como @c(float64), pero grande para los tipos
   complicados, como veremos cuando hablemos de estructuras.

#    Named types also make it possible to define new behaviors for values of the
#    type. These behaviors are expressed as a set of functions associated with the
#    type, called the type’s @e(methods).  We’ll look at methods in detail in Chapter
#    6 but will give a taste of the mechanism here.
   Los tipos nombrados tambien permiten definir nuevos comportamientos para los
   valores del tipo. Estos comportamientos se expresan como un conjunto de
   funciones asociadas con el tipo, llamado @e(metodos) del tipo. Veremos los
   metodos en detalle en el capitulo 6, pero daremos una idea del mecanismo
   aqui.

#    The declaration below, in which the @c(Celsius) parameter @c(c) appears before the
#    function name, associates with the @c(Celsius) type a method named @c(String) that
#    returns @c(c)’s numeric value followed by @c(°C):
   La siguiente declaracion, en la que el parametro @c(Celsius) @c(c) aparece
   antes del nombre de la funcion, se asocia con el tipo @c(Celsius) un metodo
   llamado @c(String) que devuelve @c(c) como un valor numerico seguido por
   @c(°C):

#    ..src > go
#      func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
#    < src..
   ..src > go
     func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
   < src..


#    Many types declare a @c(String) method of this form because it controls how
#    values of the type appear when printed as a string by the @c(fmt) package, as
#    we will see in @l(#Section 7.1).
   Muchos tipos declarar un metodo @c(String) de esta forma debido a que controla
   como aparecen los valores del tipo cuando se imprimen en una cadena con el
   paquete @c(fmt), como veremos en la @l(#Seccion 7.1).

#    ..src > go
#      c := FToC(212.0)
#      fmt.Println(c.String()) // "100°C"
#      fmt.Printf("%v\n", c)   // "100°C"; no need to call String explicitly
#      fmt.Printf("%s\n", c)   // "100°C"
#      fmt.Println(c)          // "100°C"
#      fmt.Printf("%g\n", c)   // "100"; does not call String
#      fmt.Println(float64(c)) // "100"; does not call String
#    < src..
   ..src > go
     c := FToC(212.0)
     fmt.Println(c.String()) // "100°C"
     fmt.Printf("%v\n", c)   // "100°C"; no es necesario llamar a String explicitamente
     fmt.Printf("%s\n", c)   // "100°C"
     fmt.Println(c)          // "100°C"
     fmt.Printf("%g\n", c)   // "100"; no llama a String
     fmt.Println(float64(c)) // "100"; no llama a String
   < src..

# ** Section 2.6 <> Packages and Files
** Seccion 2.6 <> Paquetes y Ficheros

#    Packages in Go serve the same purposes as libraries or modules in other
#    languages, supporting modularity, encapsulation, separate compilation, and
#    reuse. The source code for a package resides in one or more @f(.go) files,
#    usually in a directory whose name ends with the import path; for instance,
#    the files of the @c(gopl.io/ch1/helloworld) package are stored in directory
#    @c($GOPATH/src/gopl.io/ch1/helloworld).
   Los paquetes en Go sirven a los mismos propositos que las librerias o modulos
   en otros lenguajes, soportando modularidad, encapsulacion, compilacion
   separada y reutilizacion. El codigo fuente de un paquete reside en uno o mas
   archivos @f(.go), por lo general en un directorio cuyo nombre termina con la
   ruta de importacion; por ejemplo, los archivos del paquete
   @c(gopl.io/ch1/helloworld) se almacenan en el directorio
   @c($GOPATH/src/gopl.io/ch1/helloworld).

#    Each package serves as a separate @e(name space) for its declarations. Within
#    the @e(image) package, for example, the identifier @c(Decode) refers to a
#    different function than does the same identifier in the @c(unicode/utf16)
#    package. To refer to a function from outside its package, we must @e(qualify)
#    the identifier to make explicit whether we mean @c(image.Decode) or
#    @c(utf16.Decode).
   Cada paquete sirve como un @e(espacio de nombres) separado para sus
   declaraciones. Dentro del paquete @c(image), por ejemplo, el identificador
   @c(Decode) se refiere a una funcion diferente de la que el mismo
   identificador en el paquete @c(unicode/utf16). Para hacer referencia a una
   funcion desde fuera de su paquete, debemos @e(calificar) el identificador
   para hacer explicito si nos referimos a @c(image.Decode) o @c(utf16.Decode).

#    Packages also let us hide information by controlling which names are visible
#    outside the package, or @e(exported). In Go, a simple rule governs which
#    identifiers are exported and which are not: exported identifiers start with
#    an upper-case letter.
   Los paquetes tambien nos permiten ocultar informacion controlando que nombres
   son visibles fuera del paquete, o @e(exportados). En Go, una regla simple
   regula que identificadores se exportan y cuales no: los identificadores
   exportados comienzan con una letra mayuscula.

#    To illustrate the basics, suppose that our temperature conversion software
#    has become popular and we want to make it available to the Go community as a
#    new package. How do we do that?
   Para ilustrar los fundamentos, supongamos que nuestro software de conversion
   de temperatura se ha vuelto popular y queremos ponerlo a disposicion de la
   comunidad Go como un nuevo paquete. ¿Como hacemos eso?

#    Let’s create a package called @c(gopl.io/ch2/tempconv), a variation on the
#    previous example.  (Here we’ve made an exception to our usual rule of
#    numbering examples in sequence, so that the package path can be more
#    realistic.) The package itself is stored in two files to show how
#    declarations in separate files of a package are accessed; in real life, a
#    tiny package like this would need only one file.
   Vamos a crear un paquete llamado @c(gopl.io/ch2/tempconv), una variacion del
   ejemplo anterior. (Aqui hemos hecho una excepcion a nuestra regla habitual de
   ejemplos de numeracion en secuencia, de modo que la ruta del paquete puede
   ser mas realista.) El propio paquete se almacena en dos archivos para mostrar
   como se accede a las declaraciones en archivos separados de un paquete; En la
   vida real, un pequeño paquete como este solo necesitaria un archivo.

#    We have put the declarations of the types, their constants, and their methods
#    in @f(tempconv.go):
   Hemos puesto las declaraciones de los tipos, sus constantes y sus metodos en
   @f(tempconv.go):

#    ..figure > @l(gopl.io/ch2/tempconv/tempconv.go<>gopl.io/ch2/tempconv)
   ..figure > @l(gopl.io/ch2/tempconv/tempconv.go<>gopl.io/ch2/tempconv)

#      ..src > go
#        // Package tempconv performs Celsius and Fahrenheit conversions.
#        package tempconv
#
#        import "fmt"
#
#        type Celsius float64
#        type Fahrenheit float64
#
#        const (
#        	AbsoluteZeroC Celsius = -273.15
#        	FreezingC     Celsius = 0
#        	BoilingC      Celsius = 100
#        )
#
#        func (c Celsius) String() string    { return fmt.Sprintf("%g°C", c) }
#        func (f Fahrenheit) String() string { return fmt.Sprintf("%g°F", f) }
#      < src..
     ..src > go
       // El paquete tempconv realiza conversiones Celsius y Fahrenheit.
       package tempconv

       import "fmt"

       type Celsius float64
       type Fahrenheit float64

       const (
       	AbsoluteZeroC Celsius = -273.15
       	FreezingC     Celsius = 0
       	BoilingC      Celsius = 100
       )

       func (c Celsius) String() string    { return fmt.Sprintf("%g°C", c) }
       func (f Fahrenheit) String() string { return fmt.Sprintf("%g°F", f) }
     < src..


#    and the conversion functions in @f(conv.go):
   y las funciones de conversion en @f(conv.go):

#    ..src > go
#      package tempconv
#
#      // CToF converts a Celsius temperature to Fahrenheit.
#      func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }
#
#      // FToC converts a Fahrenheit temperature to Celsius.
#      func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
#    < src..
   ..src > go
     package tempconv

     // CToF convierte una temperatura Celsius a Fahrenheit.
     func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }

     // FToC convierte una temperatura Fahrenheit a Celsius.
     func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
   < src..

#    Each file starts with a @c(package) declaration that defines the package
#    name. When the package is imported, its members are referred to as
#    @c(tempconv.CToF) and so on. Package-level names like the types and constants
#    declared in one file of a package are visible to all the other files of the
#    package, as if the source code were all in a single file. Note that
#    @f(tempconv.go) imports @c(fmt), but @f(conv.go) does not, because it does not use
#    anything from @c(fmt).
   Cada archivo comienza con una declaracion @c(package) que define el nombre
   del paquete. Cuando se importa el paquete, sus miembros se conocen como
   @c(tempconv.CToF) y asi. Los nombres a nivel de paquete como los tipos y las
   constantes declaradas en un archivo de un paquete son visibles para todos los
   otros archivos del paquete, como si el codigo fuente estuviera todo en un
   solo archivo. Observe que @f(tempconv.go) importa @c(fmt), pero @f(conv.go)
   no lo hace, ya que no utiliza nada de @c(fmt).

#    Because the package-level @c(const) names begin with upper-case letters, they too
#    are accessible with qualified names like @c(tempconv.AbsoluteZeroC):
   Debido a que los nombres @c(const) de nivel de paquete comienzan con letras
   mayusculas, tambien son accesibles con nombres calificados, por ejemplo,
   @c(tempconv.AbsoluteZeroC):

#    ..src > go
#      fmt.Printf("Brrrr! %v\n", tempconv.AbsoluteZeroC) // "Brrrr! -273.15°C"
#    < src..
   ..src > go
     fmt.Printf("Brrrr! %v\n", tempconv.AbsoluteZeroC) // "Brrrr! -273.15°C"
   < src..

#    To convert a Celsius temperature to Fahrenheit in a package that imports
#    @c(gopl.io/ch2/tempconv), we can write the following code:
   Para convertir una temperatura Celsius a Fahrenheit en un paquete que importa
   @c(gopl.io/ch2/tempconv), podemos escribir el siguiente codigo:

#    ..src > go
#      fmt.Println(tempconv.CToF(tempconv.BoilingC)) // "212°F"
#    < src..
   ..src > go
     fmt.Println(tempconv.CToF(tempconv.BoilingC)) // "212°F"
   < src..

#    The @e(doc comment) (@l(#Section 10.7.4<>§10.7.4)) immediately preceding the
#    package declaration documents the package as a whole. Conventionally, it
#    should start with a summary sentence in the style illustrated. Only one file
#    in each package should have a package doc comment. Extensive doc comments are
#    often placed in a file of their own, conventionally called @f(doc.go).
   El @c(comentario de documentacion) (@l(#Seccion 10.7.4<>§10.7.4))
   inmediatamente anterior a la declaracion del paquete, documenta el paquete en
   su conjunto. Convencionalmente, debe comenzar con una oracion de resumen en
   el estilo ilustrado. Solo un archivo en cada paquete debe tener un comentario
   de documentacion del paquete. Los comentarios de documentacion extensos, a
   menudo se colocan en su propio fichero, convencionalmente llamado @f(doc.go).

#    @b(Exercise 2.1): Add types, constants, and functions to @c(tempconv) for
#    processing temperatures in the Kelvin scale, where zero Kelvin is -273.15°C
#    and a difference of 1K has the same magnitude as 1°C.
   @b(Ejercicio 2.1): Añadir tipos, constantes y funciones a @c(tempconv) para
   el procesamiento de temperaturas en la escala Kelvin, donde cero Kelvin es
   -273,15°C y una diferencia de 1K tiene la misma magnitud de 1°C.

# *** Section 2.6.1 <> Imports
*** Seccion 2.6.1 <> Importaciones

#     Within a Go program, every package is identified by a unique string called
#     its @e(import path).  These are the strings that appear in an @c(import)
#     declaration like @c("gopl.io/ch2/tempconv"). The language specification
#     doesn’t define where these strings come from or what they mean; it’s up to
#     the tools to interpret them. When using the @$(go) tool (@l(#Chapter 10)),
#     an import path denotes a directory containing one or more Go source files
#     that together make up the package.
    Dentro de un programa Go, cada paquete se identifica por una cadena unica
    llamada la @e(ruta de importacion). Estas son las cadenas que aparecen en
    una declaracion @c(import) como @c("gopl.io/ch2/tempconv"). La
    especificacion del lenguaje no define de donde provienen estas cadenas o lo
    que significan; Depende de las herramientas para interpretarlas. Cuando se
    utiliza la herramienta @$(go) de (@l(#Capitulo 10)), una ruta de importacion
    denota un directorio que contiene uno o mas archivos de codigo fuento Go que
    juntos componen el paquete.

#     In addition to its import path, each package has a @e(package name), which
#     is the short (and not necessarily unique) name that appears in its
#     @c(package) declaration. By convention, a package’s name matches the last
#     segment of its import path, making it easy to predict that the package name
#     of @c(gopl.io/ch2/tempconv) is @c(tempconv).
    Ademas de su ruta de importacion, cada paquete tiene un nombre de paquete,
    que es corto (y no necesariamente unico) nombre que aparece en su
    declaracion @c(package). Por convencion, el nombre de un paquete coincide
    con el ultimo segmento de la ruta de importacion, por lo que es facil
    predecir que el nombre del paquete de @c(gopl.io/ch2/tempconv) es
    @c(tempconv).

#     To use @c(gopl.io/ch2/tempconv), we must import it:
    Para utilizar @c(gopl.io/ch2/tempconv), hay que importarlo:

#     ..figure > @l(gopl.io/ch2/cf/main.go<>gopl.io/ch2/cf)
    ..figure > @l(gopl.io/ch2/cf/main.go<>gopl.io/ch2/cf)

#       ..src > go
#         // Cf converts its numeric argument to Celsius and Fahrenheit.
#         package main
#
#         import (
#           "fmt"
#           "os"
#           "strconv"
#
#           "gopl.io/ch2/tempconv"
#         )
#
#         func main() {
#           for _, arg := range os.Args[1:] {
#             t, err := strconv.ParseFloat(arg, 64)
#             if err != nil {
#               fmt.Fprintf(os.Stderr, "cf: %v\n", err)
#               os.Exit(1)
#             }
#             f := tempconv.Fahrenheit(t)
#             c := tempconv.Celsius(t)
#             fmt.Printf("%s = %s, %s = %s\n",
#               f, tempconv.FToC(f), c, tempconv.CToF(c))
#           }
#         }
#       < src..
      ..src > go
        // Cf conviente su argumento numerico en Celsius y Fahrenheit.
        package main

        import (
          "fmt"
          "os"
          "strconv"

          "gopl.io/ch2/tempconv"
        )

        func main() {
          for _, arg := range os.Args[1:] {
            t, err := strconv.ParseFloat(arg, 64)
            if err != nil {
              fmt.Fprintf(os.Stderr, "cf: %v\n", err)
              os.Exit(1)
            }
            f := tempconv.Fahrenheit(t)
            c := tempconv.Celsius(t)
            fmt.Printf("%s = %s, %s = %s\n",
              f, tempconv.FToC(f), c, tempconv.CToF(c))
          }
        }
      < src..

#     The import declaration binds a short name to the imported package that may
#     be used to refer to its contents throughout the file. The @c(import) above
#     lets us refer to names within @c(gopl.io/ch2/tempconv) by using a
#     @e(qualified identifier) like @c(tempconv.CToF). By default, the short name
#     is the package name—@c(tempconv) in this case—but an import declaration may
#     specify an alternative name to avoid a conflict (@l(#Section 10.3<>§10.3)).
    La declaracion de importacion vincula un nombre corto al paquete importado
    que se puede utilizar para referirse a su contenido en todo el archivo. El
    @c(import) anterior nos permite referimos a nombres dentro de
    @c(gopl.io/ch2/tempconv) mediante el uso de un identificador calificado como
    @c(tempconv.CToF). Por defecto, el nombre corto es el nombre del paquete–en
    este caso @c(tempconv), pero una declaracion de importacion puede
    especificar un nombre alternativo para evitar un conflicto (@l(#Seccion
    10.3<>§10.3)).

#     The @$(cf) program converts a single numeric command-line argument to its value
#     in both Celsius and Fahrenheit:
    El programa @$(cf) convierte un unico argumento numerico de la linea de
    comando a su valor en grados Celsius y Fahrenheit:

#     ..src > sh
#       $ go build gopl.io/ch2/cf
#       $ ./cf 32
#       32°F = 0°C, 32°C = 89.6°F
#       $ ./cf 212
#       212°F = 100°C, 212°C = 413.6°F
#       $ ./cf -40
#       -40°F = -40°C, -40°C = -40°F
#     < src..
    ..src > sh
      $ go build gopl.io/ch2/cf
      $ ./cf 32
      32°F = 0°C, 32°C = 89.6°F
      $ ./cf 212
      212°F = 100°C, 212°C = 413.6°F
      $ ./cf -40
      -40°F = -40°C, -40°C = -40°F
    < src..

#     It is an error to import a package and then not refer to it. This check
#     helps eliminate dependencies that become unnecessary as the code evolves,
#     although it can be a nuisance during debugging, since commenting out a line
#     of code like @c[log.Print("got here!")] may remove the sole reference to the
#     package name @c(log), causing the compiler to emit an error. In this situation,
#     you need to comment out or delete the unnecessary @c(import).
    Es un error importar un paquete y luego no hacer referencia a el. Esta
    verificacion ayuda a eliminar las dependencias que se hacen innecesarias,
    cuando el codigo evoluciona, aunque puede ser una molestia durante la
    depuracion, ya que al comentar una linea de codigo como @c[log.Print("got
    here!")] puede eliminar la unica referencia al de nombre de paquete @c(log),
    probocando que el compilador emita un error. En esta situacion, es necesario
    comentar o eliminar el @c(import) innecesario.

#     Better still, use the @c(golang.org/x/tools/cmd/goimports) tool, which
#     automatically inserts and removes packages from the import declaration as
#     necessary ; most editors can be configured to run @$(goimports) each time
#     you save a file. Like the @$(gofmt) tool, it also pretty-prints Go source
#     files in the canonical format.
    Mejor aun, utilice la herramienta @c(golang.org/x/tools/cmd/goimports), que
    inserta y elimina paquetes de la declaracion de importacion, segun sea
    necesario de forma automatica; la mayoria de los editores pueden
    configurarse para ejecutar @$(goimports) cada vez que se guarda un fichero.
    Al igual que la herramienta @$(gofmt), tambien imprime bonitos ficheros de
    codigo fuene en el formato canonico.

#     @b(Exercise 2.2): Write a general-purpose unit-conversion program analogous
#     to @c(cf) that reads numbers from its command-line arguments or from the
#     standard input if there are no arguments, and converts each number into
#     units like temperature in Celsius and Fahrenheit, length in feet and meters,
#     weight in pounds and kilograms, and the like.
   @b(Ejercicio 2.2): Escribir un programa de proposito general para conversion
   de unidades analogo a @$(cf) que leea los numeros de sus argumentos de linea
   de comando o de la entrada estandar si no hay argumentos, y convierta cada
   numero en unidades como la temperatura en grados Celsius y Fahrenheit,
   longitud en Pies y metros, peso en libras y kilogramos y similares.

# *** Section 2.6.2 <> Package Initialization
*** Seccion 2.6.2 <> Inicializacion del paquete

#     Package initialization begins by initializing package-level variables in the
#     order in which they are declared, except that dependencies are resolved
#     first:
    La inicializacion del paquete comienza inicializando las variables a nivel
    de paquete en el orden en que se declaran, excepto que las dependencias se
    resuelven primero:

#     ..src > go
#       var a = b + c      // a initialized third, to 3
#       var b = f()        // b initialized second, to 2, by calling f
#       var c = 1          // c initialized first, to 1
#
#       func f() int { return c + 1 }
#     < src..
    ..src > go
      var a = b + c      // a inicializado tercero, a 3
      var b = f()        // b inicializado segundo, a 2, llamando a f
      var c = 1          // c inicializado primero, a 1

      func f() int { return c + 1 }
    < src..

#     If the package has multiple @f(.go) files, they are initialized in the order in
#     which the files are given to the compiler; the @$(go) tool sorts @f(.go) files by
#     name before invoking the compiler.
    Si el paquete tiene multiples ficheros @f(.go), se inicializan en el orden
    en que se dan los archivos al compilador; La herramienta @$(go) ordena los
    ficheros @f(.go) archivos por nombre antes de invocar el compilador.

#     Each variable declared at package level starts life with the value of its
#     initializer expression, if any, but for some variables, like tables of data,
#     an initializer expression may not be the simplest way to set its initial
#     value. In that case, the @c(init) function mechanism may be simpler. Any file
#     may contain any number of functions whose declaration is just
    Cada variable declarada en el nivel del paquete comienza su vida con el
    valor de su expresion de inicializador, pero para algunas variables, como
    tablas de datos, una expresion del inicializador no puede ser la manera mas
    simple de establecer su valor inicial. En ese caso, el mecanismo de la
    funcion @c(init) puede ser mas simple. Cualquier archivo puede contener
    cualquier numero de funciones cuya declaracion sea

#     ..src > go
#       func init() { /* ... */ }
#     < src..
    ..src > go
      func init() { /* ... */ }
    < src..

#     Such @c(init) functions can’t be called or referenced, but otherwise they
#     are normal functions.  Within each file, @c(init) functions are automatically
#     executed when the program starts, in the order in which they are declared.
    No se puede llamar o hacer referencia a estas funciones @c(init), pero por
    lo demas son funciones normales. Dentro de cada archivo, las funciones
    @c(init) se ejecutan automaticamente cuando se inicia el programa, en el
    orden en que se declaran.

#     One package is initialized at a time, in the order of imports in the
#     program, dependencies first, so a package @c(p) importing @c(q) can be sure
#     that @c(q) is fully initialized before @c(p)’s initialization begins.
#     Initialization proceeds from the bottom up; the @c(main) package is the last
#     to be initialized. In this manner, all packages are fully initialized before
#     the application’s @c(main) function begins.
    Los paquetes se inician uno a la vez, en el orden de las importaciones en el
    programa, las dependencias en primer lugar, por lo que un paquete @c(p) que
    importa a @c(q) puede estar seguro de que @c(q) se inicializa completamente
    antes de la inicialiacion de @c(p). La inicializacion procede de abajo hacia
    arriba; el paquete @c(main) es el ultimo en ser inicializado. De esta
    manera, todos los paquetes se inicializan completamente antes de que inicie
    la funcion @c(main).

#     The package below defines a function @c(PopCount) that returns the number of
#     set bits, that is, bits whose value is 1, in a @c(uint64) value, which is
#     called its @e(population count). It uses an @c(init) function to precompute
#     a table of results, @c(pc), for each possible 8-bit value so that the
#     @c(PopCount) function needn’t take 64 steps but can just return the sum of
#     eight table lookups. (This is definitely @e(not) the fastest algorithm for
#     counting bits, but it’s convenient for illustrating @c(init) functions, and
#     for showing how to precompute a table of values, which is often a useful
#     programming technique.)
    El paquete a continuacion define una funcion @c(PopCount) que devuelve el
    numero de bits establecidos, es decir, los bits cuyo valor es 1, en un valor
    @c(uint64), que se llama @e(conteo de poblacion). Utiliza una funcion
    @c(init) para calcular previamente una tabla de resultados, @c(pc), para
    cada posible valor de 8 bits de modo que la funcion @c(PopCount) no necesite
    tomar 64 pasos, pero solo puede devolver la suma de ocho consultas de
    tabla. (Esto definitivamente no es el algoritmo mas rapido para el recuento
    de bits, pero es conveniente para ilustrar las funciones @c(init), y para
    mostrar como calcular previamente una tabla de valores, que a menudo es una
    tecnica de programacion util).

#     ..figure > @l(gopl.io/ch2/popcount/main.go<>gopl.io/ch2/popcount)
    ..figure > @l(gopl.io/ch2/popcount/main.go<>gopl.io/ch2/popcount)

#       ..src > go
#         package popcount
#
#         // pc[i] is the population count of i.
#         var pc [256]byte
#
#         func init() {
#           for i := range pc {
#             pc[i] = pc[i/2] + byte(i&1)
#           }
#         }
#
#         // PopCount returns the population count (number of set bits) of x.
#         func PopCount(x uint64) int {
#           return int(pc[byte(x>>(0*8))] +
#             pc[byte(x>>(1*8))] +
#             pc[byte(x>>(2*8))] +
#             pc[byte(x>>(3*8))] +
#             pc[byte(x>>(4*8))] +
#             pc[byte(x>>(5*8))] +
#             pc[byte(x>>(6*8))] +
#             pc[byte(x>>(7*8))])
#         }
#       < src..
      ..src > go
        package popcount

        // pc[i] es el recuento de poblacion de i.
        var pc [256]byte

        func init() {
          for i := range pc {
            pc[i] = pc[i/2] + byte(i&1)
          }
        }

        // PopCount regresa el conteo de la poblacion (numero de bist establecidos) de x.
        func PopCount(x uint64) int {
          return int(pc[byte(x>>(0*8))] +
            pc[byte(x>>(1*8))] +
            pc[byte(x>>(2*8))] +
            pc[byte(x>>(3*8))] +
            pc[byte(x>>(4*8))] +
            pc[byte(x>>(5*8))] +
            pc[byte(x>>(6*8))] +
            pc[byte(x>>(7*8))])
        }
      < src..


#     Note that the range loop in @c(init) uses only the index; the value is
#     unnecessary and thus need not be included. The loop could also have been
#     written as for
    Observe que el rango del bucle en @c(init) utiliza solo el indice; El valor
    es innecesario y por lo tanto no necesita ser incluido. El bucle tambien
    podria haber sido escrito como

#     ..src > go
#       i, _ := range pc {
#     < src..
    ..src > go
      i, _ := range pc {
    < src..

#     We’ll see other uses of @c(init) functions in the next section and in
#     @l(#Section 10.5).
    Veremos otros usos de funciones @c(init) en la siguiente seccion y en la seccion
    @l(#Seccion 10.5).

#     @b(Exercise 2.3): Rewrite @c(PopCount) to use a loop instead of a single
#     expression. Compare the performance of the two versions. (@l(#Section 11.4)
#     shows how to compare the performance of different implementations
#     systematically.)
    @b(Ejercicio 2.3): Vuelve a escribir @c(PopCount) para utilizar un bucle en
    lugar de una sola expresion. Compare el rendimiento de las dos versiones. La
    (@l(#Seccion 11.4) muestra como comparar el rendimiento de diferentes
    implementaciones de forma sistematica.)

#     @b(Exercise 2.4): Write a version of @c(PopCount) that counts bits by shifting
#     its argument through 64 bit positions, testing the rightmost bit each
#     time. Compare its performance to the tablelookup version.
    @b(Ejercicio 2.4): Escribe una version de @c(PopCount) que cuenta los bits
    desplazando su argumento a traves de posiciones de 64 bits, poniendo a
    prueba el bit mas a la derecha cada vez. Compare su rendimiento con la
    version de buesqueda por la tabla.

#     @b(Exercise 2.5): The expression @c[x&(x-1)] clears the rightmost non-zero
#     bit of @c(x). Write a version of PopCount that counts bits by using this
#     fact, and assess its performance.
    @b(Ejercicio 2.5): La expresion @c&x&(x-1)] despeja el bit mas a la derecha
    no-cero de @c(x). Escribe una version de @c(PopCount) que cuente bits
    mediante este hecho, y evalua su rendimiento.

# ** Section 2.7 <> Scope
** Seccion 2.7 <> Alcance

#    A declaration associates a name with a program entity, such as a function or
#    a variable. The @e(scope) of a declaration is the part of the source code
#    where a use of the declared name refers to that declaration.
   Una declaracion asocia un nombre a una entidad de programa, como una funcion
   o una variable. El @e(alcance) de una declaracion es la parte del codigo
   fuente, donde el uso de un nombre declarado hace referencia a esa
   declaracion.

#    Don’t confuse scope with lifetime. The scope of a declaration is a region of
#    the program text; it is a compile-time property. The lifetime of a variable
#    is the range of time during execution when the variable can be referred to by
#    other parts of the program; it is a run-time property.
   No confunda el alcance con el tiempo de vida. El alcance de una declaracion
   es una region del texto del programa; Es una propiedad de tiempo de
   compilacion. La vida util de una variable es el intervalo de tiempo durante
   la ejecucion cuando la variable puede ser referida por otras partes del
   programa; Es una propiedad en tiempo de ejecucion.

#    A syntactic @e(block) is a sequence of statements enclosed in braces like
#    those that surround the body of a function or loop. A name declared inside a
#    syntactic block is not visible outside that block. The block encloses its
#    declarations and determines their scope. We can generalize this notion of
#    blocks to include other groupings of declarations that are not explicitly
#    surrounded by braces in the source code; we’ll call them all @e(lexical
#    blocks). There is a lexical block for the entire source code, called the
#    @e(universe block); for each package; for each file; for each @c(for),
#    @c(if), and @c(switch) statement; for each case in a @c(switch) or @c(select)
#    statement; and, of course, for each explicit syntactic block.
   Un @e(bloque) sintactico es una secuencia de sentencias encerradas entre
   llaves como las que rodean el cuerpo de una funcion o bucle. Un nombre
   declarado dentro de un bloque sintactico no es visible fuera de ese
   bloque. El bloque incluye sus declaraciones y determina su alcance. Podemos
   generalizar esta nocion de bloques para incluir otras agrupaciones de
   declaraciones que no estan explicitamente rodeadas por llaves en el codigo
   fuente; los llamaremos a todos @e(bloques lexicos). Hay un bloque lexico para
   todo el codigo fuente, llamado @e(bloque del universo); para cada paquete;
   para cada archivo; para cada sentencia @c(for), @c(if), y @c(switch); para
   cada caso en una sentencia @c(switch) o @c(select); Y, por supuesto, para
   cada bloque sintactico explicito.

#    A declaration’s lexical block determines its scope, which may be large or
#    small. The declarations of built-in types, functions, and constants like
#    @c(int), @c(len), and @c(true) are in the universe block and can be referred
#    to throughout the entire program. Declarations outside any function, that is,
#    at @e(package level), can be referred to from any file in the same
#    package. Imported packages, such as @c(fmt) in the @c(tempconv) example, are
#    declared at the @e(file level), so they can be referred to from the same
#    file, but not from another file in the same package without another
#    @c(import). Many declarations, like that of the variable @c(c) in the
#    @c(tempconv.CToF) function, are @e(local), so they can be referred to only
#    from within the same function or perhaps just a part of it.
   El bloque lexico de una declaracion determina su alcance, que puede ser
   grande o pequeño. Las declaracion de tipos nativos, funciones y constantes,
   por ejemplo @c(int), @c(len), y @c(true) estan en el bloque universo y pueden
   ser referidos a lo largo de todo el programa. Declaraciones fuera de
   cualquier funcion, es decir, a @e(nivel de paquete), puede ser refenciadas en
   cualquier archivo en el mismo paquete. Paquetes importados, como @c(fmt) en
   el ejemplo @c(tempconv), se declaran a @e(nivel de archivo), por lo que se
   puede hacer referencia a partir del mismo archivo, pero no desde otro archivo
   en el mismo paquete sin otro @c(import). Muchas declaraciones, como la de la
   variable @c(c) en la funcion @c(tempconv.CToF), son @e(locales), por lo que
   puden ser referidos solo desde dentro de la misma funcion o tal vez solo en
   una parte de ella.

#    The scope of a control-flow label, as used by @c(break), @c(continue), and
#    @c(goto) statements, is the entire enclosing function.
   El alcance de una etiqueta de flujo de control, tal como se utiliza por las
   sentencias @c(break), @c(continue), y @c(goto), es toda la funcion que la
   rodea.

#    A program may contain multiple declarations of the same name so long as each
#    declaration is in a different lexical block. For example, you can declare a
#    local variable with the same name as a package-level variable. Or, as shown
#    in @l(#Section 2.3.3), you can declare a function parameter called @c(new),
#    even though a function of this name is predeclared in the universe
#    block. Don’t overdo it, though; the larger the scope of the redeclaration,
#    the more likely you are to surprise the reader.
   Un programa puede contener varias declaraciones del mismo nombre, siempre y
   cuando cada declaracion este en un bloque lexico diferente. Por ejemplo,
   puede declarar una variable local con el mismo nombre que una variable a
   nivel de paquete. O, como se muestra en la @l(#Seccion 2.3.3), se puede
   declarar un parametro de funcion llamado @c(new), a pesar de tener una
   funcion con este nombre declarada con anterioridad en el bloque universo. No
   exagere, cuanto mayor sea el alcance de la redeclaracion, mas probable es que
   sorprenda al lector.

#    When the compiler encounters a reference to a name, it looks for a
#    declaration, starting with the innermost enclosing lexical block and working
#    up to the universe block. If the compiler finds no declaration, it reports an
#    @"(undeclared name) error. If a name is declared in both an outer block and
#    an inner block, the inner declaration will be found first. In that case, the
#    inner declaration is said to @e(shadow) or @e(hide) the outer one, making it
#    inaccessible:
   Cuando el compilador encuentra una referencia a un nombre, busca una
   declaracion, comenzando con el bloque lexico interno mas cercano y explorando
   hasta el bloque universo. Si el compilador no encuentra ninguna declaracion,
   se informa de un error de @"(nombre no declarado.) Si se declara un nombre
   tanto en un bloque externo como en un bloque interno, se encontrara primero
   la declaracion interna. En ese caso, se dice que la declaracion interna
   @e(obscurese) u @e(ocultar) la exterior, por lo que es inaccesible:

#    ..src > go
#      func f() {}
#      var g = "g"
#      func main() {
#        f := "f"
#        fmt.Println(f) // "f"; local var f shadows package-level func f
#        fmt.Println(g) // "g"; package-level var
#        fmt.Println(h) // compile error: undefined: h
#      }
#    < src..
   ..src > go
     func f() {}
     var g = "g"
     func main() {
       f := "f"
       fmt.Println(f) // "f"; la variable f local oculta la funcion f a nivel de paquete
       fmt.Println(g) // "g"; variable a nivel de paquete
       fmt.Println(h) // error de compilacion: sin definir: h
     }
   < src..

#    Within a function, lexical blocks may be nested to arbitrary depth, so one
#    local declaration can shadow another. Most blocks are created by control-flow
#    constructs like @c(if) statements and @c(for) loops. The program below has
#    three different variables called @c(x) because each declaration appears in a
#    different lexical block. (This example illustrates scope rules, not good
#    style!)
   Dentro de una funcion, los bloques lexicos pueden anidarse en una profundidad
   arbitraria, por lo que una declaracion local puede sombrear a otra. La
   mayoria de los bloques son creados por construcciones de flujo de control,
   como las declaraciones @c(if) y los bucles @c(for). El programa siguiente
   tiene tres variables distintas llamadas @c(x), ya que cada declaracion
   aparece en un bloque lexico diferente. (Este ejemplo ilustra las reglas de
   alcance, no es un buen estilo de programacion!)

#    ..src > go
#      func main() {
#        x := "hello!"
#        for i := 0; i < len(x); i++ {
#          x := x[i]
#          if x != '!' {
#            x := x + 'A' - 'a'
#            fmt.Printf("%c", x) // "HELLO" (one letter per iteration)
#          }
#        }
#      }
#    < src..
   ..src > go
     func main() {
       x := "hello!"
       for i := 0; i < len(x); i++ {
         x := x[i]
         if x != '!' {
           x := x + 'A' - 'a'
           fmt.Printf("%c", x) // "HELLO" (una letra por iteracion)
         }
       }
     }
   < src..

#    The expressions @c(x[i]) and @c(x + 'A' - 'a') each refer to a declaration of
#    @c(x) from an outer block; we’ll explain that in a moment. (Note that the
#    latter expression is @e(not) equivalent to @c(unicode.ToUpper).)
   Las expresiones @c(x[i]) y @c(x + 'A' - 'a') se refieren cada una a una
   declaracion de @c(x) a partir de un bloque exterior; Lo explicaremos en un
   momento. (Tenga en cuenta que esta ultima expresion @e(no) es equivalente a
   @c(unicode.ToUpper)).

#    As mentioned above, not all lexical blocks correspond to explicit
#    brace-delimited sequences of statements; some are merely implied. The @c(for)
#    loop above creates two lexical blocks: the explicit block for the loop body,
#    and an implicit block that additionally encloses the variables declared by
#    the initialization clause, such as @c(i). The scope of a variable declared in
#    the implicit block is the condition, post-statement (@c(i++)), and body of
#    the @c(for) statement.
   Como se menciono anteriormente, no todos los bloques lexicos corresponden con
   secuencias delimitadas explicitamente por llaves; Algunos simplemente son
   implicitos. El bucle @c(for) anterior crea dos bloques lexicos: el bloque
   explicito para el cuerpo del bucle, y un bloque implicito que adicionalmente
   encierra las variables declaradas por la clausula de inicializacion, como
   @c(i). El alcance de una variable declarada en el bloque implicito es la
   condicion, post-declaracion (@c(i++)), y el cuerpo del comunicado @c(for).

#    The example below also has three variables named @c(x), each declared in a
#    different block—one in the function body, one in the @c(for) statement’s block,
#    and one in the loop body—but only two of the blocks are explicit:
   El siguiente ejemplo tambien tiene tres variables denominadas @c(x), cada una
   declarada en un bloque distinto–una en el cuerpo de la funcion, una en un
   bloque de sentencia @c(for) y uno en el cuerpo del bucle–pero solo dos de los
   bloques son explicitos:

#    ..src > go
#      func main() {
#        x := "hello"
#        for _, x := range x {
#          x := x + 'A' - 'a'
#          fmt.Printf("%c", x) // "HELLO" (one letter per iteration)
#        }
#      }
#    < src..
   ..src > go
     func main() {
       x := "hello"
       for _, x := range x {
         x := x + 'A' - 'a'
         fmt.Printf("%c", x) // "HELLO" (una letra por iteracion)
       }
     }
   < src..

#    Like @c(for) loops, @c(if) statements and @c(switch) statements also create
#    implicit blocks in addition to their body blocks. The code in the following
#    @c(if)-@c(else) chain shows the scope of @c(x) and @c(y):
   Al igual que bucle @c(for), las declaraciones @c(if) y @c(switch) tambien
   crean un bloque implicito que, ademas del cuerpo de sus bloques. El codigo en
   la siguiente cadena @c(if)-@c(else) muestra el alcance de @c(x) y @c(y):

#    ..src > go
#      if x := f(); x == 0 {
#        fmt.Println(x)
#      } else if y := g(x); x == y {
#        fmt.Println(x, y)
#      } else {
#        fmt.Println(x, y)
#      }
#      fmt.Println(x, y) // compile error: x and y are not visible here
#    < src..
   ..src > go
     if x := f(); x == 0 {
       fmt.Println(x)
     } else if y := g(x); x == y {
       fmt.Println(x, y)
     } else {
       fmt.Println(x, y)
     }
     fmt.Println(x, y) // error de compilacion: x y y no son visibles aqui
   < src..

#    The second @c(if) statement is nested within the first, so variables declared
#    within the first statement’s initializer are visible within the
#    second. Similar rules apply to each case of a switch statement: there is a
#    block for the condition and a block for each case body.
   La segunda declaracion @c(if) esta anidada dentro de la primera, por lo que
   las variables declaradas dentro de la inicializacion de la primer declaracion
   son visibles dentro de la segunda. Reglas similares se aplican a cada caso de
   una sentencia @c(switch): hay un bloque para la condicion y un bloque para
   cada cuerpo de caso.

#    At the package level, the order in which declarations appear has no effect on
#    their scope, so a declaration may refer to itself or to another that follows
#    it, letting us declare recursive or mutually recursive types and
#    functions. The compiler will report an error if a constant or variable
#    declaration refers to itself, however.
   En el nivel de paquete, el orden en el que aparecen las declaraciones no
   tiene ningun efecto en su alcance, por lo que una declaracion puede referirse
   a si misma, o a otra que le sigue, permitiendonos declarar tipos y funciones
   recursivos o recursivos mutuamente. Sin embargo, el compilador reportara un
   error si una declaracion constante o variable se refiere a si misma.

#    In this program:
   En este programa:

#    ..src > go
#      if f, err := os.Open(fname); err != nil { // compile error: unused: f
#        return err
#      }
#      f.ReadByte() // compile error: undefined f
#      f.Close()    // compile error: undefined f
#    < src..
   ..src > go
     if f, err := os.Open(fname); err != nil { // error de compilacion: sin usar: f
       return err
     }
     f.ReadByte() // error de compilacion: f sin definir
     f.Close()    // error de compilacion: f sin definir
   < src..

#    the scope of @c(f) is just the @c(if) statement, so @c(f) is not accessible to the
#    statements that follow, resulting in compiler errors. Depending on the
#    compiler, you may get an additional error reporting that the local variable @c(f)
#    was never used.
   el alcance de @c(f) es solo la sentencia @c(if), por lo que @c(f) no es
   accesible a los estados que despues de enta, lo que resulta en errores de
   compilacion. Dependiendo del compilador, puede obtener un informe de errores
   adicional de que la variable local @c(f) nunca fue utilizada.

#    Thus it is often necessary to declare @c(f) before the condition so that it
#    is accessible after:
   Por lo tanto, a menudo es necesario declarar @c(f) antes de la condicion de modo
   que sea accesible mas tarde:

#    ..src > go
#      f, err := os.Open(fname)
#      if err != nil {
#        return err
#      }
#      f.ReadByte()
#      f.Close()
#    < src..
   ..src > go
     f, err := os.Open(fname)
     if err != nil {
       return err
     }
     f.ReadByte()
     f.Close()
   < src..

#    You may be tempted to avoid declaring @c(f) and @c(err) in the outer block by
#    moving the calls to @c(ReadByte) and @c(Close) inside an @c(else) block:
   Es posible que se sienta tentado a evitar declarar @c(f) y @c(err) en el
   bloque externo moviendo las llamadas a @c(ReadByte) y @c(Close) dentro del
   bloque @c(else):

#    ..src > go
#      if f, err := os.Open(fname); err != nil {
#        return err
#      } else {
#        // f and err are visible here too
#        f.ReadByte()
#        f.Close()
#      }
#    < src..
   ..src > go
     if f, err := os.Open(fname); err != nil {
       return err
     } else {
       // f and err are visible here too
       f.ReadByte()
       f.Close()
     }
   < src..

#    but normal practice in Go is to deal with the error in the @c(if) block and
#    then return, so that the successful execution path is not indented.
   pero una practica normal en Go es tratar con el error en el bloque @c(if) y
   luego regresar, de modo que la ruta de ejecucion exitosa no este indentada.

#    Short variable declarations demand an awareness of scope. Consider the
#    program below, which starts by obtaining its current working directory and
#    saving it in a package-level variable. This could be done by calling
#    @c(os.Getwd) in function @c(main), but it might be better to separate this
#    concern from the primary logic, especially if failing to get the directory is
#    a fatal error. The function @c(log.Fatalf) prints a message and calls
#    @c[os.Exit(1)].
   Las declaracion de variables compacta exige un conocimiento del
   alcance. Considere el siguiente programa, que comienza obteniendo su
   directorio de trabajo actual y guardandolo en una variable a nivel de
   paquete. Esto podria hacerse llamando a @c(os.Getwd) en la funcion @c(main),
   pero podria ser mejor separar esta preocupacion de la logica primaria, sobre
   todo si no podemos conseguir el directorio, es un error fatal. La funcion
   @c(log.Fatalf) imprime un mensaje y llama @c[os.Exit(1)].

#    ..src > go
#      var cwd string
#
#      func init() {
#        cwd, err := os.Getwd() // compile error: unused: cwd
#        if err != nil {
#          log.Fatalf("os.Getwd failed: %v", err)
#        }
#      }
#    < src..
   ..src > go
     var cwd string

     func init() {
       cwd, err := os.Getwd() // error de compilacion: sin usar: cwd
       if err != nil {
         log.Fatalf("os.Getwd failed: %v", err)
       }
     }
   < src..
  var cadena cwd

#    Since neither @c(cwd) nor @c(err) is already declared in the init function’s block,
#    the @c(:=) statement declares both of them as local variables. The inner
#    declaration of @c(cwd) makes the outer one inaccessible, so the statement does
#    not update the package-level @c(cwd) variable as intended.
  Dado que ni @c(cwd) ni @c(err) se declaran en el bloque de la funcion
  @c(init), la sentencia @c(:=) declara ambas como variables locales. La
  declaracion interna de @c(cwd) hace que la externa sea inaccesible, por lo que
  la sentencia no actualiza la variable @c(cdw) de nivel de paquete como se
  pretende.

#    Current Go compilers detect that the local @c(cwd) variable is never used and
#    report this as an error, but they are not strictly required to perform this
#    check. Furthermore, a minor change, such as the addition of a logging
#    statement that refers to the local @c(cwd) would defeat the check.
  Los compiladores de Go actuales detectan que la variable local @c(cwd) nunca
  se utilza e informar de esto como un error, pero no son estrictamente
  necesarias para llevar a cabo esta comprobacion. Por otra parte, un cambio
  menor, como la adicion de una declaracion de registro que se hace referencia a
  la @c(cwd) local, anularia la comprobacion.

#    ..src > go
#      var cwd string
#
#      func init() {
#        cwd, err := os.Getwd() // NOTE: wrong!
#        if err != nil {
#          log.Fatalf("os.Getwd failed: %v", err)
#        }
#        log.Printf("Working directory = %s", cwd)
#      }
#    < src..
   ..src > go
     var cwd string

     func init() {
       cwd, err := os.Getwd() // NOTA: incorrecto!
       if err != nil {
         log.Fatalf("os.Getwd failed: %v", err)
       }
       log.Printf("Working directory = %s", cwd)
     }
   < src..

#    The global @c(cwd) variable remains uninitialized, and the apparently normal
#    log output obfuscates the bug.
   La variable global @c(cwd) permanece sin inicializar, y la salida del
   registro aparentemente normal ofusca el fallo.

#    There are a number of ways to deal with this potential problem. The most
#    direct is to avoid @c(:=) by declaring @c(err) in a separate @c(var)
#    declaration:
   Hay un numero de maneras de lidiar con este problema potencial. La mas
   directa es evitar @c(:=) declarando @c(err) en una declaracion @c(var)
   separada:

#    ..src > go
#      var cwd string
#
#      func init() {
#        var err error
#        cwd, err = os.Getwd()
#        if err != nil {
#          log.Fatalf("os.Getwd failed: %v", err)
#        }
#      }
#    < src..
   ..src > go
     var cwd string

     func init() {
       var err error
       cwd, err = os.Getwd()
       if err != nil {
         log.Fatalf("os.Getwd failed: %v", err)
       }
     }
   < src..

#    We’ve now seen how packages, files, declarations, and statements express the
#    structure of programs. In the next two chapters, we’ll look at the structure
#    of data.
   Hemos visto como los paquetes, archivos, declaraciones y declaraciones
   expresan la estructura de los programas. En los proximos dos capitulos,
   veremos la estructura de los datos.

# * Chapter 3 <> Basic Data Types
* Capitulo 3 <> Tipos de datos basicos

#   It’s all bits at the bottom, of course, but computers operate fundamentally on
#   fixed-size numbers called @e(words), which are interpreted as integers,
#   floating-point numbers, bit sets, or memory addresses, then combined into
#   larger aggregates that represent packets, pixels, portfolios, poetry, and
#   everything else. Go offers a variety of ways to organize data, with a spectrum
#   of data types that at one end match the features of the hardware and at the
#   other end provide what programmers need to conveniently represent complicated
#   data structures.
  En el fondo todo son solo bits, por supuesto, pero las computadoras operan
  fundamentalmente en numeros de tamaño fijo llamados palabras, que se
  interpretan como numeros enteros, numeros de punto flotante, conjuntos de
  bits, o direcciones de memoria, que luego se combinana en agregados mas
  grandes que representan paquetes, pixeles, carteras, poesia y todo lo
  demas. Go ofrece una variedad de formas de organizar los datos, con un
  espectro de tipos de datos que en un extremo coinciden con las caracteristicas
  del hardware y en el otro extremo proporcionan lo que los programadores
  necesitan para representar convenientemente estructuras de datos complicadas.

#   Go’s types fall into four categories: @e(basic types), @e(aggregate types),
#   @e(reference types), and @e(interface types). Basic types, the topic of this
#   chapter, include numbers, strings, and booleans. Aggregate types—arrays
#   (@l(#Section 4.1<>§4.1)) and structs (@l(#Section 4.4<>§4.4))—form more
#   complicated data types by combining values of several simpler ones. Reference
#   types are a diverse group that includes pointers (@l(#Section 2.3.2<>§2.3.2)),
#   slices (@l(#Section 4.2<>§4.2)), maps (@l(#Section 4.3<>§4.3)), functions
#   (@l(#Chapter 5)), and channels (@l(#Chapter 8)), but what they have in common
#   is that they all refer to program variables or state @e(indirectly), so that
#   the effect of an operation applied to one reference is observed by all copies
#   of that reference. Finally, we’ll talk about interface types in @l(#Chapter
#   7).
  Los tipos de datos de Go se dividen en cuatro categorias: @e(tipos basicos),
  @e(tipos de agregados), @e(tipos de referencia), y @e(tipos de interfaz). Los
  tipos basicos, el tema de este capitulo, incluyen numeros, cadenas y
  booleanos. Los tipos agregados–arreglos (@l(#Seccion 4.1<>§4.1)) y estructuras
  (@l(#Seccion 4.4<>§4.4))–forma tipos de datos mas complejos mediante la
  combinacion de otros valores mas simples. Los tipos de referencia son un grupo
  diverso, que incluye punteros (@l(#Seccion 2.3.2<>§2.3.2)), slices
  (@l(#Seccion 4.2<>§4.2)), mapas (@l(#Seccion 4.3<>§4.3)), funciones
  (@l(#Capitulo 5)), y canales (@l(#Capitulo 8)), pero lo que tienen en comun es
  que se todos ellos se refieren a variables del programa o estados
  indirectamente, por lo que el efecto de una operacion que se aplica a una
  referencia es observado por todas las copias de esa referencia. Por ultimo,
  hablaremos de los tipos de interfaz en el @l(#Capitulo 7).

# ** Section 3.1 <> Integers
** Seccion 3.1 <> Enteros

#    Go’s numeric data types include several sizes of integers, floating-point
#    numbers, and complex numbers. Each numeric type determines the size and
#    signedness of its values. Let’s begin with integers.
   Los tipos de datos numericos de Go incluyen varios tamaños de enteros,
   numeros de coma flotante y numeros complejos. Cada tipo numerico determina el
   tamaño y la firma de sus valores. Comencemos con numeros enteros.

#    Go provides both signed and unsigned integer arithmetic. There are four
#    distinct sizes of signed integers—8, 16, 32, and 64 bits—represented by the
#    types @c(int8), @c(int16), @c(int32), and @c(int64), and corresponding
#    unsigned versions @c(uint8), @c(uint16), @c(uint32), and @c(uint64).
   Go proporciona tanto aritmetica con y sin signo. Hay cuatro tamaños distintos
   de numeros enteros–8, 16, 32 y 64 bits–representados por los tipos @c(int8),
   @c(int16), @c(int32), y @c(int64), y las correspondientes versiones sin signo
   @c(uint8), @c(uint16), @c(uint32), y @c(uint64).

#    There are also two types called just @c(int) and @c(uint) that are the
#    natural or most efficient size for signed and unsigned integers on a
#    particular platform; @c(int) is by far the most widely used numeric
#    type. Both these types have the same size, either 32 or 64 bits, but one must
#    not make assumptions about which; different compilers may make different
#    choices even on identical hardware.
   Tambien hay dos tipos llamados simplemente @c(int) y @c(uint) que son del
   tamaño natural o mas eficiente para los numeros enteros con y sin signo en
   una plataforma en particular; @c(int) es de lejos el tipo numerico mas
   utilizado. Ambos tipos tienen el mismo tamaño, 32 o 64 bits, pero uno no debe
   hacer suposiciones sobre cual es; Diferentes compiladores pueden tomar
   diferentes opciones incluso en hardware identico.

#    The type @c(rune) is an synonym for @c(int32) and conventionally indicates
#    that a value is a Unicode code point. The two names may be used
#    interchangeably. Similarly, the type @c(byte) is an synonym for @c(uint8),
#    and emphasizes that the value is a piece of raw data rather than a small
#    numeric quantity.
   El tipo @c(rune) es un sinonimo de @c(int32) y convencionalmente indica que
   un valor es un punto de codigo Unicode. Los dos nombres pueden utilizarse
   indistintamente. Del mismo modo, el tipo de @c(byte) es un sinonimo de
   @c(uint8), y hace hincapie en que el valor es una pieza de datos en bruto mas
   que una pequeña cantidad numerica.

#    Finally, there is an unsigned integer type @c(uintptr), whose width is not
#    specified but is sufficient to hold all the bits of a pointer value. The
#    @c(uintptr) type is used only for low-level programming, such as at the
#    boundary of a Go program with a C library or an operating system. We’ll see
#    examples of this when we deal with the @c(unsafe) package in @l(#Chapter 13).
   Por ultimo, existe un tipo entero sin signo @c(uintptr), cuya anchura no se
   especifica, pero es suficiente para contener todos los bits de un valor de
   puntero. El tipo @c(uintptr) solo se utiliza para la programacion a bajo
   nivel, por ejemplo, en el limite de un programa Go con una libreria C o un
   sistema operativo. Veremos ejemplos de esto cuando nos ocupemos del paquete
   @c(unsafe) en el @l(#Capitulo 13).

#    Regardless of their size, @c(int), @c(uint), and @c(uintptr) are different types
#    from their explicitly sized siblings. Thus @c(int) is not the same type as
#    @c(int32), even if the natural size of integers is 32 bits, and an explicit
#    conversion is required to use an @c(int) value where an @c(int32) is needed,
#    and vice versa.
   Independientemente de su tamaño, @c(int), @c(uint) y @c(uintptr) son
   diferentes tipos de sus hermanos de tamaño de forma explicita. Por lo tanto
   @c(int) no es el mismo tipo que @c(int32), incluso si el tamaño natural de
   enteros es de 32 bits, y requiere una conversion explicita utilizar un valor
   @c(int) donde se necesita un @c(int32), y viceversa.

#    Signed numbers are represented in 2’s-complement form, in which the
#    high-order bit is reserved for the sign of the number and the range of values
#    of an @m(n)-bit number is from -2ⁿ⁻¹ to 2ⁿ⁻¹-1. Unsigned integers use the
#    full range of bits for non-negative values and thus have the range 0 to
#    2ⁿ-1. For instance, the range of @c(int8) is -128 to 127, whereas the range
#    of @c(uint8) is 0 to 255.
   Numeros con signo se representan en forma de complemento a 2, en el que el
   bit de orden superior esta reservado para el signo del numero y la gama de
   valores de un numero de @m(n) bits es de -2ⁿ⁻¹ a 2ⁿ⁻¹-1. Los numeros enteros
   sin signo usan el rango completo de bits para valores no negativos y por lo
   tanto tienen el rango de 0 a 2ⁿ-1. Por ejemplo, la gama de @c(int8) entre
   -128 y 127, mientras que la gama de @c(uint8) es de 0 a 255.

#    Go’s binary operators for arithmetic, logic, and comparison are listed here
#    in order of decreasing precedence:
   En Go Los operadores binarios de aritmetica, logica y comparacion se enumeran
   aqui en orden decreciente de precedencia:

#    ..pre >
#      *   /   %  <<  >>  &   &^
#      +   -   |  ^
#      ==  !=  <  <=  >   >=
#      &&
#      ||
#    < pre..
   ..pre >
     *   /   %  <<  >>  &   &^
     +   -   |  ^
     ==  !=  <  <=  >   >=
     &&
     ||
   < pre..

#    There are only five levels of precedence for binary operators. Operators at
#    the same level associate to the left, so parentheses may be required for
#    clarity, or to make the operators evaluate in the intended order in an
#    expression like @c[mask & (1 << 28)].
   Solo hay cinco niveles de precedencia para los operadores binarios. Los
   operadores en el mismo nivel se asocian a la izquierda, por lo que pueden ser
   necesarios parentesis, para mayor claridad, o para hacer que los operadores
   evaluan en el orden deseado en una expresion como @c[mask & (1 << 28)].

#    Each operator in the first two lines of the table above, for instance @c(+),
#    has a corresponding @c(assignment operator) like @c(+=) that may be used to
#    abbreviate an assignment statement.
   Cada operador en las dos primeras lineas de la tabla anterior, por ejemplo
   @c(+), tiene un operador de asignacion correspondiente como @c(+=) que pueden
   utilizarse para abreviar una instruccion de asignacion.

#    The integer arithmetic operators @c(+), @c(-), @c(*), and @c(/) may be
#    applied to integer, floating-point, and complex numbers, but the remainder
#    operator @c(%) applies only to integers. The behavior of @c(%) for negative
#    numbers varies across programming languages. In Go, the sign of the remainder
#    is always the same as the sign of the dividend, so @c(-5%3) and @c(-5%-3) are
#    both @c(-2). The behavior of @c(/) depends on whether its operands are
#    integers, so @c(5.0/4.0) is @c(1.25), but @c(5/4) is @c(1) because integer
#    division truncates the result toward zero.
   Los operadores aritmetica enteros @c(+), @c(-), @c(*), y @c(/) pueden
   aplicarse a numeros enteros, de coma flotante, y numeros complejos, pero el
   operador @c(%) solo se aplica a numeros enteros. El comportamiento de @c(%)
   para los numeros negativos varia a traves de los lenguajes de
   programacion. En Go, el signo del resto es siempre el mismo que el signo del
   dividendo, por lo @c(-5%3) y @c(-5%-3) son ambos @c(-2). El comportamiento de
   @c(/) depende de si sus operandos son numeros enteros, por lo que @c(5.0/4.0)
   es @c(1.25), pero @c(5/4) es @c(1) porque la division entera trunca el
   resultado hacia cero.

#    If the result of an arithmetic operation, whether signed or unsigned, has
#    more bits than can be represented in the result type, it is said to
#    @e(overflow). The high-order bits that do not fit are silently discarded. If
#    the original number is a signed type, the result could be negative if the
#    leftmost bit is a 1, as in the @c(int8) example here:
   Si el resultado de una operacion aritmetica, ya sea con o sin signo, tiene
   mas bits de los que pueden ser representados en el tipo del resultado, se
   dice que se @e(desborda). Los bits de orden superior que no encajan se
   descartan silenciosamente. Si el numero original es un tipo con signo, el
   resultado podria ser negativo si el bit mas a la izquierda es un 1, como en
   el @c(int8) ejemplo aqui:

#    ..src > go
#      var u uint8 = 255
#      fmt.Println(u, u+1, u*u) // "255 0 1"
#
#      var i int8 = 127
#      fmt.Println(i, i+1, i*i) // "127 -128 1"
#    < src..
   ..src > go
     var u uint8 = 255
     fmt.Println(u, u+1, u*u) // "255 0 1"

     var i int8 = 127
     fmt.Println(i, i+1, i*i) // "127 -128 1"
   < src..

#    Two integers of the same type may be compared using the binary comparison
#    operators below; the type of a comparison expression is a boolean.
   Dos numeros enteros del mismo tipo pueden compararse usando los operadores de
   comparacion binarios siguientes; El tipo de una expresion de comparacion es
   un booleano.

#    | @c(==) | equal to                 |
#    |--------|--------------------------|
#    | @c(!=) | not equal to             |
#    |--------|--------------------------|
#    | @c(<)  | less than                |
#    |--------|--------------------------|
#    | @c(<=) | less than or equal to    |
#    |--------|--------------------------|
#    | @c(>)  | greater than             |
#    |--------|--------------------------|
#    | @c(>=) | greater than or equal to |
   | @c(==) | igual a             |
   |--------|---------------------|
   | @c(!=) | no igual a          |
   |--------|---------------------|
   | @c(<)  | menor que           |
   |--------|---------------------|
   | @c(<=) | Menor que o igual a |
   |--------|---------------------|
   | @c(>)  | mayor que           |
   |--------|---------------------|
   | @c(>=) | Mayor que o igual a |

#    In fact, all values of basic type—booleans, numbers, and strings—are
#    @e(comparable), meaning that two values of the same type may be compared
#    using the @c(==) and @c(!=) operators. Furthermore, integers, floating-point
#    numbers, and strings are @e(ordered) by the comparison operators. The values
#    of many other types are not comparable, and no other types are ordered. As we
#    encounter each type, we’ll present the rules governing the @e(comparability)
#    of its values.
   De hecho, todos los valores de tipo basico–booleanos, numeros y cadenas–son
   comparables, lo que significa que dos valores del mismo tipo pueden ser
   comparados con los operadores @c(==) y @c(!=). Por otra parte, los numeros
   enteros, numeros de punto flotante y cadenas son @e(ordenados) por los
   operadores de comparacion. Los valores de muchos otros tipos no son
   comparables y no se ordenan otros tipos. A medida que nos encontramos cada
   tipo, vamos a presentar las normas que rigen la comparacion de sus valores.

#    There are also unary addition and subtraction operators:
   Tambien hay operadores unarios de suma y resta:

#    | @c(+) | unary positive (no effect) |
#    |-------|----------------------------|
#    | @c(-) | unary negation             |
   | @c(+) | Unario positivo (sin efecto) |
   |-------|------------------------------|
   | @c(-) | Negacion unaria              |

#    For integers, @c(+x) is a shorthand for @c(0+x) and @c(-x) is a shorthand for
#    @c(0-x); for floating-point and complex numbers, @c(+x) is just @c(x) and
#    @c(-x) is the negation of @c(x).
   Para enteros, @c(+x) es una abreviatura de @c(0+x) y @c(-x) es una
   abreviatura de @c(0-x); para los numeros de punto flotante y complejos,
   @c(+x) es @c(x) y @c(-x) es la negacion de @c(x).

#    Go also provides the following bitwise binary operators, the first four of
#    which treat their operands as bit patterns with no concept of arithmetic
#    carry or sign:
   Go tambien proporciona los siguientes operadores binarios a nivel de bits,
   cuyos cuatro primeros tratan a sus operandos como patrones de bits sin ningun
   concepto aritmetico o signo:

#    | @c(&)  | bitwise AND         |
#    |--------|---------------------|
#    | @c(|)  | bitwise OR          |
#    |--------|---------------------|
#    | @c(^)  | bitwise XOR         |
#    |--------|---------------------|
#    | @c(&^) | bit clear (AND NOT) |
#    |--------|---------------------|
#    | @c(<<) | left shift          |
#    |--------|---------------------|
#    | @c(>>) | right shift         |
   | @c(&)  | AND bit a bit                 |
   |--------|-------------------------------|
   | @c(|)  | OR bit a bit                  |
   |--------|-------------------------------|
   | @c(^)  | XOR bit a bit                 |
   |--------|-------------------------------|
   | @c(&^) | AND NOT                       |
   |--------|-------------------------------|
   | @c(<<) | desplazamiento a la izquierdo |
   |--------|-------------------------------|
   | @c(>>) | desplazamiento a la derecha   |

#    The operator @c(^) is bitwise exclusive OR (XOR) when used as a binary
#    operator, but when used as a unary prefix operator it is bitwise negation or
#    complement; that is, it returns a value with each bit in its operand
#    inverted. The @c(&^) operator is bit clear (AND NOT): in the expression @c(z
#    = x &^ y), each bit of @c(z) is 0 if the corresponding bit of @c(y) is 1;
#    other wise it equals the corresponding bit of @c(x).
   El operador bit a bit @c(^) es un OR exclusivo (XOR) cuando se utiliza como
   un operador binario (coloca un uno en cada posicion en donde sus operandos
   tienen bits distintos, y un cero en donde son iguales), pero cuando se
   utiliza como un operador de prefijo unario es el complemento a uno; es decir,
   devuelve un valor con cada bit en su operando invertido. El operador @c(&^)
   es para lipiar bits (AND NOT): en la expresion @c(z = x &^ y), cada bit de
   @c(z) es 0 si el bit correspondiente de @c(y) es 1; de lo contrario es igual
   al bit correspondiente de @c(x).

#    The code below shows how bitwise operations can be used to interpret a
#    @c(uint8) value as a compact and efficient set of 8 independent bits. It uses
#    @c(Printf)’s @c(%b) verb to print a number’s binary digits; @c(08) modifies
#    @c(%b) (an adverb!) to pad the result with zeros to exactly 8 digits.
   El siguiente codigo muestra como se pueden utilizar las operaciones a nivel
   de bit para interpretar un valor @c(uint8) como un conjunto compacto y
   eficiente de 8 bits independientes. Se utiliza el verbo @c(%b) de @c(Printf)
   para imprimir los digitos binarios de un numero; @c(08) modifica @c(%b) (un
   adverbio!)  para rellenar el resultado con ceros a exactamente 8 digitos.

#    ..src > go
#      package main
#
#      import "fmt"
#
#      func main(){
#        var x uint8 = 1<<1 | 1<<5
#        var y uint8 = 1<<1 | 1<<2
#
#        fmt.Printf("%08b\n", x)    // "00100010", the set {1, 5}
#        fmt.Printf("%08b\n", y)    // "00000110", the set {1, 2}
#        fmt.Printf("%08b\n", x&y)  // "00000010", the intersection {1}
#        fmt.Printf("%08b\n", x|y)  // "00100110", the union {1, 2, 5}
#        fmt.Printf("%08b\n", x^y)  // "00100100", the symmetric difference {2, 5}
#        fmt.Printf("%08b\n", x&^y) // "00100000", the difference {5}
#
#        for i := uint(0); i < 8; i++ {
#          if x&(1<<i) != 0 { // membership test
#            fmt.Println(i)   // "1", "5"
#          }
#        }
#
#        fmt.Printf("%08b\n", x<<1) // "01000100", the set {2, 6}
#        fmt.Printf("%08b\n", x>>1) // "00010001", the set {0, 4}
#      }
#    < src..
   ..src > go
     package main

     import "fmt"

     func main(){
       var x uint8 = 1<<1 | 1<<5
       var y uint8 = 1<<1 | 1<<2

       fmt.Printf("%08b\n", x)    // "00100010", el conjunto {1, 5}
       fmt.Printf("%08b\n", y)    // "00000110", el conjunto {1, 2}
       fmt.Printf("%08b\n", x&y)  // "00000010", la interseccion {1}
       fmt.Printf("%08b\n", x|y)  // "00100110", la union {1, 2, 5}
       fmt.Printf("%08b\n", x^y)  // "00100100", la diferencia simetrica {2, 5}
       fmt.Printf("%08b\n", x&^y) // "00100000", la diferencia {5}

       for i := uint(0); i < 8; i++ {
         if x&(1<<i) != 0 { // prueba de pertenencia
           fmt.Println(i)   // "1", "5"
         }
       }

       fmt.Printf("%08b\n", x<<1) // "01000100", el conjunto {2, 6}
       fmt.Printf("%08b\n", x>>1) // "00010001", el conjunto {0, 4}
     }
   < src..

#    (@l(#Section 6.5) shows an implementation of integer sets that can be much
#    bigger than a byte.)
   (La @l(#Seccion 6.5) muestra una implementacion de conjuntos de numeros
   enteros que pueden ser mucho mas grande que un byte).

#    In the shift operations @c(x<<n) and @c(x>>n), the @c(n) operand determines
#    the number of bit positions to shift and must be unsigned; the @c(x) operand
#    may be unsigned or signed. Arithmetically, a left shift @c(x<<n) is
#    equivalent to multiplication by 2ⁿ and a right shift @c(x>>n) is equivalent
#    to the floor of division by 2ⁿ.
   En las operaciones de desplazamiento @c(x<<n) y @c(x>>n), el operando @c(n)
   determina el numero de posiciones de bits a cambiar y debe ser sin signo; el
   operando @c(x) puede tener o no signo. Aritmeticamente, el desplazamiento a
   la izquierda @c(x<<n) es equivalente a la multiplicacion por 2ⁿ y un
   desplazamiento a la derecha @c(x>>n) es equivalente a dividir por 2ⁿ.

#    Left shifts fill the vacated bits with zeros, as do right shifts of unsigned
#    numbers, but right shifts of signed numbers fill the vacated bits with copies
#    of the sign bit. For this reason, it is important to use unsigned arithmetic
#    when you’re treating an integer as a bit pattern.
   Los desplazamientos a la izquierda o derecha en enteros sin singno llenan los
   bits desocupados con ceros, pero los desplazamientos a la derecha de numeros
   con signo llenan los bits desocupados con copias del bit de signo. Por esta
   razon, es importante utilizar aritmetica sin signo cuando se esta tratando un
   entero como un patron de bits.

#    Although Go provides unsigned numbers and arithmetic, we tend to use the
#    signed @c(int) form even for quantities that can’t be negative, such as the
#    length of an array, though @c(uint) might seem a more obvious choice. Indeed,
#    the built-in @c(len) function returns a signed @c(int), as in this loop which
#    announces prize medals in reverse order:
   Aunque Go proporciona aritmetica y numeros sin signo, se tiende a utilizar un
   int con signo incluso para cantidades que no pueden ser negativas, tales como
   la longitud de un arreglo, aunque @c(uint) puede parecer una eleccion mas
   obvia. De hecho, la funcion nativa @c(len) devuelve un @c(int) con signo,
   como en este bucle que anuncia medallas de premio en el orden inverso:

#    ..src > go
#      medals := []string{"gold", "silver", "bronze"}
#      for i := len(medals) - 1; i >= 0; i-- {
#        fmt.Println(medals[i]) // "bronze", "silver", "gold"
#      }
#    < src..
   ..src > go
     medallas := []string{"oro", "plata", "bronce"}
     for i := len(medallas) - 1; i >= 0; i-- {
       fmt.Println(medallas[i]) // "bornce", "plata", "oro"
     }
   < src..

#    The alternative would be calamitous. If @c(len) returned an unsigned number,
#    then @c(i) too would be a @c(uint), and the condition @c(i >= 0) would always
#    be true by definition. After the third iteration, in which @c(i == 0), the
#    @c(i--) statement would cause @c(i) to become not -1, but the maximum
#    @c(uint) value (for example, 2⁶⁴-1), and the evaluation of @c(medals[i])
#    would fail at run time, or @e(panic) (@l(#Section 5.9<>§5.9)), by attempting
#    to access an element outside the bounds of the slice.
   La alternativa seria calamitosa. Si @c(len) devuelve un numero sin signo,
   entonces @c(i) tambien seria un @c(uint), y la condicion @c(i >= 0) siempre
   seria verdadera por definicion. Despues de la tercera iteracion, en la cual
   @c(i == 0), la instruccion @c(i--) no haria que @c(i) se volviera -1, en
   cambion seria el valor maximo de @c(uint) (es decir, 2⁶⁴-1), y la evaluacion
   de @c(medallas[i]) fallaria en tiempo de ejecucion, o de @e(panico)
   (@l(#Seccion 5.9<>§5.9)), al tratar de acceder a un elemento fuera de los
   limites del slice.

#    For this reason, unsigned numbers tend to be used only when their bitwise
#    operators or peculiar arithmetic operators are required, as when implementing
#    bit sets, parsing binary file formats, or for hashing and cryptography. They
#    are typically not used for merely non-negative quantities.
   Por esta razon, los numeros sin signo tienden a utilizarse solo cuando se
   requieren sus operadores bit a bit u operadores aritmeticos peculiares, como
   cuando se implementan conjuntos de bits, se analizan formatos binarios de
   archivos o se usan hash y criptografia. Normalmente no se usan para
   cantidades meramente no negativas.

#    In general, an explicit conversion is required to convert a value from one
#    type to another, and binary operators for arithmetic and logic (except
#    shifts) must have operands of the same type. Although this occasionally
#    results in longer expressions, it also eliminates a whole class of problems
#    and makes programs easier to understand.
   En general, se requiere una conversion explicita para convertir un valor de
   un tipo a otro, y los operadores binarios para aritmetica y logica (excepto
   los desplazamientos) deben tener operandos del mismo tipo. Aunque esto
   resulta ocasionalmente en expresiones mas largas, tambien elimina toda una
   clase de problemas y hace que los programas sean mas faciles de entender.

#    As an example familiar from other contexts, consider this sequence:
   Como ejemplo familiar de otros contextos, considere esta secuencia:

#    ..src > go
#      var apples int32 = 1
#      var oranges int16 = 2
#      var compote int = apples + oranges // compile error
#    < src..
   ..src > go
     var manzanas int32 = 1
     var naranjas int16 = 2
     var compota int = manzanas + naranjas // Error de compiacion
   < src..

#    Attempting to compile these three declarations produces an error message:
   Al intentar compilar estas tres declaraciones se genera un mensaje de error:

#    ..pre >
#      invalid operation: apples + oranges (mismatched types int32 and int16)
#    < pre..
   ..pre >
     invalid operation: manzanas + naranjas (mismatched types int32 and int16)
   < pre..

#    This type mismatch can be fixed in several ways, most directly by converting
#    everything to a common type:
   Este tipo de incompatibilidad se puede corregir de varias maneras, mas
   directamente convirtiendo todo a un tipo comun:

#    ..src > go
#      var compote = int(apples) + int(oranges)
#    < src..
   ..src > go
     var compota = int(manzanas) + int(naranjas)
   < src..

#    As described in @l(#Section 2.5), for every type @c(T), the conversion
#    operation @c[T(x)] converts the value @c(x) to type @c(T) if the conversion
#    is allowed. Many integer-to-integer conversions do not entail any change in
#    value; they just tell the compiler how to interpret a value. But a conversion
#    that narrows a big integer into a smaller one, or a conversion from integer
#    to floating-point or vice versa, may change the value or lose precision:
   Como se describe en la @l(#Seccion 2.5), para cada tipo @c(T), la operacion
   de conversion @c[T(x)] convierte el valor @c(x) a tipo @c(T) si se permite la
   conversion. Muchas conversiones de entero a entero no implican ningun cambio
   en el valor; Solo le dicen al compilador como interpretar un valor. Pero una
   conversion que reduce un entero grande a uno mas pequeño o una conversion de
   entero a punto flotante o viceversa, puede cambiar el valor o perder
   precision:

#    ..src > go
#      f := 3.141          // a float64
#      i := int(f)
#      fmt.Println(f, i)   // "3.141 3"
#      f = 1.99
#      fmt.Println(int(f)) // "1"
#    < src..
   ..src > go
     f := 3.141          // un float64
     i := int(f)
     fmt.Println(f, i)   // "3.141 3"
     f = 1.99
     fmt.Println(int(f)) // "1"
   < src..

#    Float to integer conversion discards any fractional part, truncating toward
#    zero. You should avoid conversions in which the operand is out of range for
#    the target type, because the behavior depends on the implementation:
   La conversion de float a entero descarta cualquier parte fraccional,
   truncando hacia cero. Debe evitar las conversiones en las que el operando
   este fuera del rango del tipo destino, ya que el comportamiento depende de la
   implementacion:

#    ..src > go
#      f := 1e100  // a float64
#      i := int(f) // result is implementation-dependent
#    < src..
   ..src > go
     f := 1e100  // un float64
     i := int(f) // el resultado depende de la implementacion
   < src..

#    Integer literals of any size and type can be written as ordinary decimal
#    numbers, or as octal numbers if they begin with @c(0), as in @c(0666), or as
#    hexadecimal if they begin with @c(0x) or @c(0X), as in @c(0xdeadbeef). Hex
#    digits may be upper or lower case. Nowadays octal numbers seem to be used for
#    exactly one purpose—file permissions on POSIX systems—but hexadecimal numbers
#    are widely used to emphasize the bit pattern of a number over its numeric
#    value.
   Los literales enteros de cualquier tamaño y tipo se pueden escribir como
   numeros decimales ordinarios, o bien con numeros octales si comienzan con
   @c(0), como en @c(0666), o como hexadecimal si comienzan con @c(0x) o @c(0X),
   como en @c(0xdeadbeef). Los digitos hexadecimales pueden ser mayusculas o
   minusculas. Hoy en dia los numeros octales parecen ser utilizados para
   exactamente un proposito–permisos de archivo en sistemas POSIX–pero los
   numeros hexadecimales se utilizan ampliamente para enfatizar el patron de
   bits de un numero sobre su valor numerico.

#    When printing numbers using the fmt package, we can control the radix and
#    format with the @c(%d), @c(%o), and @c(%x) verbs, as shown in this example:
   Al imprimir numeros usando el paquete @c(fmt), podemos controlar la base y el
   formato con los verbos @c(%d), @c(%o), y @c(%x), como se muestra en este
   ejemplo:

#    ..src > go
#      o := 0666
#      fmt.Printf("%d %[1]o %#[1]o\n", o) // "438 666 0666"
#      x := int64(0xdeadbeef)
#      fmt.Printf("%d %[1]x %#[1]x %#[1]X\n", x)
#      // Output:
#      // 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF
#    < src..
   ..src > go
     o := 0666
     fmt.Printf("%d %[1]o %#[1]o\n", o) // "438 666 0666"
     x := int64(0xdeadbeef)
     fmt.Printf("%d %[1]x %#[1]x %#[1]X\n", x)
     // Salida:
     // 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF
   < src..

#    Note the use of two @c(fmt) tricks. Usually a @c(Printf) format string
#    containing multiple @c(%) verbs would require the same number of extra
#    operands, but the @c([1]) @"(adverbs) after @c(%) tell @c(Printf) to use the
#    first operand over and over again. Second, the @c(#) adverb for @c(%o) or
#    @c(%x) or @c(%X) tells @c(Printf) to emit a @c(0) or @c(0x) or @c(0X) prefix
#    respectively.
   Observe el uso de dos trucos de @c(fmt). Por lo general, una cadena de
   formato @c(Printf) que contiene multiples verbos @c(%) requeriria el mismo
   numero de operandos adicionales, pero los @"(adverbios) @c([1]) despues de
   @c(%) le indican a @c(Printf) utilizar el primer operando una y otra vez. En
   segundo lugar, el adverbio @c(#) enr @c(%o) o @c(%x) o @c(%X) indica a
   @c(Printf) emitir un prefijo @c(0) o @c(0x) o @c(0X) respectivamente.

#    Rune literals are written as a character within single quotes. The simplest
#    example is an ASCII character like @c('a'), but it’s possible to write any
#    Unicode code point either directly or with numeric escapes, as we will see
#    shortly.
   Las literales de runa se escriben como un caracter entre comillas
   simples. El ejemplo mas simple es un caracter ASCII como @c('a'), pero es
   posible escribir cualquier punto de codigo Unicode directamente o con escapes
   numericos, como veremos en breve.

#    Runes are printed with @c(%c), or with @c(%q) if quoting is desired:
   Las runas se imprimen con @c(%c), o con @c(%q) si se desea citar:

#    ..src > go
#      ascii := 'a'
#      unicode := '𢉩'
#      newline := '\n'
#      fmt.Printf("%d %[1]c %[1]q\n", ascii)   // "97 a 'a'"
#      fmt.Printf("%d %[1]c %[1]q\n", unicode) // "22269 𢉩 '𢉩'"
#      fmt.Printf("%d %[1]q\n", newline)       // "10 '\n'"
#    < src..
   ..src > go
     ascii := 'a'
     unicode := '𢉩'
     newline := '\n'
     fmt.Printf("%d %[1]c %[1]q\n", ascii)   // "97 un 'a'"
     fmt.Printf("%d %[1]c %[1]q\n", unicode) // "22269 𢉩 '𢉩'"
     fmt.Printf("%d %[1]q\n", newline)       // "10 '\n'"
   < src..

# ** Section 3.2 <> Floating-Point Numbers
** Seccion 3.2 <> Numeros de punto flotante

#    Go provides two sizes of floating-point numbers, @c(float32) and
#    @c(float64). Their arithmetic properties are governed by the IEEE 754
#    standard implemented by all modern CPUs.
   Go ofrece dos tamaños de numeros de punto flotante, @c(float32) y
   @c(float64). Sus propiedades aritmeticas se rigen por el estandar IEEE 754
   implementado por todas las CPUs modernas.

#    Values of these numeric types range from tiny to huge. The limits of
#    floating-point values can be found in the @c(math) package. The constant
#    @c(math.MaxFloat32), the largest @c(float32), is about @c(3.4e38), and
#    @c(math.MaxFloat64) is about @c(1.8e308). The smallest positive values are
#    near @c(1.4e-45) and @c(4.9e-324), respectively.
   Los valores de estos tipos numericos varian de pequeño a enorme. Los limites
   de valores de coma flotante se pueden encontrar en el paquete @c(math). La
   constante @c(math.MaxFloat32), el mayor valor de @c(float32), es cerca de
   @c(3.4e38) y @c(math.MaxFloat64) es @c(1.8e308). Los valores positivos mas
   pequeños son @c(1.4e-45) y @c(4.9e-324), respectivamente.

#    A @c(float32) provides approximately six decimal digits of precision, whereas
#    a @c(float64) provides about 15 digits; @c(float64) should be preferred for
#    most purposes because @c(float32) computations accumulate error rapidly
#    unless one is quite careful, and the smallest positive integer that cannot be
#    exactly represented as a @c(float32) is not large:
   Un @c(float32) proporciona aproximadamente seis digitos decimales de
   precision, mientras que un @c(float64) proporciona alrededor de 15 digitos;
   @c(float64) debe ser preferido para la mayoria de los propositos porque los
   calculos sobre @c(float32) acumulan errores rapidamente a menos que sea
   bastante cuidadoso, y el numero entero positivo mas pequeño que no se puede
   representar exactamente como @c(float32) no es grande:

#    ..src > go
#      var f float32 = 16777216 // 1 << 24
#      fmt.Println(f == f+1)    // "true"!
#    < src..
   ..src > go
     var f float32 = 16777216 // 1 << 24
     fmt.Println(f == f+1)    // "true"!
   < src..

#    Floating-point numbers can be written literally using decimals, like this:
   Los numeros de punto flotante se pueden escribir literalmente usando
   decimales, asi:

#    ..src > go
#      const e = 2.71828 // (approximately)
#    < src..
   ..src > go
     const e = 2.71828 // (aproximadamente)
   < src..

#    Digits may be omitted before the decimal point (@c(.707)) or after it
#    (@c(1.)). Very small or very large numbers are better written in scientific
#    notation, with the letter @c(e) or @c(E) preceding the decimal exponent:
   Pueden omitirse los digitos antes del punto decimal (@c(.707)) o despues de
   el (@c(1.)). Es mejor escribir numeros muy pequeños o muy grandes en notacion
   cientifica, con la letra @c(e) o @c(E) precediendo el exponente decimal:

#    ..src > go
#      const Avogadro = 6.02214129e23
#      const Planck   = 6.62606957e-34
#    < src..
   ..src > go
     const Avogadro = 6.02214129e23
     const Planck   = 6.62606957e-34
   < src..

#    Floating-point values are conveniently printed with @c(Printf)’s @c(%g) verb,
#    which chooses the most compact representation that has adequate precision,
#    but for tables of data, the @c(%e) (exponent) or @c(%f) (no exponent) forms
#    may be more appropriate. All three verbs allow field width and numeric
#    precision to be controlled.
   Los Valores de coma flotante se imprimen convenientemente con el verbo @c(%g)
   de @c(Printf), que elige la representacion mas compacta con la precision
   adecuada, pero para las tablas de datos, es mas adecuado el formato @c(%e)
   (exponente) o %f (sin exponente). Los tres verbos permiten controlar el ancho
   del campo y la precision numerica.

#    ..src > go
#      for x := 0; x < 8; x++ {
#        fmt.Printf("x = %d eˣ = %8.3f\n", x, math.Exp(float64(x)))
#      }
#    < src..
   ..src > go
     for x := 0; x < 8; x++ {
       fmt.Printf("x = %d eˣ = %8.3f\n", x, math.Exp(float64(x)))
     }
   < src..

#    The code above prints the powers of @e(e) with three decimal digits of
#    precision, aligned in an eight-character field:
   El codigo anterior imprime las potencias de @e(e) con tres digitos decimales
   de precision, alineados en un campo de ocho caracteres:

#    ..pre >
#      x = 0 eˣ =    1.000
#      x = 1 eˣ =    2.718
#      x = 2 eˣ =    7.389
#      x = 3 eˣ =   20.086
#      x = 4 eˣ =   54.598
#      x = 5 eˣ =  148.413
#      x = 6 eˣ =  403.429
#      x = 7 eˣ = 1096.633
   ..pre >
     x = 0 eˣ =    1.000
     x = 1 eˣ =    2.718
     x = 2 eˣ =    7.389
     x = 3 eˣ =   20.086
     x = 4 eˣ =   54.598
     x = 5 eˣ =  148.413
     x = 6 eˣ =  403.429
     x = 7 eˣ = 1096.633

#    In addition to a large collection of the usual mathematical functions, the
#    @c(math) package has functions for creating and detecting the special values
#    defined by IEEE 754: the positive and negative infinities, which represent
#    numbers of excessive magnitude and the result of division by zero; and NaN
#    (@"(not a number)), the result of such mathematically dubious operations as
#    @c(0/0) or @c[Sqrt(-1)].
   Ademas de una gran coleccion de las funciones matematicas comunes, el paquete
   @c(math) tiene funciones para crear y detectar los valores especiales
   definidas por IEEE 754: los infinitos positivo y negativo, que representan
   los numeros de magnitud excesiva y el resultado de la division por cero; y
   NaN (@"(not a number)), el resultado de operaciones matematicamente dudosas
   como @c(0/0) o @[Sqrt(-1)].

#    ..src > go
#      var z float64
#      fmt.Println(z, -z, 1/z, -1/z, z/z) // "0 -0 +Inf -Inf NaN"
#    < src..
   ..src > go
     var z float64
     fmt.Println(z, -z, 1/z, -1/z, z/z) // "0 -0 +Inf -Inf NaN"
   < src..

#    The function @c(math.IsNaN) tests whether its argument is a not-a-number
#    value, and @c(math.NaN) returns such a value. It’s tempting to use NaN as a
#    sentinel value in a numeric computation, but testing whether a specific
#    computational result is equal to NaN is fraught with peril because any
#    comparison with NaN @e(always) yields @c(false):
   La funcion @c(math.IsNaN) prueba si su argumento es un valor no-numerico, y
   @c(math.NaN) devuelve ese valor. Es tentador utilizar NaN como un valor
   centinela en un calculo numerico, pero probar si el resultado de un calculo
   especifico es igual NaN esta lleno de peligros, ya que cualquier comparacion
   con NaN @e(siempre) produce @c(false):

#    ..src > go
#      nan := math.NaN()
#      fmt.Println(nan == nan, nan < nan, nan > nan) // "false false false"
#    < src..
   ..src > go
     nan := math.NaN()
     fmt.Println(nan == nan, nan < nan, nan > nan) // "false false false"
   < src..

#    If a function that returns a floating-point result might fail, it’s better to
#    report the failure separately, like this:
   Si una funcion que devuelve un resultado de coma flotante puede fallar, es
   mejor informar el error por separado, como aqui:

#    ..src > go
#      func compute() (value float64, ok bool) {
#        // ...
#        if failed {
#          return 0, false
#        }
#        return result, true
#      }
#    < src..
   ..src > go
     func compute() (value float64, ok bool) {
       // ...
       if failed {
         return 0, false
       }
       return result, true
     }
   < src..

#    The next program illustrates floating-point graphics computation. It plots a
#    function of two variables @c[z = f(x, y)] as a wire mesh 3-D surface, using
#    Scalable Vector Graphics (@A(SVG)), a standard @A(XML) notation for line
#    drawings. Figure 3.1 shows an example of its output for the function
#    @c[sin(r)/r], where @c(r) is @c[sqrt(x*x+y*y)].
   El siguiente programa ilustra el calculo de graficos en coma flotante. Se
   traza una funcion de dos variables @c[z = f(x, y)] como una superficie de
   malla de alambre 3-D, utilizando graficos vectoriales escalables (SVG), en
   notacion XML estandar para dibujos lineales. La Figura 3.1 muestra un ejemplo
   de salida de la funcion @c[sin(r)/r], donde @c(r) es @c[sqrt(x*x+y*y)].

#    ..figure > Figure 3.1. A surface plot of the function @c[sin(r)/r].
   ..figure > Figura 3.1. Un grafico superficial de la funcion @c[sin(r)/r].

#      ..img > img/Figure-3.1.jpg
     ..img > img/Figure-3.1.jpg


#    ..figure > @l(gopl.io/ch3/surface/main.go<>gopl.io/ch3/surface)
   ..figure > @l(gopl.io/ch3/surface/main.go<>gopl.io/ch3/surface)

#      ..src > go
#        // Surface computes an SVG rendering of a 3-D surface function.
#        package main
#
#        import (
#          "fmt"
#          "math"
#        )
#
#        const (
#          width, height = 600, 320            // canvas size in pixels
#          cells         = 100                 // number of grid cells
#          xyrange       = 30.0                // axis ranges (-xyrange..+xyrange)
#          xyscale       = width / 2 / xyrange // pixels per x or y unit
#          zscale        = height * 0.4        // pixels per z unit
#          angle         = math.Pi / 6         // angle of x, y axes (=30°)
#        )
#
#        var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)
#
#        func main() {
#          fmt.Printf("<svg xmlns='http://www.w3.org/2000/svg' "+
#            "style='stroke: grey; fill: white; stroke-width: 0.7' "+
#            "width='%d' height='%d'>", width, height)
#          for i := 0; i < cells; i++ {
#            for j := 0; j < cells; j++ {
#              ax, ay := corner(i+1, j)
#              bx, by := corner(i, j)
#              cx, cy := corner(i, j+1)
#              dx, dy := corner(i+1, j+1)
#              fmt.Printf("<polygon points='%g,%g %g,%g %g,%g %g,%g'/>\n",
#                ax, ay, bx, by, cx, cy, dx, dy)
#            }
#          }
#          fmt.Println("</svg>")
#        }
#
#        func corner(i, j int) (float64, float64) {
#          // Find point (x,y) at corner of cell (i,j).
#          x := xyrange * (float64(i)/cells - 0.5)
#          y := xyrange * (float64(j)/cells - 0.5)
#
#          // Compute surface height z.
#          z := f(x, y)
#
#          // Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).
#          sx := width/2 + (x-y)*cos30*xyscale
#          sy := height/2 + (x+y)*sin30*xyscale - z*zscale
#          return sx, sy
#        }
#
#        func f(x, y float64) float64 {
#          r := math.Hypot(x, y) // distance from (0,0)
#          return math.Sin(r) / r
#        }
#      < src..
     ..src > go
       // Surface calcula una representacion SVG de una funcion de superficie 3D
       package main

       import (
         "fmt"
         "math"
       )

       const (
         width, height = 600, 320            // tamaño de la superficie en pixeles
         cells         = 100                 // numero de celdas de la cuadricula
         xyrange       = 30.0                // ejes (-xyrange..+xyrange)
         xyscale       = width / 2 / xyrange // pixeles por unidad x o y
         zscale        = height * 0.4        // pixeles por unidad z
         angle         = math.Pi / 6         // angulo de ejes x, y (=30°)
       )

       var sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)

       func main() {
         fmt.Printf("<svg xmlns='http://www.w3.org/2000/svg' "+
           "style='stroke: grey; fill: white; stroke-width: 0.7' "+
           "width='%d' height='%d'>", width, height)
         for i := 0; i < cells; i++ {
           for j := 0; j < cells; j++ {
             ax, ay := corner(i+1, j)
             bx, by := corner(i, j)
             cx, cy := corner(i, j+1)
             dx, dy := corner(i+1, j+1)
             fmt.Printf("<polygon points='%g,%g %g,%g %g,%g %g,%g'/>\n",
               ax, ay, bx, by, cx, cy, dx, dy)
           }
         }
         fmt.Println("</svg>")
       }

       func corner(i, j int) (float64, float64) {
         // Hallar el punto (x,y) en la esquina de la celda (i,j).
         x := xyrange * (float64(i)/cells - 0.5)
         y := xyrange * (float64(j)/cells - 0.5)

         // Calcular la altura de la superficie z.
         z := f(x, y)

         // Proyeccion isometrica (x,y,z) sobre superficie SVG 2-D (sx,sy).
         sx := width/2 + (x-y)*cos30*xyscale
         sy := height/2 + (x+y)*sin30*xyscale - z*zscale
         return sx, sy
       }

       func f(x, y float64) float64 {
         r := math.Hypot(x, y) // distancia de (0,0)
         return math.Sin(r) / r
       }
     < src..


#    Notice that the function corner returns two values, the coordinates of the
#    corner of the cell.
   Observe que la esquina de funcion devuelve dos valores, las coordenadas de la
   esquina de la celda.

#    The explanation of how the program works requires only basic geometry, but
#    it’s fine to skip over it, since the point is to illustrate floating-point
#    computation. The essence of the program is mapping between three different
#    coordinate systems, shown in Figure 3.2. The first is a 2-D grid of 100&100
#    cells identified by integer coordinates @m[(i, j)], starting at @m[(0, 0)] in
#    the far back corner. We plot from the back to the front so that background
#    polygons may be obscured by foreground ones.
   La explicacion de como funciona el programa requiere solo geometria basica,
   pero esta bien pasarla por alto, ya que el punto es ilustrar la computacion
   de punto flotante. La esencia del programa es el mapeo entre tres sistemas de
   coordenadas diferentes, como se muestra en la Figura 3.2. La primera es una
   red de 2D de 100 y 100 celdas identificadas por coordenadas enteras @m[(i,
   j)], a partir de @m[(0, 0)] en la esquina mas lejanas. Trazamos desde la
   parte posterior al frente de modo que los poligonos del fondo puedan ser
   oscurecidos por los primeros.

#    The second coordinate system is a mesh of 3-D floating-point coordinates
#    @m[(x, y, z)], where @m(x) and @m(y) are linear functions of @m(i) and @m(j),
#    translated so that the origin is in the center, and scaled by the constant
#    @c(xyrange). The height @m(z) is the value of the surface function @m[ƒ(x,
#    y)].
   El segundo sistema de coordenadas es una malla de coordenadas 3-D de punto
   flotante @m[(x, y, z)], donde @m(x) e @m(y) son funciones lineales de @m(i) y
   @m(j), traducido de manera que el origen esta en el centro, y escalado por la
   constante @c(xyrange). La altura @m(z) es el valor de la funcion de
   superficie @m[ƒ(x, y)].

#    The third coordinate system is the 2-D image canvas, with @m[(0, 0)] in the
#    top left corner. Points in this plane are denoted @m[(sx, sy)]. We use an
#    isometric projection to map each 3-D point
   El tercer sistema de coordenadas es la superficie 2-D de la imagen, con
   @m[(0, 0)] en la esquina superior izquierda. Los puntos en este plano se
   denotan @m[(sx, sy)]. Utilizamos una proyeccion isometrica para correlacionar
   cada punto 3D

#    ..figure > Figure 3.2. Three different coordinate systems.
   ..figure > Figura 3.2. Tres sistemas de coordenadas diferentes.

#      ..img > img/Figure-3.2.jpg
     ..img > img/Figure-3.2.jpg


#    @m[(x, y, z)] onto the 2-D canvas. A point appears farther to the right on
#    the canvas the greater its @m(x) value or the @e(smaller) its @m(y)
#    value. And a point appears farther down the canvas the greater its @m(x)
#    value or @m(y) value, and the smaller its @m(z) value. The vertical and
#    horizontal scale factors for @m(x) and @m(y) are derived from the sine and
#    cosine of a 30° angle. The scale factor for @m(z), 0.4, is an arbitrary
#    parameter.
   @m[(x, y, z)] sobre la superficie 2-D. Un punto aparece mas a la derecha en
   la superficie cuanto mayor sera su valor @m(x) o menor sea su valor @m(y). Y
   un punto aparece mas abajo en la superficie cuanto mayor sera su valor @m(x)
   o el valor @m(y), y cuanto menor sea su valor @m(z). Los factores de escala
   horizontal o vertical para @m(x) e @m(y) se derivan del seno y coseno de un
   angulo de 30°. El factor de escala para @m(z), 0.4, es un parametro
   arbitrario.

#    For each cell in the 2-D grid, the main function computes the coordinates on
#    the image canvas of the four corners of the polygon ABCD, where B corresponds
#    to @m[(i, j)] and A, C, and D are its neighbors, then prints an SVG
#    instruction to draw it.
   Para cada celda de la cuadricula 2-D, la funcion principal calcula las
   coordenadas en la superficie de imagen de las cuatro esquinas del poligono
   ABCD, donde B corresponde a @m[(i, j)] y A, C, y D son sus vecinos, entonces
   imprime una instruccion SVG para dibujarla.

#    @b(Exercise 3.1): If the function @c(f) returns a non-finite @c(float64)
#    value, the SVG file will contain invalid @c(<polygon>) elements (although
#    many SVG renderers handle this gracefully). Modify the program to skip
#    invalid polygons.
   @b(Ejercicio 3.1): Si la funcion @c(f) devuelve un valor @c(float64)
   no-finito, el archivo SVG contendra elementos @c(<polygon>) no validos
   (aunque muchos procesadores SVG manejan esto con gracia). Modifique el
   programa para omitir poligonos no validos.

#    @b(Exercise 3.2): Experiment with visualizations of other functions from the
#    @c(math) package. Can you produce an egg box, moguls, or a saddle?
   @b(Ejercicio 3.2): Experimente con visualizaciones de otras funciones del
   paquete @c(math). ¿Puede usted producir una caja de huevos, moguls, o una
   montura?

#    @b(Exercise 3.3): Color each polygon based on its height, so that the peaks
#    are colored red (@c(#ff0000)) and the valleys blue (@c(#0000ff)).
   @b(Ejercicio 3.3): El color de cada poligono en funcion de su altura, por lo
   que los picos son de color rojo (@c(#ff0000)) y los valles azul
   (@c(#0000ff)).

#    @b(Exercise 3.4): Following the approach of the Lissajous example in
#    @l(#Section 1.7), construct a web server that computes surfaces and writes
#    SVG data to the client. The server must set the @c(Content-Type) header like
#    this:
   @b(Ejercicio 3.4): Siguiendo el enfoque del ejemplo Lissajous en la
   @l(#Seccion 1.7), construya un servidor web que calcule superficies y escriba
   los datos SVG al cliente. El servidor debe establecer el manejador
   @c(Content-Type) asi:

#    ..src > go
#      w.Header().Set("Content-Type", "image/svg+xml")
#    < src..
   ..src > go
     w.Header().Set("Content-Type", "image/svg+xml")
   < src..

#    (This step was not required in the Lissajous example because the server uses
#    standard heuristics to recognize common formats like PNG from the first 512
#    bytes of the response and generates the proper header.) Allow the client to
#    specify values like height, width, and color as HTTP request parameters.
   (Este paso no era necesario en el ejemplo de Lissajous porque el servidor
   utiliza la heuristica estandar para reconocer formatos comunes como PNG de
   los primeros 512 bytes de la respuesta y generar el encabezado
   adecuado). Permitir al cliente especificar valores como altura, ancho y color
   como parametros de peticion HTTP.

# ** Section 3.3 <> Complex Numbers
** Seccion 3.3 <> Numeros complejos

#    Go provides two sizes of complex numbers, @c(complex64) and @c(complex128),
#    whose components are @c(float32) and @c(float64) respectively. The built-in
#    function @c(complex) creates a complex number from its real and imaginary
#    components, and the built-in @c(real) and @c(imag) functions extract those
#    components:
   Go proporciona dos tamaños de numeros complejos, @c(complex64) y
   @c(complex128), cuyos componentes son @c(float32) y @c(float64)
   respectivamente. La funcion nativa @c(complex) crea un numero complejo a
   partir de sus componentes real e imaginario, e incorpora funciones @c(real) y
   @c(imag) para extraer estos componentes:

#    ..src > go
#      var x complex128 = complex(1, 2) // 1+2i
#      var y complex128 = complex(3, 4) // 3+4i
#      fmt.Println(x*y)                 // "(-5+10i)"
#      fmt.Println(real(x*y))           // "-5"
#      fmt.Println(imag(x*y))           // "10"
#    < src..
   ..src > go
     var x complex128 = complex(1, 2) // 1+2i
     var y complex128 = complex(3, 4) // 3+4i
     fmt.Println(x*y)                 // "(-5+10i)"
     fmt.Println(real(x*y))           // "-5"
     fmt.Println(imag(x*y))           // "10"
   < src..

#    If a floating-point literal or decimal integer literal is immediately
#    followed by @c(i), such as @c(3.141592i) or @c(2i), it becomes an
#    @e(imaginary literal), denoting a complex number with a zero real
#    component:
   Si un punto flotante literal entero o decimal literal es seguido
   inmediatamente por @c(i), como @c(3.141592i) o @c(2i), se convierte en un
   literal imaginario, que denota un numero complejo con un componente real
   cero:

#    ..src > go
#      fmt.Println(1i * 1i) // "(-1+0i)", i² = -1
#    < src..
   ..src > go
     fmt.Println(1i * 1i) // "(-1+0i)", i² = -1
   < src..

#    Under the rules for constant arithmetic, complex constants can be added to
#    other constants (integer or floating point, real or imaginary), allowing us
#    to write complex numbers naturally, like @c(1+2i), or equivalently,
#    @c(2i+1). The declarations of @c(x) and @c(y) above can be simplified:
   Bajo las reglas de la aritmetica constante, constantes complejas se pueden
   añadir a otras constantes (enteras o de coma flotante, real o imaginarias),
   lo que nos permite escribir numeros complejos de forma natural, como
   @c(1+2i), o equivalentemente, @c(2i+1) . Las anteriores declaraciones @c(x) y
   @c(y) se pueden simplificar:

#    ..src > go
#      x := 1 + 2i
#      y := 3 + 4i
#    < src..
   ..src > go
     x := 1 + 2i
     y := 3 + 4i
   < src..

#    Complex numbers may be compared for equality with @c(==) and @c(!=). Two
#    complex numbers are equal if their real parts are equal and their imaginary
#    parts are equal.
   Los numeros complejos se pueden comparar por igualdad con @c(==) y
   @c(!=). Dos numeros complejos son iguales si sus partes reales son iguales y
   sus partes imaginarias son iguales.

#    The @c(math/cmplx) package provides library functions for working with
#    complex numbers, such as the complex square root and exponentiation
#    functions.
   El paquete @c(math/cmplx) proporciona funciones de libreria para trabajar con
   numeros complejos, tales como las raiz cuadrada compleja y las funciones de
   exponenciacion.

#    ..src > go
#      fmt.Println(cmplx.Sqrt(-1)) // "(0+1i)"
#    < src..
   ..src > go
     fmt.Println(cmplx.Sqrt(-1)) // "(0+1i)"
   < src..

#    The following program uses @c(complex128) arithmetic to generate a Mandelbrot
#    set.
   El siguiente programa utiliza aritmetica @c(complex128) para generar un
   conjunto de Mandelbrot.

#    ..figure > @l(gopl.io/ch3/mandelbrot/main.go<>gopl.io/ch3/mandelbrot)
   ..figure > @l(gopl.io/ch3/mandelbrot/main.go<>gopl.io/ch3/mandelbrot)

#      ..src > go
#        // Mandelbrot emits a PNG image of the Mandelbrot fractal.
#        package main
#
#        import (
#          "image"
#          "image/color"
#          "image/png"
#          "math/cmplx"
#          "os"
#        )
#
#        func main() {
#          const (
#            xmin, ymin, xmax, ymax = -2, -2, +2, +2
#            width, height          = 1024, 1024
#          )
#
#          img := image.NewRGBA(image.Rect(0, 0, width, height))
#          for py := 0; py < height; py++ {
#            y := float64(py)/height*(ymax-ymin) + ymin
#            for px := 0; px < width; px++ {
#              x := float64(px)/width*(xmax-xmin) + xmin
#              z := complex(x, y)
#              // Image point (px, py) represents complex value z.
#              img.Set(px, py, mandelbrot(z))
#            }
#          }
#          png.Encode(os.Stdout, img) // NOTE: ignoring errors
#        }
#
#        func mandelbrot(z complex128) color.Color {
#          const iterations = 200
#          const contrast = 15
#
#          var v complex128
#          for n := uint8(0); n < iterations; n++ {
#            v = v*v + z
#            if cmplx.Abs(v) > 2 {
#              return color.Gray{255 - contrast*n}
#            }
#          }
#          return color.Black
#        }
#      < src..
     ..src > go
       // Mandelbrot emite una imagen PNG del fractal de Mandelbrot.
       package main

       import (
         "image"
         "image/color"
         "image/png"
         "math/cmplx"
         "os"
       )

       func main() {
         const (
           xmin, ymin, xmax, ymax = -2, -2, +2, +2
           width, height          = 1024, 1024
         )

         img := image.NewRGBA(image.Rect(0, 0, width, height))
         for py := 0; py < height; py++ {
           y := float64(py)/height*(ymax-ymin) + ymin
           for px := 0; px < width; px++ {
             x := float64(px)/width*(xmax-xmin) + xmin
             z := complex(x, y)
             // El punto de imagen (px, py) representa el valor complejo z.
             img.Set(px, py, mandelbrot(z))
           }
         }
         png.Encode(os.Stdout, img) // NOTA: ignorando errores
       }

       func mandelbrot(z complex128) color.Color {
         const iterations = 200
         const contrast = 15

         var v complex128
         for n := uint8(0); n < iterations; n++ {
           v = v*v + z
           if cmplx.Abs(v) > 2 {
             return color.Gray{255 - contrast*n}
           }
         }
         return color.Black
       }
     < src..


#    The two nested loops iterate over each point in a 1024x1024 grayscale raster
#    image representing the -2 to +2 portion of the complex plane. The program
#    tests whether repeatedly squaring and adding the number that point represents
#    eventually @"(escapes) the circle of radius 2. If so, the point is shaded by
#    the number of iterations it took to escape. If not, the value belongs to the
#    Mandelbrot set, and the point remains black. Finally, the program writes to
#    its standard output the PNG-encoded image of the iconic fractal, shown in
#    Figure 3.3.
   Los dos bucles anidados iteran sobre cada punto en una imagen en cuadricula
   de escala de grises de 1024x1024 que representa la porcion de -2 a +2 del
   plano complejo. El programa prueba si repetidamente cuadrando y añadiendo el
   numero del punto representado eventualmente @"(escapa) el circulo de
   radio 2. Si es asi, el punto es sombreado por el numero de iteraciones que se
   tardo en escapar. Si no, el valor pertenece al conjunto de Mandelbrot, y el
   punto permanece negro. Finalmente, el programa escribe en su salida estandar
   la imagen codificada en PNG del iconico fractal, que se muestra en la Figura
   3.3.

#    ..figure > Figure 3.3. The Mandelbrot set.
   ..figure > Figura 3.3. El conjunto de Mandelbrot.

#      ..img > img/Figure-3.3.jpg
     ..img > img/Figure-3.3.jpg


#    @b(Exercise 3.5): Implement a full-color Mandelbrot set using the function
#    @c(image.NewRGBA) and the type @c(color.RGBA) or @c(color.YCbCr).
   @b(Ejercicio 3.5): Implementar a todo color el cojunto de Mandelbrot usando
   la funcion @c(image.NewRGBA) y el tipo @c(color.RGBA) o @c(color.YCbCr).

#    @b(Exercise 3.6): Supersampling is a technique to reduce the effect of
#    pixelation by computing the color value at several points within each pixel
#    and taking the average. The simplest method is to divide each pixel into four
#    @"(subpixels.) Implement it.
   @b(Ejercicio 3.6): Supermuestreo es una tecnica para reducir el efecto de
   pixelacion calculando el valor del color en varios puntos dentro de cada
   pixel y tomando el promedio. El metodo mas simple consiste en dividir cada
   pixel en cuatro @"(subpixeles.) Implementalo.

#    @b(Exercise 3.7): Another simple fractal uses Newton’s method to find complex
#    solutions to a function such as @m(z⁴-1 = 0). Shade each starting point by
#    the number of iterations required to get close to one of the four
#    roots. Color each point by the root it approaches.
   @b(Ejercicio 3.7): Otro fractal sencillo utiliza el metodo Newton para
   encontrar soluciones complejas a una funcion como @m(z⁴-1 = 0). Sombrea cada
   punto de partida por el numero de iteraciones necesarias para acercarse a una
   de las cuatro raices. Colorea cada punto por la raiz que se aproxima.

#    @b(Exercise 3.8): Rendering fractals at high zoom levels demands great
#    arithmetic precision. Implement the same fractal using four different
#    representations of numbers: @c(complex64), @c(complex128), @c(big.Float), and
#    @c(big.Rat). (The latter two types are found in the @c(math/big) package.
#    @c(Float) uses arbitrary but bounded-precision floating-point; @c(Rat) uses
#    unbounded-precision rational numbers.) How do they compare in performance and
#    memory usage? At what zoom levels do rendering artifacts become visible?
   @b(Ejercicio 3.8): La Representacion de fractales con altos niveles de zoom
   exige una gran precision aritmetica. Implementa el mismo fractal utilizando
   cuatro representaciones diferentes de numeros: @c(complex64), @c(complex128),
   @c(big.Float), y @c(big.Rat). (Los ultimos dos tipos se encuentran en el
   paquete @c(math/big). @c(Float) utiliza arbitraria, pero delimitada precision
   de punto flotante; @c(Rat) utiliza numeros racionales sin limites de
   precision.)  ¿Como se comparan en el rendimiento y uso de memoria? ¿A que
   niveles de zoom se hacen visibles los artefactos de renderizacion?

#    @b(Exercise 3.9): Write a web server that renders fractals and writes the
#    image data to the client.  Allow the client to specify the @m(x), @m(y), and
#    zoom values as parameters to the HTTP request.
   @b(Ejercicio 3.9): Escriba un servidor web que procese fractales y escribe
   los datos de imagen al cliente. Permita que el cliente especifique las
   coordenadas @c(x), @c(y), y los valores de zoom como parametros en la
   peticion HTTP.

# ** Section 3.4 <> Booleans
** Seccion 3.4 <> Booleanos

#    A value of type @c(bool), or @e(boolean), has only two possible values,
#    @c(true) and @c(false). The conditions in @c(if) and @c(for) statements are
#    booleans, and comparison operators like @c(==) and @c(<) produce a boolean
#    result. The unary operator @c(!) is logical negation, so @c(!true) is
#    @c(false), or, one might say, @c[(!true==false)==true], although as a matter
#    of style, we always simplify redundant boolean expressions like @c(x==true)
#    to @c(x).
   Un valor de tipo @c(bool), o @e(booleano), tiene solo dos valores posibles,
   @c(true) y @c(false). Las condiciones en @c(if) y @c(for) son declaraciones
   booleanas, y los operadores de comparacion como @c(==) y @c(<) producen un
   resultado booleano. El operador unario @c(!) es la negacion logica, de modo
   que @c(!true) es @c(false), o, por decirlo asi, @c[(!true==false)==true],
   aunque por cuestion de estilo, siempre simplificamos las expresiones
   booleanas redundantes como @c(x==true) a @c(x).

#    Boolean values can be combined with the @c(&&) (AND) and @c(||) (OR)
#    operators, which have @e(shortcircuit) behavior: if the answer is already
#    determined by the value of the left operand, the right operand is not
#    evaluated, making it safe to write expressions like this:
   Los valores booleanos pueden ser combinados con los operadores @c(&&) (AND) y
   @c(||) (OR), que tienen un comportamiento de @e(cortocircuito): si la
   respuesta ya esta determinada por el valor del operando de la izquierda, el
   operando de la derecha no se evalua, por lo que es seguro para escribir
   expresiones como esta:

#    ..src > go
#      s != "" && s[0] == 'x'
#    < src..
   ..src > go
     s != "" && s[0] == 'x'
   < src..

#    where @c(s[0]) would panic if applied to an empty string.
   donde @c(s[0]) produciria un panico si se aplica a una cadena vacia.

#    Since @c(&&) has higher precedence than @c(||) (mnemonic: @c(&&) is boolean
#    multiplication, @c(||) is boolean addition), no parentheses are required for
#    conditions of this form:
   Ya que @c(&&) tiene mayor precedencia que @c(||) (mnemonico: @c(&&) es la
   multiplicacion booleana, @c(||) es la adicion boolean), no se requieren
   parentesis para las condiciones de esta forma:

#    ..src > go
#      if 'a' <= c && c <= 'z' ||
#        'A' <= c && c <= 'Z' ||
#        '0' <= c && c <= '9' {
#        // ...ASCII letter or digit...
#      }
#    < src..
   ..src > go
     if 'a' <= c && c <= 'z' ||
       'A' <= c && c <= 'Z' ||
       '0' <= c && c <= '9' {
       // ...letra o digito ASCII...
     }
   < src..

#    There is no implicit conversion from a boolean value to a numeric value like
#    0 or 1, or vice versa. It’s necessary to use an explicit @c(if), as in
   No hay una conversion implicita de un valor booleano a un valor numerico como
   0 o 1, o viceversa. Es necesario utilizar un @c(if) explicito, como en

#    ..src > go
#      i := 0
#      if b {
#        i = 1
#      }
#    < src..
   ..src > go
     i := 0
     if b {
       i = 1
     }
   < src..

#    It might be worth writing a conversion function if this operation were needed often:
   Podria valer la pena escribir una funcion de conversion si esta operacion se
   necesita a menudo:

#    ..src > go
#      // btoi returns 1 if b is true and 0 if false.
#      func btoi(b bool) int {
#        if b {
#          return 1
#        }
#        return 0
#      }
#    < src..
   ..src > go
     // btoi regresa 1 si b es verdadero y 0 sy es falso.
     func btoi(b bool) int {
       if b {
         return 1
       }
       return 0
     }
   < src..

#    The inverse operation is so simple that it doesn’t warrant a function, but
#    for symmetry here it is:
   La operacion inversa es tan simple que no necesita una funcion, pero por
   simetria aqui esta:

#    ..src > go
#      // itob reports whether i is non-zero.
#      func itob(i int) bool { return i != 0 }
#    < src..
   ..src > go
     // itob reporta cuando i no es cero.
     func itob(i int) bool { return i != 0 }
   < src..

# ** Section 3.5 <> Strings
** Seccion 3.5 <> Cadenas

#    A string is an immutable sequence of bytes. Strings may contain arbitrary
#    data, including bytes with value 0, but usually they contain human-readable
#    text. Text strings are conventionally interpreted as UTF-8-encoded sequences
#    of Unicode code points (runes), which we’ll explore in detail very soon.
   Una cadena es una secuencia inmutable de bytes. Las cadenas pueden contener
   datos arbitrarios, incluyendo bytes con valor 0, pero normalmente contienen
   texto legible por humanos. Las cadenas de texto se interpretan de forma
   convencional como secuencias codificadas en UTF-8 de puntos de codigo Unicode
   (runas), que exploraremos en detalle muy pronto.

#    The built-in @c(len) function returns the number of bytes (not runes) in a
#    string, and the @e(index) operation @c(s[i]) retrieves the @m(i)-th byte of
#    string @c(s), where @c(0) ≤ @c(i) < @c[len(s)].
   La funcion nativa @c(len) devuelve el numero de bytes (no runas) en una
   cadena, y la operacion de indice @c(s[i]) recupera el @m(n)-esimo byte de la
   cadena @c(s), donde @c(0) ≤ @c(i) < @c[len(s)].

#    ..src > go
#      s := "hello, world"
#      fmt.Println(len(s))     // "12"
#      fmt.Println(s[0], s[7]) // "104 119"  ('h' and 'w')
#    < src..
   ..src > go
     s := "hello, world"
     fmt.Println(len(s))     // "12"
     fmt.Println(s[0], s[7]) // "104 119"  ('h' and 'w')
   < src..

#    Attempting to access a byte outside this range results in a panic:
   Intentar acceder a un byte fuera de este rango produce un panico:

#    ..src > go
#      c := s[len(s)] // panic: index out of range
#    < src..
   ..src > go
     c := s[len(s)] // panico: indice fuera de rango
   < src..

#    The @m(i)-th byte of a string is not necessarily the @m(i)-th @e(character)
#    of a string, because the UTF-8 encoding of a non-ASCII code point requires
#    two or more bytes. Working with characters is discussed shortly.
   El @m(n)-esimo byte de una cadena no es necesariamente el @m(n)-esimo
   caracter de una cadena, porque la codificacion UTF-8 de un punto de codigo no
   ASCII requiere dos o mas bytes. Como Trabajar con caracteres se discutira en
   breve.

#    The @e(substring) operation @c(s[i:j]) yields a new string consisting of the
#    bytes of the original string starting at index @c(i) and continuing up to,
#    but not including, the byte at index @c(j). The result contains @c(j-i)
#    bytes.
   La operacion de subcadena @c(s[i:j]) produce una nueva cadena que consta de
   los bytes de la cadena original a partir del indice @c(i) y continua hasta,
   pero no incluyendo, el byte en el indice @c(j). El resultado contiene @c(j-i)
   bytes.

#    ..src > go
#      fmt.Println(s[0:5]) // "hello"
#    < src..
   ..src > go
     fmt.Println(s[0:5]) // "hello"
   < src..

#    Again, a panic results if either index is out of bounds or if @c(j) is less
#    than @c(i).
   De nuevo, se produce un panico si cualquiera de los indices esta fuera de
   limite o si @c(j) es menor que @c(i).

#    Either or both of the @c(i) and @c(j) operands may be omitted, in which case the
#    default values of 0 (the start of the string) and @c[len(s)] (its end) are
#    assumed, respectively.
   Cualquiera o ambos operandos @c(i) y @c(j) pueden omitirse, en cuyo caso los
   valores por defecto son 0 (el inicio de la cadena) y @c[len(s)] (su final),
   respectivamente.

#    ..src > go
#      fmt.Println(s[:5]) // "hello"
#      fmt.Println(s[7:]) // "world"
#      fmt.Println(s[:])  // "hello, world"
#    < src..
   ..src > go
     fmt.Println(s[:5]) // "hello"
     fmt.Println(s[7:]) // "world"
     fmt.Println(s[:])  // "hello, world"
   < src..

#    The @c(+) operator makes a new string by concatenating two strings:
   El operador c(+) crea una nueva cadena mediante la concatenacion de dos
   cadenas:

#    ..src > go
#      fmt.Println("goodbye" + s[5:]) // "goodbye, world"
#    < src..
   ..src > go
     fmt.Println("goodbye" + s[5:]) // "goodbye, world"
   < src..

#    Strings may be compared with comparison operators like @c(==) and @c(<); the
#    comparison is done byte by byte, so the result is the natural lexicographic
#    ordering.
   Las cadenas pueden compararse con los operadores de comparacion como @c(==) y
   @c(<); La comparacion se realiza byte a byte, por lo que el resultado es el
   orden lexicografico natural.

#    String values are immutable: the byte sequence contained in a string value
#    can never be changed, though of course we can assign a new value to a string
#    @e(variable). To append one string to another, for instance, we can write
   Los valores de cadena son inmutables: la secuencia de bytes contenidos en un
   valor de cadena no se puede cambiar, aunque, por supuesto, podemos asignar un
   nuevo valor a una variable de cadena. Para añadir una cadena a otra, por
   ejemplo, podemos escribir

#    ..src > go
#      s := "left foot"
#      t := s
#      s += ", right foot"
#    < src..
   ..src > go
     s := "left foot"
     t := s
     s += ", right foot"
   < src..

#    This does not modify the string that @c(s) originally held but causes @c(s)
#    to hold the new string formed by the @c(+=) statement; meanwhile, @c(t) still
#    contains the old string.
   Esto no modifica la cadena que retenia @c(s) originalmente, pero hace que
   @c(s) contenga la nueva cadena formada por la sentencia @c(+=); Mientras
   tanto, @c(t) aun contiene la cadena antigua.

#    ..src > go
#      fmt.Println(s) // "left foot, right foot"
#      fmt.Println(t) // "left foot"
#    < src..
   ..src > go
     fmt.Println(s) // "left foot, right foot"
     fmt.Println(t) // "left foot"
   < src..

#    Since strings are immutable, constructions that try to modify a string’s data
#    in place are not allowed:
   Dado que las cadenas son inmutables, no se permiten las construcciones que
   intentan modificar los datos de una cadena en su lugar:

#    ..src > go
#      s[0] = 'L' // compile error: cannot assign to s[0]
#    < src..
   ..src > go
     s[0] = 'L' // error de compilacion: no se puede asignar a s[0]
   < src..

#    Immutability means that it is safe for two copies of a string to share the
#    same underlying memory, making it cheap to copy strings of any length.
#    Similarly, a string @c(s) and a substring like @c(s[7:]) may safely share the
#    same data, so the substring operation is also cheap. No new memory is
#    allocated in either case. Figure 3.4 illustrates the arrangement of a string
#    and two of its substrings sharing the same underlying byte array.
   Inmutabilidad significa que es seguro que dos copias de una cadena compartan
   la misma memoria subyacente, por lo que es barato copiar cadenas de cualquier
   longitud. Del mismo modo, una cadena @c(s) y una subcadena como @c(s[7:])
   pueden compartir de forma segura los mismos datos, por lo que la operacion
   subcadena tambien es barata. No se asigna ninguna memoria nueva en ningun
   caso. La Figura 3.4 ilustra la disposicion de una cadena y dos de sus
   subcadenas que comparten el mismo arreglo de bytes subyacente.

#    ..figure > Figure 3.4. The string @c("hello, world") and two substrings.
   ..figure > Figura 3.4. La cadena @c("hello, world") y dos subcadenas.

#      ..img > img/Figure-3.4.jpg
     ..img > img/Figure-3.4.jpg

# *** Section 3.5.1 <> String Literals
*** Seccion 3.5.1 <> Cadenas Literales

#     A string value can be written as a @e(string literal), a sequence of bytes
#     enclosed in double quotes:
    Un valor de cadena se puede escribir como una @e(cadena literal), una
    secuencia de bytes entre comillas dobles:

#     ..src > go
#       "Hello, 世界"
#     < src..
    ..src > go
      "Hello, 世界"
    < src..

#     Because Go source files are always encoded in UTF-8 and Go text strings are
#     conventionally interpreted as UTF-8, we can include Unicode code points in
#     string literals.
    Debido a que los archivos fuente de Go siempre estan codificados en UTF-8 y
    las cadenas de texto Go son interpretadas convencionalmente como UTF-8,
    podemos incluir puntos de codigo Unicode en literales de cadena.

#     Within a double-quoted string literal, @e(escape sequences) that begin with
#     a backslash @c(\) can be used to insert arbitrary byte values into the
#     string. One set of escapes handles ASCII control codes like newline,
#     carriage return, and tab:
    Dentro de una literal de cadena entre comillas dobles, las secuencias de
    escape que comienzan con una barra invertida @c(\) se pueden utilizar para
    insertar valores arbitrarios de bytes en la cadena. Un conjunto de escape
    maneja codigos de control ASCII como newline, retorno de carro y tabulacion:

#     | @c(\a) | @"(alert) or bell                            |
#     |--------|----------------------------------------------|
#     | @c(\b) | backspace                                    |
#     |--------|----------------------------------------------|
#     | @c(\f) | form feed                                    |
#     |--------|----------------------------------------------|
#     | @c(\n) | newline                                      |
#     |--------|----------------------------------------------|
#     | @c(\r) | carriage return                              |
#     |--------|----------------------------------------------|
#     | @c(\t) | tab                                          |
#     |--------|----------------------------------------------|
#     | @c(\v) | vertical tab                                 |
#     |--------|----------------------------------------------|
#     | @c(\') | single quote (only in the rune literal '\'') |
#     |--------|----------------------------------------------|
#     | @c(\") | double quote (only within "..." literals)    |
#     |--------|----------------------------------------------|
#     | @c(\\) | backslash                                    |
    | @c(\a) | @"(alerta) o  campana                            |
    |--------|--------------------------------------------------|
    | @c(\b) | retroceso                                        |
    |--------|--------------------------------------------------|
    | @c(\f) | form feed                                        |
    |--------|--------------------------------------------------|
    | @c(\n) | linea nueva                                      |
    |--------|--------------------------------------------------|
    | @c(\r) | retorno de carro                                 |
    |--------|--------------------------------------------------|
    | @c(\t) | tabulador                                        |
    |--------|--------------------------------------------------|
    | @c(\v) | tabulador vertical                               |
    |--------|--------------------------------------------------|
    | @c(\') | comilla simple (solo en la runa literal '\'')    |
    |--------|--------------------------------------------------|
    | @c(\") | comillas dobles (solo dentro de "..." literales) |
    |--------|--------------------------------------------------|
    | @c(\\) | barra invertida                                  |

#     Arbitrary bytes can also be included in literal strings using hexadecimal or
#     octal escapes. A @e(hexadecimal) escape is written @c(\x)@e(hh), with exactly
#     two hexadecimal digits @e(h) (in upper or lower case). An octal escape is
#     written @e(\ooo) with exactly three octal digits @e(o) (0 through 7) not
#     exceeding @e(\377). Both denote a single byte with the specified
#     value. Later, we’ll see how to encode Unicode code points numerically in
#     string literals.
    Los bytes arbitrarios tambien se pueden incluir en cadenas literales usando
    escapes hexadecimales u octales. Un escape hexadecimal se escribe
    @c(\x)@e(hh), con exactamente dos digitos hexadecimales @e(h) (en mayusculas
    o minusculas). Un escape octal se escribe @e(\ooo) con exactamente tres
    digitos octales @e(o) (0 a 7) no superior a @c(\377). Ambos denotan un solo
    byte con el valor especificado. Mas adelante, veremos como codificar
    numericamente los puntos de codigo Unicode en literales de cadena.

#     A @e(raw string literal) is written @c(`...`), using backquotes instead of
#     double quotes. Within a raw string literal, no escape sequences are
#     processed; the contents are taken literally, including backslashes and
#     newlines, so a raw string literal may spread over several lines in the
#     program source. The only processing is that carriage returns are deleted so
#     that the value of the string is the same on all platforms, including those
#     that conventionally put carriage returns in text files.
    Una @e(literal de cadena sin formato) se escribe @c(`...`), utilizando
    comillas inversas en lugar de comillas dobles. Dentro de una literal de
    cadena sin formato, no se procesan secuencias de escape; Los contenidos se
    toman literalmente, incluyendo barras invertidas y lineas nuevas, por lo que
    un literal de cadena sin formato puede extenderse por varias lineas en el
    codigo del programa. El unico procesamiento es que los retornos de carro se
    eliminan para que el valor de la cadena sea el mismo en todas las
    plataformas, incluidas aquellas que convencionalmente ponen retornos de
    carro en archivos de texto.

#     Raw string literals are a convenient way to write regular expressions, which
#     tend to have lots of backslashes. They are also useful for HTML templates,
#     JSON literals, command usage messages, and the like, which often extend over
#     multiple lines.
    Las literales de cadenas sin formato son una manera conveniente de escribir
    expresiones regulares, que tienden a tener un monton de barras
    inversas. Tambien son utiles para plantillas HTML, literales JSON, mensajes
    de uso de comandos y similares, que a menudo se extienden sobre varias
    lineas.

#     ..src > go
#       const GoUsage = `Go is a tool for managing Go source code.
#
#       Usage:
#           go command [arguments]
#       ...`
#     < src..
    ..src > go
      const GoUsage = `Go is a tool for managing Go source code.

      Usage:
          go command [arguments]
      ...`
    < src..

# *** Section 3.5.2 <> Unicode
*** Seccion 3.5.2 <> Unicode

#     Long ago, life was simple and there was, at least in a parochial view, only
#     one character set to deal with: ASCII, the American Standard Code for
#     Information Interchange. ASCII, or more precisely US-ASCII, uses 7 bits to
#     represent 128 @"(characters): the upper- and lower-case letters of English,
#     digits, and a variety of punctuation and device-control characters. For much
#     of the early days of computing, this was adequate, but it left a very large
#     fraction of the world’s population unable to use their own writing systems
#     in computers. With the growth of the Internet, data in myriad languages has
#     become much more common. How can this rich variety be dealt with at all and,
#     if possible, efficiently?
    Hace mucho tiempo, la vida era simple y habia, por lo menos un punto de
    vista parroquial, solo un conjunto de caracteres a manejar: ASCII, el codigo
    estandar americano para el intercambio de la informacion (@e(American
    Standard Code for Information Interchange)). ASCII, o mas precisamente
    US-ASCII, utiliza 7 bits para representar 128 @"(caracteres): las letras
    mayusculas y minusculas del ingles, digitos y una variedad de caracteres de
    puntuacion y control de dispositivo. Durante gran parte de los primeros dias
    de la informatica, esto fue adecuado, pero dejo a una gran parte de la
    poblacion mundial incapaz de utilizar sus propios sistemas de escritura en
    las computadoras. Con el crecimiento de Internet, los datos en innumerables
    idiomas se han vuelto mucho mas comunes. ¿Como puede manejarse esta rica
    variedad y, si es posible, de forma eficiente?

#     The answer is Unicode (@l(http://unicode.org/<>unicode.org)), which collects
#     all of the characters in all of the world’s writing systems, plus accents
#     and other diacritical marks, control codes like tab and carriage return, and
#     plenty of esoterica, and assigns each one a standard number called a
#     @e(Unicode code point) or, in Go terminology, a @c(rune).
    La respuesta es Unicode (@l(http://unicode.org/<>unicode.org)), que recoge
    todos los caracteres de todos los sistemas de escritura del mundo, ademas de
    acentos y otros signos diacriticos, codigos de control como tabulador y
    retorno de carro, y plenty of esoterica, y asigna a cada uno un numero
    estandar denominado @e(punto de codigo Unicode) o, en la terminologia Go,
    una runa.

#     Unicode version 8 defines code points for over 120,000 characters in well
#     over 100 languages and scripts. How are these represented in computer
#     programs and data? The natural data type to hold a single rune is @c(int32),
#     and that’s what Go uses; it has the synonym @c(rune) for precisely this
#     purpose.
    Unicode version 8 define puntos de codigo para mas de 120.000 caracteres en
    mas de 100 idiomas y scripts. ¿Como se representan esto en los datos y
    programas de computadora? El tipo de datos naturales para almacenar una sola
    runa es @c(int32), y eso es lo utiliza Go; tiene el sinonimo @c(rune)
    precisamente para este proposito.

#     We could represent a sequence of runes as a sequence of @c(int32) values. In
#     this representation, which is called UTF-32 or UCS-4, the encoding of each
#     Unicode code point has the same size, 32 bits. This is simple and uniform,
#     but it uses much more space than necessary since most computer-readable text
#     is in ASCII, which requires only 8 bits or 1 byte per character. All the
#     characters in widespread use still number fewer than 65,536, which would fit
#     in 16 bits. Can we do better?
    Podriamos representar una secuencia de runas como una secuencia de valores
    @c(int32). Esta representacion, se llama UTF-32 o UCS-4, la codificacion de
    cada punto de codigo Unicode tiene el mismo tamaño, 32 bits. Esto es simple
    y uniforme, pero utiliza mucho mas espacio de lo necesario, ya que la
    mayoria de texto legible por computadora esta en ASCII, que requiere solo 8
    bits o 1 byte por caracter. Todos los caracteres en uso generalizado todavia
    aun son menos de 65.536, que cabrian en 16 bits. ¿Podemos hacerlo mejor?

# *** Section 3.5.3 <> UTF-8
*** Seccion 3.5.3 <> UTF-8

#     UTF-8 is a variable-length encoding of Unicode code points as bytes. UTF-8
#     was invented by Ken Thompson and Rob Pike, two of the creators of Go, and is
#     now a Unicode standard. It uses between 1 and 4 bytes to represent each
#     rune, but only 1 byte for ASCII characters, and only 2 or 3 bytes for most
#     runes in common use. The high-order bits of the first byte of the encoding
#     for a rune indicate how many bytes follow. A high-order @c(0) indicates
#     7-bit ASCII, where each rune takes only 1 byte, so it is identical to
#     conventional ASCII. A high-order @c(110) indicates that the rune takes 2
#     bytes; the second byte begins with @c(10). Larger runes have analogous
#     encodings.
    UTF-8 es una codificacion de longitud variable de puntos de codigo Unicode
    como bytes. UTF-8 fue inventado por Ken Thompson y Rob Pike, dos de los
    creadores de Go, y ahora es un estandar Unicode. Utiliza entre 1 y 4 bytes
    para representar cada runa, pero solo 1 byte para caracteres ASCII y solo 2
    o 3 bytes para la mayoria de runas en uso comun. Los bits de orden alto del
    primer byte de la codificacion de una runa indican cuantos bytes siguen. Un
    alto orden 0 indica ASCII de 7 bits, donde cada runa toma solo 1 byte, por
    lo que es identica a ASCII convencional. Un alto orden @c(110) indica que la
    runa toma 2 bytes; el segundo byte comienza con @c(10). Las runas mas
    grandes tienen codificaciones analogas.

#     | @c(0xxxxxx)                            | runes 0−127    | (ASCII)               |
#     |----------------------------------------|----------------|-----------------------|
#     | @c(11xxxxx 10xxxxxx)                   | 128−2047       | (values <128 unused)  |
#     |----------------------------------------|----------------|-----------------------|
#     | @c(110xxxx 10xxxxxx 10xxxxxx)          | 2048−65535     | (values <2048 unused) |
#     |----------------------------------------|----------------|-----------------------|
#     | @c(1110xxx 10xxxxxx 10xxxxxx 10xxxxxx) | 65536−0x10ffff | (other values unused) |
    | @c(0xxxxxx)                            | runas 0−127    | (ASCII)                       |
    |----------------------------------------|----------------|-------------------------------|
    | @c(11xxxxx 10xxxxxx)                   | 128−2047       | (valores <128 no utilizados)  |
    |----------------------------------------|----------------|-------------------------------|
    | @c(110xxxx 10xxxxxx 10xxxxxx)          | 2048−65535     | (valores <2048 no utilizados) |
    |----------------------------------------|----------------|-------------------------------|
    | @c(1110xxx 10xxxxxx 10xxxxxx 10xxxxxx) | 65536−0x10ffff | (otros valores no utiliados)  |

#     A variable-length encoding precludes direct indexing to access the @m(n)-th
#     character of a string, but UTF-8 has many desirable properties to compensate.
#     The encoding is compact, compatible with ASCII, and self-synchronizing: it’s
#     possible to find the beginning of a character by backing up no more than
#     three bytes. It’s also a prefix code, so it can be decoded from left to
#     right without any ambiguity or lookahead. No rune’s encoding is a substring
#     of any other, or even of a sequence of others, so you can search for a rune
#     by just searching for its bytes, without worrying about the preceding
#     context. The lexicographic byte order equals the Unicode code point order,
#     so sorting UTF-8 works naturally. There are no embedded NUL (zero) bytes,
#     which is convenient for programming languages that use NUL to terminate
#     strings.
    Una codificacion de longitud variable impide la indexacion directa para
    acceder al @m(n)-esimo caracter de una cadena, pero UTF-8 tiene muchas
    propiedades deseables para compensar. La codificacion es compacta,
    compatible con ASCII y auto-sincronizada: es posible encontrar el inicio de
    un caracter al realizar una copia de seguridad de no mas de tres
    bytes. Tambien es un prefijo de codigo, por lo que se puede decodificar de
    izquierda a derecha sin ninguna ambigüedad o lookahead. La codificacion de
    ninguna runa es una subcadena de cualquier otra, o incluso de una secuencia
    de otras, por lo que puedes buscar una runa simplemente buscando sus bytes,
    sin preocuparte por el contexto anterior. El orden de bytes lexicografico es
    igual al orden de los puntos de codigo Unicode, por lo que la ordenacion de
    UTF-8 funciona de forma natural. No hay ningun NUL incrustado (cero) bytes,
    que es conveniente para los lenguajes de programacion que utilizan NUL para
    terminar cadenas.

#     Go source files are always encoded in UTF-8, and UTF-8 is the preferred
#     encoding for text strings manipulated by Go programs. The @c(unicode)
#     package provides functions for working with individual runes (such as
#     distinguishing letters from numbers, or converting an uppercase letter to a
#     lower-case one), and the @c(unicode/utf8) package provides functions for
#     encoding and decoding runes as bytes using UTF-8.
    Los archivos de codigo fuente de Go siempre estan codificados en UTF-8 y
    UTF-8 es la codificacion preferida para las cadenas de texto manipuladas por
    los programas Go. El paquete @c(unicode) proporciona funciones para trabajar
    con runas individuales (como distinguir letras de numeros, o la conversion
    de una letra mayuscula a una minuscula), y el paquete @c(unicode/utf8)
    proporciona funciones para codificar y decodificar runas como bytes usando
    UTF-8.

#     Many Unicode characters are hard to type on a keyboard or to distinguish
#     visually from similar-looking ones; some are even invisible. Unicode escapes
#     in Go string literals allow us to specify them by their numeric code point
#     value. There are two forms, @c(\u)@e(hhhh) for a 16-bit value and @c(\U)@e(hhhhhhhh)
#     for a 32-bit value, where each @e(h) is a hexadecimal digit; the need for the
#     32-bit form arises very infrequently. Each denotes the UTF-8 encoding of the
#     specified code point. Thus, for example, the following string literals all
#     represent the same six-byte string:
    Muchos caracteres Unicode son dificiles de escribir en un teclado o
    distinguir visualmente de otros de similar aspecto; Algunos son incluso
    invisibles. Go nos permite el escape de literales Unicode en una cadena Go
    al especificarlos por su valor numerico. Hay dos formas, @c(\u)@e(hhhh) para
    un valor de 16 bits y @c(\U)@e(hhhhhhhh) para un valor de 32 bits, donde
    cada @e(h) es un digito hexadecimal; La necesidad de la forma de 32 bits se
    presenta con poca frecuencia. Cada uno denota la codificacion UTF-8 del
    punto de codigo especificado. Asi, por ejemplo, los siguientes literales de
    cadena representan la misma cadena de seis bytes:

#     ..src > go
#       "世界"
#       "\xe4\xb8\x96\xe7\x95\x8c"
#       "\u4e16\u754c"
#       "\U00004e16\U0000754c"
#     < src..
    ..src > go
      "世界"
      "\xe4\xb8\x96\xe7\x95\x8c"
      "\u4e16\u754c"
      "\U00004e16\U0000754c"
    < src..

#     The three escape sequences above provide alternative notations for the first
#     string, but the values they denote are identical.  Unicode escapes may also
#     be used in rune literals. These three literals are equivalent:
    Las tres secuencias de escape anteriores proporcionan notaciones
    alternativas para la primera cadena, pero los valores que denotan son
    identicos. Los escapes Unicode tambien se puede utilizar en runas
    literales. Estos tres literales son equivalentes:

#     ..pre >
#       '世' '\u4e16' '\U00004e16'
    ..pre >
      '世' '\u4e16' '\U00004e16'

#     A rune whose value is less than 256 may be written with a single hexadecimal
#     escape, such as @c('\x41') for @c('A'), but for higher values, a @c(\u) or
#     @c(\U) escape must be used. Consequently, @c('\xe4\xb8\x96') is not a legal
#     rune literal, even though those three bytes are a valid UTF-8 encoding of a
#     single code point.
    Una runa cuyo valor es menor que 256 se puede escribir con una sola de
    escape hexadecimal, por ejemplo @c('\x41') para @c('A'), pero para los
    valores mas altos, debe utilizar un @c(\u) o @c(\U) de escape. En
    consecuencia, @c('\xe4\xb8\x96') no es una runa literal legal, a pesar de
    que esos tres bytes son un UTF-8 valido de un unico punto de codigo.

#     Thanks to the nice properties of UTF-8, many string operations don’t require
#     decoding. We can test whether one string contains another as a prefix:
    Gracias a las buenas propiedades de UTF-8, muchas operaciones de cadena no
    requieren decodificacion. Podemos probar si una cadena contiene otra como
    prefijo:

#     ..src > go
#       func HasPrefix(s, prefix string) bool {
#         return len(s) >= len(prefix) && s[:len(prefix)] == prefix
#       }
#     < src..
    ..src > go
      func HasPrefix(s, prefix string) bool {
        return len(s) >= len(prefix) && s[:len(prefix)] == prefix
      }
    < src..

#     or as a suffix:
    O como sufijo:

#     ..src > go
#       func HasSuffix(s, suffix string) bool {
#         return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix
#       }
#     < src..
    ..src > go
      func HasSuffix(s, suffix string) bool {
        return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix
      }
    < src..

#     or as a substring:
    O como una subcadena:

#     ..src > go
#       func Contains(s, substr string) bool {
#         for i := 0; i < len(s); i++ {
#           if HasPrefix(s[i:], substr) {
#             return true
#           }
#         }
#         return false
#       }
#     < src..
    ..src > go
      func Contains(s, substr string) bool {
        for i := 0; i < len(s); i++ {
          if HasPrefix(s[i:], substr) {
            return true
          }
        }
        return false
      }
    < src..

#     using the same logic for UTF-8-encoded text as for raw bytes. This is not
#     true for other encodings. (The functions above are drawn from the @c(strings)
#     package, though its implementation of @c(Contains) uses a hashing technique to
#     search more efficiently.)
    Utilizando la misma logica para un texto codificado en UTF-8 como para bytes
    sin procesar. Esto no es cierto para otras codificaciones. (Las funciones
    anteriores se han extraido del paquete @c(strings), aunque su implementacion
    de @c(Contains) utiliza una tecnica de hash para buscar de manera mas
    eficiente.)

#     On the other hand, if we really care about the individual Unicode
#     characters, we have to use other mechanisms. Consider the string from our
#     very first example, which includes two East Asian characters. Figure 3.5
#     illustrates its representation in memory. The string contains 13 bytes,
#     but interpreted as UTF-8, it encodes only nine code points or runes:
    Por otro lado, si realmente nos preocupamos por los caracteres Unicode
    individuales, tenemos que usar otros mecanismos. Consideremos la cadena de
    nuestro primer ejemplo, la cual incluye dos caracteres asiaticos. La Figura
    3.5 ilustra su representacion en la memoria. La cadena contiene 13 bytes,
    pero interpretada como UTF-8, codifica solo nueve puntos de codigo o runas:

#     ..src > go
#       import "unicode/utf8"
#
#       s := "Hello, 世界"
#       fmt.Println(len(s))                    // "13"
#       fmt.Println(utf8.RuneCountInString(s)) // "9"
#     < src..
    ..src > go
      import "unicode/utf8"

      s := "Hello, 世界"
      fmt.Println(len(s))                    // "13"
      fmt.Println(utf8.RuneCountInString(s)) // "9"
    < src..

#     To process those characters, we need a UTF-8 decoder. The @c(unicode/utf8)
#     package provides one that we can use like this:
    Para procesar esos caracteres, necesitamos un decodificador UTF-8. El
    paquete @c(unicode/utf8) proporciona uno que podemos utilizar de la
    siguiente manera:

#     ..src > go
#       for i := 0; i < len(s); {
#         r, size := utf8.DecodeRuneInString(s[i:])
#         fmt.Printf("%d\t%c\n", i, r)
#         i += size
#       }
#     < src..
    ..src > go
      for i := 0; i < len(s); {
        r, size := utf8.DecodeRuneInString(s[i:])
        fmt.Printf("%d\t%c\n", i, r)
        i += size
      }
    < src..

#     Each call to @c(DecodeRuneInString) returns @c(r), the rune itself, and
#     @c(size), the number of bytes occupied by the UTF-8 encoding of @c(r). The
#     size is used to update the byte index @c(i) of the next rune in the
#     string. But this is clumsy, and we need loops of this kind all the
#     time. Fortunately, Go’s @c(range) loop, when applied to a string, performs
#     UTF-8 decoding implicitly. The output of the loop below is also shown in
#     Figure 3.5; notice how the index jumps by more than 1 for each non-ASCII
#     rune.
    Cada llamada a @c(DecodeRuneInString) regresa @c(r), la runa en si, y
    @c(size), el numero de bytes ocupados por la codificacion UTF-8 de @c(r). El
    tamaño se utiliza para actualizar el indice del byte @c(i) de la siguiente
    runa en la cadena. Pero esto es torpe, y necesitamos bucles de este tipo
    todo el tiempo. Afortunadamente, Go tiene los bucles @c(range), cuando se
    aplica a una cadena, realiza decodificacion UTF-8 de forma implicita. La
    salida del bucle de siguiente se muestra en la Figura 3.5; Observe como el
    indice salta en mas de 1 para cada runa no ASCII.

#     ..src > go
#       for i, r := range "Hello, 世界" {
#         fmt.Printf("%d\t%q\t%d\n", i, r, r)
#       }
#     < src..
    ..src > go
      for i, r := range "Hello, 世界" {
        fmt.Printf("%d\t%q\t%d\n", i, r, r)
      }
    < src..

#     ..figure > Figure 3.5. A @c(range) loop decodes a UTF-8-encoded string.
    ..figure > Figura 3.5. Un bucle @c(range) descodifica una cadena UTF-8-codificado.

#       ..img  > img/Figure-3.5.jpg
      ..img  > img/Figure-3.5.jpg


#     We could use a simple @c(range) loop to count the number of runes in a string,
#     like this:
    Podriamos usar un simple bucle @c(range) para contar el numero de runas en
    una cadena, como aqui:

#     ..src > go
#       n := 0
#       for _, _ = range s {
#         n++
#       }
#     < src..
    ..src > go
      n := 0
      for _, _ = range s {
        n++
      }
    < src..

#     As with the other forms of @c(range) loop, we can omit the variables we
#     don’t need:
    Al igual que con las otras formas de bucle @c(range), podemos omitir las
    variables que no necesitamos:

#     ..src > go
#       n := 0
#       for range s {
#         n++
#       }
#     < src..
    ..src > go
      n := 0
      for range s {
        n++
      }
    < src..

#     Or we can just call @c[utf8.RuneCountInString(s)].
    O podemos simplemente llamar a @c[utf8.RuneCountInString(s)].

#     We mentioned earlier that it is mostly a matter of convention in Go that
#     text strings are interpreted as UTF-8-encoded sequences of Unicode code
#     points, but for correct use of @c(range) loops on strings, it’s more than a
#     convention, it’s a necessity. What happens if we range over a string
#     containing arbitrary binary data or, for that matter, UTF-8 data containing
#     errors?
    Ya hemos mencionado que es sobre todo una cuestion de convencion en Go que
    las cadenas de texto se interpretan como secuencias codificadas en UTF-8 de
    puntos de codigo Unicode, pero para el uso correcto de bucles @c(range) de
    cadenas, es mas que una convencion, es una necesidad. ¿Que sucede si
    aplicamos @c(range) en cadena que contiene datos binarios arbitrarios o, de
    hecho, datos UTF-8 que contienen errores?

#     Each time a UTF-8 decoder, whether explicit in a call to
#     @c(utf8.DecodeRuneInString) or implicit in a @c(range) loop, consumes an
#     unexpected input byte, it generates a special Unicode @e(replacement
#     character), @c('\uFFFD'), which is usually printed as a white question mark
#     inside a black hexagonal or diamond-like shape �. When a program encounters
#     this rune value, it’s often a sign that some upstream part of the system
#     that generated the string data has been careless in its treatment of text
#     encodings.
    Cada vez que un decodificador UTF-8, ya sea explicito en una llamada a
    @c(utf8.DecodeRuneInString) o implicito en un bucle @c(range), consume un
    byte de entrada inesperado, se genera un caracter Unicode de reemplazo
    especial, @c('\uFFFD'), que generalmente se impreme como un signo de
    interrogacion dentro de una forma hexagonal o un diamante negro �. Cuando un
    programa encuentra este valor de runa, a menudo es un signo de que parte del
    sistema que genero los datos de cadena ha sido descuidado en su tratamiento
    de las codificaciones de texto.

#     UTF-8 is exceptionally convenient as an interchange format but within a
#     program runes may be more convenient because they are of uniform size and
#     are thus easily indexed in arrays and slices.
    UTF-8 es excepcionalmente conveniente como un formato de intercambio, pero
    dentro de un programa las runas puede ser mas conveniente porque son de
    tamaño uniforme y por lo tanto, de facil indexado en arreglos y slices.

#     A @c([]rune) conversion applied to a UTF-8-encoded string returns the
#     sequence of Unicode code points that the string encodes:
    Una conversion @c([]rune) aplicada a una cadena codificada en UTF-8 devuelve la
    secuencia de codigos Unicode:

#     ..src > go
#       // "program" in Japanese katakana
#       s := "プログラム"
#       fmt.Printf("% x\n", s) // "e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0"
#       r := []rune(s)
#       fmt.Printf("%x\n", r)  // "[30d7 30ed 30b0 30e9 30e0]"
#     < src..
    ..src > go
      // "programa" en katakana
      s := "プログラム"
      fmt.Printf("% x\n", s) // "e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0"
      r := []rune(s)
      fmt.Printf("%x\n", r)  // "[30d7 30ed 30b0 30e9 30e0]"
    < src..

#     (The verb @c(% x) in the first @c(Printf) inserts a space between each pair
#     of hex digits.)
    (El verbo @c(% x) en el primer @c(Printf) inserta un espacio entre cada par
    de digitos hexadecimales.)

#     If a slice of runes is converted to a string, it produces the concatenation
#     of the UTF-8 encodings of each rune:
    Si un slice de runas se convierte en una cadena, produce la concatenacion de
    las codificaciones UTF-8 de cada runa:

#     ..src > go
#       fmt.Println(string(r)) // "プログラム"
#     < src..
    ..src > go
      fmt.Println(string(r)) // "プログラム"
    < src..

#     Converting an integer value to a string interprets the integer as a rune
#     value, and yields the UTF-8 representation of that rune:
    Convertir un valor entero en una cadena interpre el entero como un valor
    de runa, y produce la representacion UTF-8 de esa runa:

#     ..src > go
#       UTF-8 representation of that rune:
#       fmt.Println(string(65))     // "A", not "65"
#       fmt.Println(string(0x4eac)) // "京"
#     < src..
    ..src > go
      fmt.Println(string(65))     // "A", not "65"
      fmt.Println(string(0x4eac)) // "京"
    < src..

#     If the rune is invalid, the replacement character is substituted:
    Si la runa no es valida, se reemplasa por el caracter de sustitucion:

#     ..src > go
#       fmt.Println(string(1234567)) // "�"
#     < src..
    ..src > go
      fmt.Println(string(1234567)) // "�"
    < src..

# *** Section 3.5.4 <> Strings and Byte Slices
*** Seccion 3.5.4 <> Cadenas y Slices de Bytes

#     Four standard packages are particularly important for manipulating strings:
#     @c(bytes), @c(strings), @c(strconv), and @c(unicode). The @c(string) spackage
#     provides many functions for searching, replacing, comparing, trimming,
#     splitting, and joining strings.
    cuatro paquetes estandar son particularmente importantes para la
    manipulacion de cadenas: @c(bytes), @c(strings), @c(strconv) y
    @c(unicode). El paquete @c(strings) ofrece muchas funciones para busqueda,
    reemplazo, comparacion, recorte, division, y union en cadenas.

#     The @c(bytes) package has similar functions for manipulating slices of
#     bytes, of type @c([]byte), which share some properties with strings. Because
#     strings are immutable, building up strings incrementally can involve a lot
#     of allocation and copying. In such cases, it’s more efficient to use the
#     @c(bytes.Buffer) type, which we’ll show in a moment.
    El paquete @c(bytes) tiene funciones similares para manipular slices de
    bytes, de tipo @c([]byte), que comparten algunas propiedades con
    @c(strings). Debido a que las cadenas son inmutables, la construccion de
    cadenas de forma incremental puede implicar una gran cantidad de asignacion
    y copiado. En tales casos, es mas eficaz utilizar el tipo @c(bytes.Buffer),
    que vamos a mostrar en un momento.

#     The @c(strconv) package provides functions for converting boolean, integer,
#     and floating-point values to and from their string representations, and
#     functions for quoting and unquoting strings.
    El paquete @c(strconv) proporciona funciones para convertir booleanos,
    enteros, y valores de coma flotante hacia y desde sus representaciones en
    cadenas, y funciones para citar y des-citar cadenas.

#     The @c(unicode) package provides functions like @c(IsDigit), @c(IsLetter),
#     @c(IsUpper), and @c(IsLower) for classifying runes. Each function takes a
#     single rune argument and returns a boolean. Conversion functions like
#     @c(ToUpper) and @c(ToLower) convert a rune into the given case if it is a
#     letter. All these functions use the Unicode standard categories for letters,
#     digits, and so on. The @c(strings) package has similar functions, also
#     called @c(ToUpper) and @c(ToLower), that return a new string with the
#     specified transformation applied to each character of the original string.
    El paquete @c(unicode) proporciona funciones como @c(IsDigit), @c(IsLetter),
    @c(IsUpper) y @c(IsLower) para la clasificacion de runas. Cada funcion toma
    un unico argumento de tipo runa y devuelve un booleano. Las funciones de
    conversion como @c(ToUpper) y @c(ToLower) convierten una runa en el caso
    concreto si se trata de una letra. Todas estas funciones utilizan las
    categorias estandar de Unicode para las letras, los digitos, etc. El paquete
    @c(strings) tiene funciones similares, tambien llamadas @c(ToUpper) y
    @c(ToLower), que devuelven una nueva cadena con la transformacion
    especificada aplicada a cada caracter de la cadena original.

#     The @c(basename) function below was inspired by the Unix shell utility of
#     the same name. In our version, @c(basename)(s) removes any prefix of s that
#     looks like a file system path with components separated by slashes, and it
#     removes any suffix that looks like a file type:
    La siguiente funcion @c(basename) se inspiro en la utilidad de shell Unix
    del mismo nombre. En nuestra version, @c[basename(s)] elimina cualquier
    prefijo de @c(s) que paresca una ruta de sistema con componentes separados
    por barras, y elimina cualquier sufijo que se parece a un tipo de archivo:

#     ..src > go
#       fmt.Println(basename("a/b/c.go")) // "c"
#       fmt.Println(basename("c.d.go"))   // "c.d"
#       fmt.Println(basename("abc"))      // "abc"
#     < src..
    ..src > go
      fmt.Println(basename("a/b/c.go")) // "c"
      fmt.Println(basename("c.d.go"))   // "c.d"
      fmt.Println(basename("abc"))      // "abc"
    < src..

#     The first version of @c(basename) does all the work without the help of
#     libraries:
    La primer version de basename hace todo el trabajo sin la ayuda de
    librerias:

#     ..figure > @l(gopl.io/ch3/basename1/main.go<>gopl.io/ch3/basename1)
    ..figure > @l(gopl.io/ch3/basename1/main.go<>gopl.io/ch3/basename1)

#       ..src > go
#         // basename removes directory components and a .suffix.
#         // e.g., a => a, a.go => a, a/b/c.go => c, a/b.c.go => b.c
#         func basename(s string) string {
#           // Discard last '/' and everything before.
#           for i := len(s) - 1; i >= 0; i-- {
#             if s[i] == '/' {
#               s = s[i+1:]
#               break
#             }
#           }
#           // Preserve everything before last '.'.
#           for i := len(s) - 1; i >= 0; i-- {
#             if s[i] == '.' {
#               s = s[:i]
#               break
#             }
#           }
#           return s
#         }
#       < src..
      ..src > go
        // basename elimina los .subfijos y componentes de directorios.
        // e.g., a => a, a.go => a, a/b/c.go => c, a/b.c.go => b.c
        func basename(s string) string {
          // Descarta el ultimo '/' y todo lo anterior.
          for i := len(s) - 1; i >= 0; i-- {
            if s[i] == '/' {
              s = s[i+1:]
              break
            }
          }
          // Conserva todo antes del ultimo '.'.
          for i := len(s) - 1; i >= 0; i-- {
            if s[i] == '.' {
              s = s[:i]
              break
            }
          }
          return s
        }
      < src..


#     A simpler version uses the @c(strings.LastIndex) library function:
    Una version mas simple utiliza la funcion de libreria @c(strings.LastIndex):

#     ..figure > @l(gopl.io/ch3/basename2/main.go<>gopl.io/ch3/basename2)
    ..figure > @l(gopl.io/ch3/basename2/main.go<>gopl.io/ch3/basename2)

#       ..src > go
#         func basename(s string) string {
#           slash := strings.LastIndex(s, "/") // -1 if "/" not found
#           s = s[slash+1:]
#           if dot := strings.LastIndex(s, "."); dot >= 0 {
#             s = s[:dot]
#           }
#           return s
#         }
#       < src..
      ..src > go
        func basename(s string) string {
          slash := strings.LastIndex(s, "/") // -1 si no se encuentra "/"
          s = s[slash+1:]
          if dot := strings.LastIndex(s, "."); dot >= 0 {
            s = s[:dot]
          }
          return s
        }
      < src..


#     The @c(path) and @c(path/filepath) packages provide a more general set of
#     functions for manipulating hierarchical names. The @c(path) package works
#     with slash-delimited paths on any platform. It shouldn’t be used for file
#     names, but it is appropriate for other domains, like the path component of a
#     URL. By contrast, @c(path/filepath) manipulates file names using the rules
#     for the host platform, such as @c(/foo/bar) for POSIX or @c(c:\foo\bar) on
#     Microsoft Windows.
    Los paquetes @c(path) y @c(path/filepath) proporcionan un conjunto general
    de funciones para manipular nombres jerarquicos. El paquete @c(path)
    funciona con rutas delimitada por barras en cualquier plataforma. No se debe
    utilizar para nombres de archivo, pero es apropiado para otros dominios,
    como los componente de ruta de una URL. Por el contrario, @c(path/filepath)
    manipula los nombres de archivos usando las reglas para la plataforma
    huesped, tales como @c(/foo/bar) para POSIX o @c(c:\foo\bar) en Microsoft
    Windows.

#     Let’s continue with another substring example. The task is to take a string
#     representation of an integer, such as @c("12345"), and insert commas every
#     three places, as in @c("12,345"). This version only works for integers;
#     handling floating-point numbers is left as a exercise.
    Vamos a continuar con otro ejemplo de subcadena. La tarea es tomar una
    representacion de cadena de un entero, como @c("12345"), e insertar comas
    cada tres posiciones, como en @c("12,345") . Esta version solo funciona para
    enteros; El manejo de numeros de coma flotante se deja como un ejercicio.

#     ..figure > @l(gopl.io/ch3/comma/main.go<>gopl.io/ch3/comma)
    ..figure > @l(gopl.io/ch3/comma/main.go<>gopl.io/ch3/comma)

#       ..src > go
#         // comma inserts commas in a non-negative decimal integer string.
#         func comma(s string) string {
#           n := len(s)
#           if n <= 3 {
#             return s
#           }
#           return comma(s[:n-3]) + "," + s[n-3:]
#         }
#       < src..
      ..src > go
        // comma inserta comas en una cadena de numeros enteros decimales negativos.
        func comma(s string) string {
          n := len(s)
          if n <= 3 {
            return s
          }
          return comma(s[:n-3]) + "," + s[n-3:]
        }
      < src..


#     The argument to @c(comma) is a string. If its length is less than or equal
#     to 3, no comma is necessary. Otherwise, @c(comma) calls itself recursively
#     with a substring consisting of all but the last three characters, and
#     appends a comma and the last three characters to the result of the recursive
#     call.
    El argumento de @c(comma) es una cadena. Si su longitud es menor o igual a
    3, no es necesaria una coma. De lo contrario, comma se llama a si misma de
    forma recursiva con una subcadena formada por todos menos los tres ultimos
    caracteres, y añåde una coma y los tres ultimos caracteres en el resultado
    de la llamada recursiva.

#     A string contains an array of bytes that, once created, is immutable. By
#     contrast, the elements of a byte slice can be freely modified.
    Una cadena contiene un arreglo de bytes que, una vez creado, es
    inmutable. Por el contrario, los elementos de una slice de bytes se pueden
    modificar libremente.

#     Strings can be converted to byte slices and back again:
    Las cadenas se pueden convertir en slices de bytes y viceversa:

#     ..src > go
#       s := "abc"
#       b := []byte(s)
#       s2 := string(b)
#     < src..
    ..src > go
      s := "abc"
      b := []byte(s)
      s2 := string(b)
    < src..

#     Conceptually, the @c{[]byte(s)} conversion allocates a new byte array
#     holding a copy of the bytes of @c(s), and yields a slice that references the
#     entirety of that array. An optimizing compiler may be able to avoid the
#     allocation and copying in some cases, but in general copying is required to
#     ensure that the bytes of @c(s) remain unchanged even if those of @c(b) are
#     subsequently modified. The conversion from byte slice back to string with
#     @c[string(b)] also makes a copy, to ensure immutability of the resulting
#     string @c(s2).
    Conceptualmente, la conversion @c{[]byte(s)} asigna un nuevo arreglo de
    bytes que guarda una copia de bytes de @c(s), y produce un slice que hace
    referencia a la totalidad del arreglo. Un compilador optimizado puede ser
    capaz de evitar la asignacion y la copia en algunos casos, pero en general,
    la copia es necesaria para asegurar que los bytes de @c(s) se mantienen sin
    cambios incluso si los de @c(b) son modificados posteriormente. La
    conversion de slice de byte de nuevo a cadena con @c[string(b)] tambien
    genera una copia, para asegurar inmutabilidad de la cadena resultante
    @c(s2).

#     To avoid conversions and unnecessary memory allocation, many of the utility
#     functions in the @c(bytes) package directly parallel their counterparts in
#     the @c(strings) package. For example, here are half a dozen functions from
#     @c(strings):
    Para evitar conversiones y asignacion de memoria innecesaria, muchas
    de las funciones de utilidad en el paquete @c(bytes) directamente paralelos a
    sus contrapartes en el paquete @c(strings). Por ejemplo, aqui hay una media
    docena de funciones en @c(strings):

#     ..src > go
#       func Contains(s, substr string) bool
#       func Count(s, sep string) int
#       func Fields(s string) []string
#       func HasPrefix(s, prefix string) bool
#       func Index(s, sep string) int
#       func Join(a []string, sep string) string
#     < src..
    ..src > go
      func Contains(s, substr string) bool
      func Count(s, sep string) int
      func Fields(s string) []string
      func HasPrefix(s, prefix string) bool
      func Index(s, sep string) int
      func Join(a []string, sep string) string
    < src..

#     and the corresponding ones from @c(bytes):
    y las correspondientes en bytes :

#     ..src > go
#       func Contains(b, subslice []byte) bool
#       func Count(s, sep []byte) int
#       func Fields(s []byte) [][]byte
#       func HasPrefix(s, prefix []byte) bool
#       func Index(s, sep []byte) int
#       func Join(s [][]byte, sep []byte) []byte
#     < src..
    ..src > go
      func Contains(b, subslice []byte) bool
      func Count(s, sep []byte) int
      func Fields(s []byte) [][]byte
      func HasPrefix(s, prefix []byte) bool
      func Index(s, sep []byte) int
      func Join(s [][]byte, sep []byte) []byte
    < src..

#     The only difference is that strings have been replaced by byte slices.
    La unica diferencia es que las cadenas han sido reemplazadas por slices de
    bytes.

#     The @c(bytes) package provides the @c(Buffer) type for efficient
#     manipulation of byte slices. A @c(Buffer) starts out empty but grows as data
#     of types like @c(string), @c(byte), and @c([]byte) are written to it. As the
#     example below shows, a @c(bytes.Buffer) variable requires no initialization
#     because its zero value is usable:
    El paquete @c(bytes) proporciona el tipo @c(Buffer) para la manipulacion
    eficiente de slices de @c(byte). Un @c(Buffer) comienza vacio, pero crece a
    medida que los datos de tipos como @c(string), @c(byte), y @c([]byte) se
    escriben en el. Como muestra el siguiente ejemplo, una variable
    @c(bytes.Buffer) no requiere inicializacion porque su valor cero es
    utilizable:

#     ..figure > @l(gopl.io/ch3/printints/main.go<>gopl.io/ch3/printints)
    ..figure > @l(gopl.io/ch3/printints/main.go<>gopl.io/ch3/printints)

#       ..src > go
#         // intsToString is like fmt.Sprint(values) but adds commas.
#         func intsToString(values []int) string {
#           var buf bytes.Buffer
#           buf.WriteByte('[')
#           for i, v := range values {
#             if i > 0 {
#               buf.WriteString(", ")
#             }
#             fmt.Fprintf(&buf, "%d", v)
#           }
#           buf.WriteByte(']')
#           return buf.String()
#         }
#
#         func main() {
#           fmt.Println(intsToString([]int{1, 2, 3})) // "[1, 2, 3]"
#         }
#       < src..
      ..src > go
        // intsToString es como fmt.Sprint(values) pero agrega comas.
        func intsToString(values []int) string {
          var buf bytes.Buffer
          buf.WriteByte('[')
          for i, v := range values {
            if i > 0 {
              buf.WriteString(", ")
            }
            fmt.Fprintf(&buf, "%d", v)
          }
          buf.WriteByte(']')
          return buf.String()
        }

        func main() {
          fmt.Println(intsToString([]int{1, 2, 3})) // "[1, 2, 3]"
        }
      < src..


#     When appending the UTF-8 encoding of an arbitrary rune to a
#     @c(bytes.Buffer), it’s best to use @c(bytes.Buffer)’s @c(WriteRune) method,
#     but @c(WriteByte) is fine for ASCII characters such as @c('[') and @c(']').
    Cuando se agrega la codificacion UTF-8 de un runa arbitraria a un
    @c(bytes.Buffer), lo mejor es utilizar el metodo @c(WriteRune) de
    @c(bytes.Buffer), pero @c(WriteByte) esta bien para caracteres ASCII como
    @c('[') y @c(']').

#     The @c(bytes.Buffer) type is extremely versatile, and when we discuss
#     interfaces in @l(#Chapter 7), we’ll see how it may be used as a replacement
#     for a file whenever an I/O function requires a sink for bytes
#     (@c(io.Writer)) as @c(Fprintf) does above, or a source of bytes
#     (@c(io.Reader)).
    El tipo @c(bytes.Buffer) es extremadamente versatil, y cuando hablemos de
    interfaces en el @l(#Capitulo 7), vamos a ver como se puede utilizar como un
    sustituto de un archivo cada vez que una funcion de E/S requiere un poso de
    bytes (@c(io.Writer)) como @c(Fprintf), o una fuente de bytes
    (@c(io.Reader)).

#     @b(Exercise 3.10): Write a non-recursive version of @c(comma), using
#     @c(bytes.Buffer) instead of string concatenation.
   @b(Ejercicio 3.10): Escribir una version no recursiva de @c(comma),
   utilizando @c(bytes.Buffer) en lugar de la concatenacion de cadenas.

#     @b(Exercise 3.11): Enhance @c(comma) so that it deals correctly with
#     floating-point numbers and an optional sign.
   @b(Ejercicio 3.11): Mejorar @c(comma) para que se maneje correctamente los
   numeros de punto flotante y un opcionalmente con signo.

#     @b(Exercise 3.12): Write a function that reports whether two strings are
#     anagrams of each other, that is, they contain the same letters in a
#     different order.
   @b(Ejercicio 3.12): Escribir una funcion que informa de si dos cadenas son
   anagramas entre si, es decir, que contienen las mismas letras en un orden
   diferente.

# *** Section 3.5.5 <> Conversions between Strings and Numbers
*** Seccion 3.5.5 <> Conversiones entre cadenas y numeros

#     In addition to conversions between strings, runes, and bytes, it’s often
#     necessary to convert between numeric values and their string
#     representations. This is done with functions from the @c(strconv) package.
    Ademas de las conversiones entre cadenas, runas y bytes, a menudo es
    necesario convertir entre valores numericos y sus representaciones de
    cadena. Esto se realiza con las funciones del paquete @c(strconv).

#     To convert an integer to a string, one option is to use @c(fmt.Sprintf);
#     another is to use the function @c(strconv.Itoa) (@"(integer to ASCII)):
    Para convertir un entero a una cadena, una opcion es utilizar @c(fmt.Sprintf);
    otra es utilizar la funcion @c(strconv.Itoa) (@"(entero a ASCII)):

#     ..src > go
#       x := 123
#       y := fmt.Sprintf("%d", x)
#       fmt.Println(y, strconv.Itoa(x)) // "123 123"
#     < src..
    ..src > go
      x := 123
      y := fmt.Sprintf("%d", x)
      fmt.Println(y, strconv.Itoa(x)) // "123 123"
    < src..

#     @c(FormatInt) and @c(FormatUint) can be used to format numbers in a
#     different base:
    @c(FormatInt) y @c(FormatUint) se pueden utilizar para dar formato a numeros
    en una base diferente:

#     ..src > go
#       fmt.Println(strconv.FormatInt(int64(x), 2)) // "1111011"
#     < src..
    ..src > go
      fmt.Println(strconv.FormatInt(int64(x), 2)) // "1111011"
    < src..

#     The @c(fmt.Printf) verbs @c(%b), @c(%d), @c(%u), and @c(%x) are often more
#     convenient than @c(Format) functions, especially if we want to include
#     additional information besides the number:
    Los verbos @c(%b), @c(%d), @c(%u) y @c(%x) de @c(fmt.Printf) a menudo son
    mas conveniente que las funciones @c(Format), sobre todo si queremos incluir
    informacion adicional ademas del numero:

#     ..src > go
#       s := fmt.Sprintf("x=%b", x) // "x=1111011"
#     < src..
    ..src > go
      s := fmt.Sprintf("x=%b", x) // "x=1111011"
    < src..

#     To parse a string representing an integer, use the @c(strconv) functions
#     @c(Atoi) or @c(ParseInt), or ParseUint for unsigned integers:
    Para analizar una cadena que representa un numero entero, utilice las
    funciones de @c(strconv) como @c(Atoi) o @c(ParseInt), o @c(ParseUint) para
    enteros sin signo:

#     ..src > go
#       x, err := strconv.Atoi("123")             // x is an int
#       y, err := strconv.ParseInt("123", 10, 64) // base 10, up to 64 bits
#     < src..
    ..src > go
      x, err := strconv.Atoi("123")             // x es un entero
      y, err := strconv.ParseInt("123", 10, 64) // base 10, hasta 64 bits
    < src..

#     The third argument of @c(ParseInt) gives the size of the integer type that
#     the result must fit into; for example, 16 implies @c(int16), and the special
#     value of 0 implies @c(int). In any case, the type of the result y is always
#     @c(int64), which you can then convert to a smaller type.
    El tercer argumento de @c(ParseInt) da el tamaño del tipo de entero que debe
    ser el resultado; por ejemplo, 16 implica @c(int16), y el valor especial 0
    implica @c(int) . En cualquier caso, el tipo del resultado @c(y) es siempre
    @c(int64), que luego se puede convertir a un tipo mas pequeño.

#     Sometimes @c(fmt.Scanf) is useful for parsing input that consists of orderly
#     mixtures of strings and numbers all on a single line, but it can be
#     inflexible, especially when handling incomplete or irregular input.
    A veces es util @c(fmt.Scanf) para el analisis de entrada que consta de
    mezclas ordenadas de cadenas y numeros todo en una sola linea, pero puede
    ser inflexible, especialmente cuando se maneja una entrada incompleta o
    irregular.

# ** Section 3.6 <> Constants
** Seccion 3.6 <> Constantes

#    Constants are expressions whose value is known to the compiler and whose
#    evaluation is guaranteed to occur at compile time, not at run time. The
#    underlying type of every constant is a basic type: boolean, string, or
#    number.
   Las constantes son expresiones cuyo valor es conocido por el compilador y
   cuya evaluacion se garantiza que se produzca en tiempo de compilacion, no en
   tiempo de ejecucion. El tipo subyacente de cada constante es un tipo basico:
   booleano, cadena o numero.

#    A @c(const) declaration defines named values that look syntactically like
#    variables but whose value is constant, which prevents accidental (or
#    nefarious) changes during program execution.  For instance, a constant is
#    more appropriate than a variable for a mathematical constant like @c(pi),
#    since its value won’t change:
   Una declaracion @c(const) define los valores que se ven sintacticamente como
   variables con nombre pero cuyo valor es constante, lo que evita cambios
   accidentales (o nefastos) durante la ejecucion del programa. Por ejemplo, una
   constante es mas apropiada que una variable para una constante matematica
   como @c(pi), ya que su valor no cambiara:

#    ..src > go
#      const pi = 3.14159 // approximately; math.Pi is a better approximation
#    < src..
   ..src > go
     const pi = 3.14159 // aproximadamente; math.Pi un una mejor aproximacion
   < src..

#    As with variables, a sequence of constants can appear in one declaration;
#    this would be appropriate for a group of related values:
   Al igual que con las variables, una secuencia de constantes puede aparecer en
   una declaracion; Esto seria apropiado para un grupo de valores relacionados:

#    ..src > go
#      const (
#        e  = 2.71828182845904523536028747135266249775724709369995957496696763
#        pi = 3.14159265358979323846264338327950288419716939937510582097494459
#      )
#    < src..
   ..src > go
     const (
       e  = 2.71828182845904523536028747135266249775724709369995957496696763
       pi = 3.14159265358979323846264338327950288419716939937510582097494459
     )
   < src..

#    Many computations on constants can be completely evaluated at compile time,
#    reducing the work necessary at run time and enabling other compiler
#    optimizations. Errors ordinarily detected at run time can be reported at
#    compile time when their operands are constants, such as integer division by
#    zero, string indexing out of bounds, and any floating-point operation that
#    would result in a non-finite value.
   Muchos calculos de constantes pueden evaluarse completamente en tiempo de
   compilacion, reduciendo el trabajo necesario en tiempo de ejecucion y
   habilitando otras optimizaciones de compilador. Los errores ordinariamente
   detectados en tiempo de ejecucion pueden ser reportados en tiempo de
   compilacion cuando sus operandos son constantes, como la division entera por
   cero, una cadena de indexacion fuera de limites y cualquier operacion de
   punto flotante que daria lugar a un valor no finito.

#    The results of all arithmetic, logical, and comparison operations applied to
#    constant operands are themselves constants, as are the results of conversions
#    and calls to certain built-in functions such as @c(len), @c(cap), @c(real),
#    @c(imag), @c(complex), and @c(unsafe.Sizeof) (@l(#Section 13.1<>§13.1)).
   Los resultados de toda la aritmetica, y operaciones de comparacion logicos
   aplicados a operandos constantes son en si mismas constantes, como son los
   resultados de las conversiones y las llamadas a ciertas funciones nativas
   como @c(len), @c(cap), @c(real), @c(imag), @c(complex), y @c(unsafe.Sizeof)
   (@l(#Seccion 13.1<>§13.1)).

#    Since their values are known to the compiler, constant expressions may appear
#    in types, specifically as the length of an array type:
   Ya que sus valores son conocidos por el compilador, las expresiones
   constantes pueden aparecer en los tipos, especificamente como la longitud de
   un tipo de arreglo:

#    ..src > go
#      const IPv4Len = 4
#
#      // parseIPv4 parses an IPv4 address (d.d.d.d).
#      func parseIPv4(s string) IP {
#        var p [IPv4Len]byte
#        // ...
#      }
#    < src..
   ..src > go
     const IPv4Len = 4

     // parseIPv4 analiza una direccion IPv4 (d.d.d.d).
     func parseIPv4(s string) IP {
       var p [IPv4Len]byte
       // ...
     }
   < src..

#    A constant declaration may specify a type as well as a value, but in the
#    absence of an explicit type, the type is inferred from the expression on the
#    right-hand side. In the following, @c(time.Duration) is a named type whose
#    underlying type is @c(int64), and @c(time.Minute) is a constant of that
#    type. Both of the constants declared below thus have the type
#    @c(time.Duration) as well, as revealed by @c(%T):
   Una declaracion constante puede especificar un tipo como un valor, pero en
   ausencia de un tipo explicito, el tipo se infiere de la expresion en el lado
   derecho. En el siguiente ejemplo, @c(time.Duration) es un tipo con nombre
   cuyo tipo subyacente es @c(int64), y @c(time.Minute) es una constante de ese
   tipo. Por lo tanto las dos constantes declaradas a continuacion tienen el
   tipo @c(time.Duration), como lo revela @c(%T):

#    ..src > go
#      const noDelay time.Duration = 0
#      const timeout = 5 * time.Minute
#
#      fmt.Printf("%T %[1]v\n", noDelay)     // "time.Duration 0"
#      fmt.Printf("%T %[1]v\n", timeout)     // "time.Duration 5m0s
#      fmt.Printf("%T %[1]v\n", time.Minute) // "time.Duration 1m0s"
#    < src..
   ..src > go
     const noDelay time.Duration = 0
     const timeout = 5 * time.Minute

     fmt.Printf("%T %[1]v\n", noDelay)     // "time.Duration 0"
     fmt.Printf("%T %[1]v\n", timeout)     // "time.Duration 5m0s
     fmt.Printf("%T %[1]v\n", time.Minute) // "time.Duration 1m0s"
   < src..

#    When a sequence of constants is declared as a group, the right-hand side
#    expression may be omitted for all but the first of the group, implying that
#    the previous expression and its type should be used again. For example:
   Cuando una secuencia de constantes se declara como un grupo, la expresion del
   lado derecho se puede omitir para todas excepto para la primera del grupo, lo
   que implica que la expresion anterior y su tipo deben ser utilizados de
   nuevo. Por ejemplo:

#    ..src > go
#      const (
#        a = 1
#        b
#        c = 2
#        d
#      )
#
#      fmt.Println(a, b, c, d) // "1 1 2 2"
#    < src..
   ..src > go
     const (
       a = 1
       b
       c = 2
       d
     )

     fmt.Println(a, b, c, d) // "1 1 2 2"
   < src..

#    This is not very useful if the implicitly copied right-hand side expression
#    always evaluates to the same thing. But what if it could vary? This brings us
#    to @c(iota).
   Esto no es muy util si la expresion del lado derecho implicitamente copiada
   se evalua siempre con el mismo valor. Pero, ¿y si pudiera variar? Esto nos
   lleva a @c(iota).

# *** Section 3.6.1 <> The Constant Generator @c(iota)
*** Seccion 3.6.1 <> El Generador Constante @c(iota)

#     A @c(const) declaration may use the @e(constant generator) @c(iota), which
#     is used to create a sequence of related values without spelling out each one
#     explicitly. In a @c(const) declaration, the value of @c(iota) begins at zero
#     and increments by one for each item in the sequence.
    Una declaracion @c(const) puede utilizar el generador de constante @c(iota),
    que se utiliza para crear una secuencia de valores relacionados sin escribir
    cada uno de forma explicita. En una declaracion @c(const), el valor de
    @c(iota) comienza en cero y se incrementa en uno en cada elemento de la
    secuencia.

#     Here’s an example from the @c(time) package, which defines named constants
#     of type @c(Weekday) for the days of the week, starting with zero for
#     @c(Sunday). Types of this kind are often called @e(enumerations), or
#     @e(enums) for short.
    He aqui un ejemplo del paquete @c(time), que define constantes de tipo
    @c(Weekday) de los dias de la semana, a partir de cero para @c(Sunday).
    Tipos de esta clase a menudo se conocen como @e(enumeraciones), o @e(enums),
    para abreviar.

#     ..src > go
#       type Weekday int
#
#       const (
#         Sunday Weekday = iota
#         Monday
#         Tuesday
#         Wednesday
#         Thursday
#         Friday
#         Saturday
#       )
#     < src..
    ..src > go
      type Weekday int

      const (
        Sunday Weekday = iota
        Monday
        Tuesday
        Wednesday
        Thursday
        Friday
        Saturday
      )
    < src..

#     This declares @c(Sunday) to be 0, @c(Monday) to be 1, and so on.
    Esto declara que @c(Sunday) debe ser 0, @c(Monday) debe ser 1, y asi
    sucesivamente.

#     We can use @c(iota) in more complex expressions too, as in this example from
#     the @c(net) package where each of the lowest 5 bits of an unsigned integer
#     is given a distinct name and boolean interpretation:
    Podemos utilizar @c(iota) en expresiones mas complejas, como en este ejemplo
    del paquete @c(net) en el que se le da a cada uno de los 5 bits mas bajos de
    un entero sin signo un nombre distinto e interpretacion booleana:

#     ..src > go
#       type Flags uint
#
#       const (
#         FlagUp Flags = 1 << iota // is up
#         FlagBroadcast            // supports broadcast access capability
#         FlagLoopback             // is a loopback interface
#         FlagPointToPoint         // belongs to a point-to-point link
#         FlagMulticast            // supports multicast access capability
#       )
#     < src..
    ..src > go
      type Flags uint

      const (
        FlagUp Flags = 1 << iota // esta arriba
        FlagBroadcast            // soporta acceso broadcast
        FlagLoopback             // es una interface loopback
        FlagPointToPoint         // pertenece a un enlace punto-a-punto
        FlagMulticast            // soporta acceso multicast
      )
    < src..

#     As @c(iota) increments, each constant is assigned the value of @c(1 <<
#     iota), which evaluates to successive powers of two, each corresponding to a
#     single bit. We can use these constants within functions that test, set, or
#     clear one or more of these bits:
    Como @c(iota) incrementa, a cada constante se le asigna el valor de @c(1 <<
    iota), que evalua a potencias consecutivas de dos, cada un corresponde a un
    solo bit. Podemos utilizar estas constantes dentro de funciones que prueban,
    establecen o borran uno o mas de estos bits:

#     ..figure > @l(gopl.io/ch3/netflag/netflag.go<>gopl.io/ch3/netflag)
    ..figure > @l(gopl.io/ch3/netflag/netflag.go<>gopl.io/ch3/netflag)

#       ..src > go
#         func IsUp(v Flags) bool     { return v&FlagUp == FlagUp }
#         func TurnDown(v *Flags)     { *v &^= FlagUp }
#         func SetBroadcast(v *Flags) { *v |= FlagBroadcast }
#         func IsCast(v Flags) bool   { return v&(FlagBroadcast|FlagMulticast) != 0 }
#
#         func main() {
#           var v Flags = FlagMulticast | FlagUp
#           fmt.Printf("%b %t\n", v, IsUp(v))   // "10001 true"
#           TurnDown(&v)
#           fmt.Printf("%b %t\n", v, IsUp(v))   // "10000 false"
#           SetBroadcast(&v)
#           fmt.Printf("%b %t\n", v, IsUp(v))   // "10010 false"
#           fmt.Printf("%b %t\n", v, IsCast(v)) // "10010 true"
#         }
#       < src..
      ..src > go
        func IsUp(v Flags) bool     { return v&FlagUp == FlagUp }
        func TurnDown(v *Flags)     { *v &^= FlagUp }
        func SetBroadcast(v *Flags) { *v |= FlagBroadcast }
        func IsCast(v Flags) bool   { return v&(FlagBroadcast|FlagMulticast) != 0 }

        func main() {
          var v Flags = FlagMulticast | FlagUp
          fmt.Printf("%b %t\n", v, IsUp(v))   // "10001 true"
          TurnDown(&v)
          fmt.Printf("%b %t\n", v, IsUp(v))   // "10000 false"
          SetBroadcast(&v)
          fmt.Printf("%b %t\n", v, IsUp(v))   // "10010 false"
          fmt.Printf("%b %t\n", v, IsCast(v)) // "10010 true"
        }
      < src..


#     As a more complex example of @c(iota), this declaration names the powers of
#     1024:
    Como un ejemplo mas complejo de @c(iota), esta declaracion nombra las
    potencias de 1024:

#     ..src > go
#       const (
#         _ = 1 << (10 * iota)
#         KiB // 1024
#         MiB // 1048576
#         GiB // 1073741824
#         TiB // 1099511627776              (exceeds 1 << 32)
#         PiB // 1125899906842624
#         EiB // 1152921504606846976
#         ZiB // 1180591620717411303424     (exceeds 1 << 64)
#         YiB // 1208925819614629174706176
#       )
#     < src..
    ..src > go
      const (
        _ = 1 << (10 * iota)
        KiB // 1024
        MiB // 1048576
        GiB // 1073741824
        TiB // 1099511627776              (exede 1 << 32)
        PiB // 1125899906842624
        EiB // 1152921504606846976
        ZiB // 1180591620717411303424     (exede 1 << 64)
        YiB // 1208925819614629174706176
      )
    < src..

#     The @c(iota) mechanism has its limits. For example, it’s not possible to
#     generate the more familiar powers of 1000 (KB, MB, and so on) because there
#     is no exponentiation operator.
    El mecanismo @c(iota) tiene sus limites. Por ejemplo, no es posible generar
    las potencias mas familiares de 1000 (KB, MB, etc.) porque no hay un
    operador de exponenciacion.

#     @b(Exercise 3.13): Write @c(const) declarations for KB, MB, up through YB as
#     compactly as you can.
   @b(Ejercicio 3.13): Escribir declaraciones @c(const) para KB, MB, hasta YB lo
   mas compacto como sea posible.

# *** Section 3.6.2 <> Untyped Constants
*** Seccion 3.6.2 <> Constantes Sin Tipo

#     Constants in Go are a bit unusual. Although a constant can have any of the
#     basic data types like @c(int) or @c(float64), including named basic types
#     like @c(time.Duration), many constants are not committed to a particular
#     type. The compiler represents these uncommitted constants with much greater
#     numeric precision than values of basic types, and arithmetic on them is more
#     precise than machine arithmetic; you may assume at least 256 bits of
#     precision. There are six flavors of these uncommitted constants, called
#     @e(untyped) boolean, untyped integer, untyped rune, untyped floating-point,
#     untyped complex, and untyped string.
    Las constantes en Go son un poco inusuales. Aunque una constante puede tener
    cualquiera de los tipos de datos basicos como @c(int) o @c(float64),
    incluyendo tipos basicos con nombre como @c(time.Duration), muchas
    constantes no estan comprometidas con un tipo particular. El compilador
    representa estas constantes no comprometidas con una precision numerica
    mucho mayor que los valores de tipos basicos, y la aritmetica en ellas es
    mas precisa que la aritmetica de la maquina; Puede suponer al menos 256 bits
    de precision. Hay seis sabores de estas constantes no comprometidos, llamado
    booleanos @e(sin tipo), enteros sin tipo, runas sin tipo, punto flotante sin
    tipo, complejos sin tipo y cadenas sin tipo.

#     By deferring this commitment, untyped constants not only retain their higher
#     precision until later, but they can participate in many more expressions
#     than committed constants without requiring conversions. For example, the
#     values @c(ZiB) and @c(YiB) in the example above are too big to store in any
#     integer variable, but they are legitimate constants that may be used in
#     expressions like this one:
    Al aplazar este compromiso, las constantes no tipificadas no solo conservan
    su mayor precision hasta mas tarde, sino que pueden participar en muchas mas
    expresiones que las constantes comprometidas sin requerir conversiones. Por
    ejemplo, los valores @c(ZiB) y @c(YiB) en el ejemplo anterior son demasiado
    grandes para almacenase en cualquier variable entera, pero son legitimas
    constantes que pueden utilizarse en las expresiones como esta:

#     ..src > go
#       fmt.Println(YiB/ZiB) // "1024"
#     < src..
    ..src > go
      fmt.Println(YiB/ZiB) // "1024"
    < src..

#     As another example, the floating-point constant @c(math.Pi) may be used
#     wherever any floatingpoint or complex value is needed:
    Como otro ejemplo, la constante de coma flotante @c(math.Pi) puede
    utilizarse alli donde se necesite cualquier valor de coma flotante o
    complejo:

#     ..src > go
#       var x float32 = math.Pi
#       var y float64 = math.Pi
#       var z complex128 = math.Pi
#     < src..
    ..src > go
      var x float32 = math.Pi
      var y float64 = math.Pi
      var z complex128 = math.Pi
    < src..

#     If @c(math.Pi) had been committed to a specific type such as @c(float64),
#     the result would not be as precise, and type conversions would be required
#     to use it when a @c(float32) or @c(complex128) value is wanted:
    Si @c(math.Pi) entubiera comprometido con un tipo especifico, como
    @c(float64), el resultado no seria tan preciso, y se requerira de conversion
    de tipos para usarlo con valores @c(float32) o @c(complex128):

#     ..src > go
#       const Pi64 float64 = math.Pi
#
#       var x float32 = float32(Pi64)
#       var y float64 = Pi64
#       var z complex128 = complex128(Pi64)
#     < src..
    ..src > go
      const Pi64 float64 = math.Pi

      var x float32 = float32(Pi64)
      var y float64 = Pi64
      var z complex128 = complex128(Pi64)
    < src..

#     For literals, syntax determines flavor. The literals @c(0), @c(0.0), @c(0i),
#     and @c('\u0000') all denote constants of the same value but different
#     flavors: untyped integer, untyped floating-point, untyped complex, and
#     untyped rune, respectively. Similarly, @c(true) and @c(false) are untyped
#     booleans and string literals are untyped strings.
    Para literales, la sintaxis determina el sabor. Los literales de @c(0),
    @c(0.0), @c(0i), y @c('\u0000') representan constantes del mismo valor pero
    diferentes sabores: entero sin tipo, sin tipo de punto flotante, complejo
    sin tipo, y runa sin tipo, respectivamente. Del mismo modo, @c(true) y
    @c(false) son booleanos sin tipo y literales de cadena son cadenas sin tipo.

#     Recall that @c(/) may represent integer or floating-point division depending on
#     its operands.  Consequently, the choice of literal may affect the result of
#     a constant division expression:
    Recordemos que @c(/) puede representar un numero entero o division de punto
    flotante dependiendo de sus operandos. En consecuencia, la eleccion de
    literal puede afectar el resultado de una expresion de division constante:

#     ..src > go
#       var f float64 = 212
#       fmt.Println((f - 32) * 5 / 9)     // "100"; (f - 32) * 5 is a float64
#       fmt.Println(5 / 9 * (f - 32))     // "0";   5/9 is an untyped integer, 0
#       fmt.Println(5.0 / 9.0 * (f - 32)) // "100"; 5.0/9.0 is an untyped float
#     < src..
    ..src > go
      var f float64 = 212
      fmt.Println((f - 32) * 5 / 9)     // "100"; (f - 32) * 5 es un float64
      fmt.Println(5 / 9 * (f - 32))     // "0";   5/9 es un entero sin tipo, 0
      fmt.Println(5.0 / 9.0 * (f - 32)) // "100"; 5.0/9.0 es un float sin tipo
    < src..

#     Only constants can be untyped. When an untyped constant is assigned to a
#     variable, as in the first statement below, or appears on the right-hand side
#     of a variable declaration with an explicit type, as in the other three
#     statements, the constant is implicitly converted to the type of that
#     variable if possible.
    Solo las constantes pueden no tener tipo. Cuando una constante no tipificada
    se asigna a una variable, como en la primer instruccion a continuacion, o
    aparece en el lado derecho de una declaracion de variable con un tipo
    explicito, como en las otras tres sentencias, la constante se convierte
    implicitamente en el tipo de esa variable si es posible.

#     ..src > go
#       var f float64 = 3 + 0i // untyped complex -> float64
#       f = 2                  // untyped integer -> float64
#       f = 1e123              // untyped floating-point -> float64
#       f = 'a'                // untyped rune -> float64
#     < src..
    ..src > go
      var f float64 = 3 + 0i // complejo sin tipo -> float64
      f = 2                  // entero sin tipo -> float64
      f = 1e123              // punto flotante sin tipo -> float64
      f = 'a'                // runa sin tipo -> float64
    < src..

#     The statements above are thus equivalent to these:
    Las afirmaciones anteriores son, pues, equivalentes a estas:

#     ..src > go
#       var f float64 = float64(3 + 0i)
#       f = float64(2)
#       f = float64(1e123)
#       f = float64('a')
#     < src..
    ..src > go
      var f float64 = float64(3 + 0i)
      f = float64(2)
      f = float64(1e123)
      f = float64('a')
    < src..

#     Whether implicit or explicit, converting a constant from one type to another
#     requires that the target type can represent the original value. Rounding is
#     allowed for real and complex floating-point numbers:
    Ya sea implicita o explicitamente, la conversion de una constante de un tipo
    a otro requiere que el tipo de destino pueda representar el valor
    original. Se permite el redondeo para numeros reales y complejos de coma
    flotante:

#     ..src > go
#       const (
#         deadbeef = 0xdeadbeef // untyped int with value 3735928559
#         a = uint32(deadbeef)  // uint32 with value 3735928559
#         b = float32(deadbeef) // float32 with value 3735928576 (rounded up)
#         c = float64(deadbeef) // float64 with value 3735928559 (exact)
#         d = int32(deadbeef)   // compile error: constant overflows int32
#         e = float64(1e309)    // compile error: constant overflows float64
#         f = uint(-1)          // compile error: constant underflows uint
#       )
#     < src..
    ..src > go
      const (
        deadbeef = 0xdeadbeef // int sin tipo con valor 3735928559
        a = uint32(deadbeef)  // uint32 con valor 3735928559
        b = float32(deadbeef) // float32 con valor 3735928576 (rounded up)
        c = float64(deadbeef) // float64 con valor 3735928559 (exact)
        d = int32(deadbeef)   // error de compilacion: desbordamiento constante int32
        e = float64(1e309)    // error de compilacion: desbordamiento constante float64
        f = uint(-1)          // error de compilacion: subdesbordamiento constante uint
      )
    < src..

#     In a variable declaration without an explicit type (including short variable
#     declarations), the flavor of the untyped constant implicitly determines the
#     default type of the variable, as in these examples:
    En una declaracion de variable sin un tipo explicito (incluyendo declaracion
    de variables compacto), el sabor de la constante no tipificada determina
    implicitamente el tipo predeterminado de la variable, como en estos
    ejemplos:

#     ..src > go
#       i := 0      // untyped integer;        implicit int(0)
#       r := '\000' // untyped rune;           implicit rune('\000')
#       f := 0.0    // untyped floating-point; implicit float64(0.0)
#       c := 0i     // untyped complex;        implicit complex128(0i)
#     < src..
    ..src > go
      i := 0      // entero sin tipo;         int(0) implicitio
      r := '\000' // runa sin tipo;           rune('\000') implicitio
      f := 0.0    // punto flotante sin tipo; float64(0.0) implicitio
      c := 0i     // complejo sin tipo;       complex128(0i) implicitio
    < src..

#     Note the asymmetry: untyped integers are converted to @c(int), whose size is
#     not guaranteed, but untyped floating-point and complex numbers are converted
#     to the explicitly sized types @c(float64) and @c(complex128). The language
#     has no unsized @c(float) and @c(complex) types analogous to unsized @c(int),
#     because it is very difficult to write correct numerical algorithms without
#     knowing the size of one’s floating-point data types.
    Observese la asimetria: los enteros sin tipo se convierten en @c(int), cuyo
    tamaño no esta garantizado, pero los numeros de punto flotante y numeros
    complejos se convierten a los tipos de tamaño @c(float64) y @c(complex128)
    de forma explicita. El lenguaje no cuenta con tipos @c(float) y @c(complex)
    sin tamaño, analogos a @c(int) sin tamaño, porque es muy dificil escribir
    algoritmos numericos correctos sin conocer el tamaño de uno de los tipos de
    datos de punto flotante.

#     To give the variable a different type, we must explicitly convert the
#     untyped constant to the desired type or state the desired type in the
#     variable declaration, as in these examples:
    Para dar un tipo diferente a la variable, debemos convertir explicitamente
    la constante no tipificada en el tipo deseado o indicar el tipo deseado en
    la declaracion de variables, como en estos ejemplos:

#     ..src > go
#       var i = int8(0)
#       var i int8 = 0
#     < src..
    ..src > go
      var i = int8(0)
      var i int8 = 0
    < src..

#     These defaults are particularly important when converting an untyped
#     constant to an interface value (see @l(#Chapter 7)) since they determine its
#     dynamic type.
    Estos valores predeterminados son particularmente importantes cuando se
    convierte una constante sin tipo a un valor de interfaz (ver @l(#Capitulo
    7)) ya que determinan su tipo dinamico.

#     ..src > go
#       fmt.Printf("%T\n", 0)      // "int"
#       fmt.Printf("%T\n", 0.0)    // "float64"
#       fmt.Printf("%T\n", 0i)     // "complex128"
#       fmt.Printf("%T\n", '\000') // "int32" (rune)
#     < src..
    ..src > go
      fmt.Printf("%T\n", 0)      // "int"
      fmt.Printf("%T\n", 0.0)    // "float64"
      fmt.Printf("%T\n", 0i)     // "complex128"
      fmt.Printf("%T\n", '\000') // "int32" (rune)
    < src..

#     We’ve now covered the basic data types of Go. The next step is to show how
#     they can be combined into larger groupings like arrays and structs, and then
#     into data structures for solving real programming problems; that is the
#     topic of @l(#Chapter 4).
    Ahora hemos cubierto los tipos de datos basicos de Go. El siguiente paso es
    mostrar como se pueden combinar en agrupaciones mas grandes como arreglos y
    estructuras, y luego en estructuras de datos para resolver problemas de
    programacion real; ese es el tema del @l(#Capitulo 4).

# * Chapter 4 <> Composite Types
* Capitulo 4 <> Tipos Compuestos

#   In @l(#Chapter 3) we discussed the basic types that serve as building blocks
#   for data structures in a Go program; they are the atoms of our universe. In
#   this chapter, we’ll take a look at @e(composite) types, the molecules created
#   by combining the basic types in various ways. We’ll talk about four such
#   types—arrays, slices, maps, and structs—and at the end of the chapter, we’ll
#   show how structured data using these types can be encoded as and parsed from
#   JSON data and used to generate HTML from templates.
  En el @l(#Capitulo 3) hablamos de los tipos basicos que sirven como bloques de
  construccion para estructuras de datos en un programa Go; Son los atomos de
  nuestro universo. En este capitulo, vamos a echar un vistazo a los tipos
  @e(compuestos), las moleculas creadas mediante la combinacion de los tipos
  basicos de diversas maneras. Hablaremos de cuatro de estos tipos–arreglos,
  slices, mapas y estructuras–y al final del capitulo mostraremos como los datos
  estructurados que utilizan estos tipos pueden ser codificados y analizados a
  partir de datos JSON y usados ​​para generar HTML desde plantillas.

#   Arrays and structs are @e(aggregate) types; their values are concatenations of
#   other values in memory. Arrays are homogeneous—their elements all have the
#   same type—whereas structs are heterogeneous. Both arrays and structs are fixed
#   size. In contrast, slices and maps are dynamic data structures that grow as
#   values are added.
  Arreglos y estructuras son tipos de @e(agregados); Sus valores son
  concatenaciones de otros valores en la memoria. Los arreglos son homogeneos,
  sus elementos tienen el mismo tipo, mientras que las estructuras son
  heterogeneas. Los arreglos y las estructuras son de tamaño fijo. Por el
  contrario, slices y mapas son estructuras de datos dinamicas que crecen a
  medida que se agregan valores.

# ** Section 4.1 <> Arrays
** Seccion 4.1 <> Arreglos

#    An array is a fixed-length sequence of zero or more elements of a particular
#    type. Because of their fixed length, arrays are rarely used directly in
#    Go. Slices, which can grow and shrink, are much more versatile, but to
#    understand slices we must understand arrays first.
   Un arreglo es una secuencia de longitud fija de cero o mas elementos de un
   tipo particular. Debido a su longitud fija, en Go raramente se utilizan
   arreglos directamente. Los slices, pueden crecer y encogerse, son mucho mas
   versatiles, pero para entender los slices primero debemos entender los
   arreglos.

#    Individual array elements are accessed with the conventional subscript
#    notation, where subscripts run from zero to one less than the array
#    length. The built-in function @c(len) returns the number of elements in the
#    array.
   Los elementos individuales de arreglo se acceden con la notacion de
   subindices convencional, donde los subindices abarcan desde cero a uno menos
   que la longitud de la arreglo. La funcion nativa @c(len) devuelve el numero
   de elementos de la arreglo.

#    ..src > go
#      var a [3]int             // array of 3 integers
#      fmt.Println(a[0])        // print the first element
#      fmt.Println(a[len(a)-1]) // print the last element, a[2]
#
#      // Print the indices and elements.
#      for i, v := range a {
#        fmt.Printf("%d %d\n", i, v)
#      }
#
#      // Print the elements only.
#      for _, v := range a {
#        fmt.Printf("%d\n", v)
#      }
#    < src..
   ..src > go
     var a [3]int             // arreglo de 3 enteros
     fmt.Println(a[0])        // imprime el primer elemento
     fmt.Println(a[len(a)-1]) // imprime el ultime elemento, a[2]

     // imprimir los indices y elementos.
     for i, v := range a {
       fmt.Printf("%d %d\n", i, v)
     }

     // imprimir solo los elementos.
     for _, v := range a {
       fmt.Printf("%d\n", v)
     }
   < src..

#    By default, the elements of a new array variable are initially set to the
#    zero value for the element type, which is 0 for numbers. We can use an
#    @e(array literal) to initialize an array with a list of values:
   Por defecto, los elementos de un nuevo arreglo de variables estan
   configurados inicialmente a el valor cero para el tipo de elemento, que es 0
   para los numeros. Podemos utilizar un @e(arreglo literal) para inicializar un
   arreglo con una lista de valores:

#    ..src > go
#      var q [3]int = [3]int{1, 2, 3}
#      var r [3]int = [3]int{1, 2}
#      fmt.Println(r[2]) // "0"
#    < src..
   ..src > go
     var q [3]int = [3]int{1, 2, 3}
     var r [3]int = [3]int{1, 2}
     fmt.Println(r[2]) // "0"
   < src..

#    In an array literal, if an ellipsis @"(@c(...)) appears in place of the
#    length, the array length is determined by the number of initializers. The
#    definition of @c(q) can be simplified to
   En un arreglo literal, si aparece una elipsis @c("...") aparece en lugar de
   la longitud, la longitud del arreglo se determina por el numero de
   inicializadores. La definicion de @c(q) se puede simplificar como

#    ..src > go
#      q := [...]int{1, 2, 3}
#      fmt.Printf("%T\n", q) // "[3]int"
#    < src..
   ..src > go
     q := [...]int{1, 2, 3}
     fmt.Printf("%T\n", q) // "[3]int"
   < src..

#    The size of an array is part of its type, so @c([3]int) and @c([4]int) are
#    different types. The size must be a constant expression, that is, an
#    expression whose value can be computed as the program is being compiled.
   El tamaño de un arreglo es parte de su tipo, por lo que @c([3]int) y
   @c([4]int) son tipos diferentes. El tamaño debe ser una expresion constante,
   es decir, una expresion cuyo valor se puede calcular a medida que se esta
   compilando el programa.

#    ..src > go
#      q := [3]int{1, 2, 3}
#      q = [4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int
#    < src..
   ..src > go
     q := [3]int{1, 2, 3}
     q = [4]int{1, 2, 3, 4} // error de compilacion: no puede asignar [4]int a [3]int
   < src..

#    As we’ll see, the literal syntax is similar for arrays, slices, maps, and
#    structs. The specific form above is a list of values in order, but it is also
#    possible to specify a list of index and value pairs, like this:
   Como veremos, la sintaxis literal es similar para arreglos, slices, mapas y
   estructuras. El formato especifico anterior es una lista de valores en
   orden, pero tambien es posible especificar una lista de pares de indice y
   valor, como aqui:

#    ..src > go
#      type Currency int
#
#      const (
#        USD Currency = iota
#        EUR
#        GBP
#        RMB
#      )
#      symbol := [...]string{USD: "$", EUR: "€", GBP: "£", RMB: "¥"}
#
#      fmt.Println(RMB, symbol[RMB]) // "3 ¥"
#    < src..
   ..src > go
     type Currency int

     const (
       USD Currency = iota
       EUR
       GBP
       RMB
     )
     symbol := [...]string{USD: "$", EUR: "€", GBP: "£", RMB: "¥"}

     fmt.Println(RMB, symbol[RMB]) // "3 ¥"
   < src..

#    In this form, indices can appear in any order and some may be omitted; as
#    before, unspecified values take on the zero value for the element type. For
#    instance,
   En esta forma, los indices pueden aparecer en cualquier orden y algunos
   pueden ser omitidos; Como antes, los valores no especificados toman el valor
   cero para el tipo de elemento. Por ejemplo,

#    ..src > go
#      r := [...]int{99: -1}
#    < src..
   ..src > go
     r := [...]int{99: -1}
   < src..

#    defines an array @c(r) with 100 elements, all zero except for the last, which
#    has value -1.
   define un arreglo @c(r) con 100 elementos, todos en cero excepto para el
   ultimo, que tiene un valor -1.

#    If an array’s element type is @e(comparable) then the array type is
#    comparable too, so we may directly compare two arrays of that type using the
#    @c(==) operator, which reports whether all corresponding elements are
#    equal. The @c(!=) operator is its negation.
   Si el tipo de los elementos de un arreglo es @e(comparable) entonces, el tipo
   del arreglo tambien es comparable, asi que podemos comparar directamente dos
   arreglos de ese tipo usando el operador @c(==), que informa de si todos los
   elementos correspondientes son iguales. El operador @c(!=) es su negacion.

#    ..src > go
#      a := [2]int{1, 2}
#      b := [...]int{1, 2}
#      c := [2]int{1, 3}
#      fmt.Println(a == b, a == c, b == c) // "true false false"
#      d := [3]int{1, 2}
#      fmt.Println(a == d) // compile error: cannot compare [2]int == [3]int
#    < src..
   ..src > go
     a := [2]int{1, 2}
     b := [...]int{1, 2}
     c := [2]int{1, 3}
     fmt.Println(a == b, a == c, b == c) // "true false false"
     d := [3]int{1, 2}
     fmt.Println(a == d) // error de compilacion: no puede comparar [2]int == [3]int
   < src..

#    As a more plausible example, the function @c(Sum256) in the @c(crypto/sha256)
#    package produces the SHA256 cryptographic hash or @e(digest) of a message
#    stored in an arbitrary byte slice. The digest has 256 bits, so its type is
#    @c([32]byte). If two digests are the same, it is extremely likely that the
#    two messages are the same; if the digests differ, the two messages are
#    different. This program prints and compares the SHA256 digests of @c("x") and
#    @c("X"):
   Como un ejemplo mas plausible, la funcion @c(Sum256) en el paquete
   @c(crypto/sha256) produce el @e(digest) o hash criptografico SHA256 o DIGEST
   de un mensaje almacenado en un slice arbitrario de bytes. El hash tiene 256
   bits, por lo que su tipo es @c([32]byte) . Si dos hash son los mismos, es muy
   probable que los dos mensajes sean iguales; Si los hash difieren, los dos
   mensajes son diferentes. Este programa imprime y compara los hash SHA256 de
   @c("x") y @c("X"):

#    ..figure > @l(gopl.io/ch4/sha256/main.go<>gopl.io/ch4/sha256)
   ..figure > @l(gopl.io/ch4/sha256/main.go<>gopl.io/ch4/sha256)

#      ..src > go
#        import "crypto/sha256"
#
#        func main() {
#          c1 := sha256.Sum256([]byte("x"))
#          c2 := sha256.Sum256([]byte("X"))
#          fmt.Printf("%x\n%x\n%t\n%T\n", c1, c2, c1 == c2, c1)
#          // Output:
#          // 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881
#          // 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015
#          // false
#          // [32]uint8
#        }
#      < src..
     ..src > go
       import "crypto/sha256"

       func main() {
         c1 := sha256.Sum256([]byte("x"))
         c2 := sha256.Sum256([]byte("X"))
         fmt.Printf("%x\n%x\n%t\n%T\n", c1, c2, c1 == c2, c1)
         // Output:
         // 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881
         // 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015
         // false
         // [32]uint8
       }
     < src..


#    The two inputs differ by only a single bit, but approximately half the bits
#    are different in the digests. Notice the @c(Printf) verbs: @c(%x) to print
#    all the elements of an array or slice of bytes in hexadecimal, @c(%t) to show
#    a boolean, and @c(%T) to display the type of a value.
   Las dos entradas difieren por un solo bit, pero aproximadamente la mitad de
   los bits son diferentes en los hash. Note las verbos @c(Printf): @c(%x) para
   imprimir todos los elementos de un arreglo o una slice de bytes en
   hexadecimal, @c(%t) para mostrar un valor booleano, y @c(%T) para mostrar el
   tipo de un valor.

#    When a function is called, a copy of each argument value is assigned to the
#    corresponding parameter variable, so the function receives a copy, not the
#    original. Passing large arrays in this way can be inefficient, and any
#    changes that the function makes to array elements affect only the copy, not
#    the original. In this regard, Go treats arrays like any other type, but this
#    behavior is different from languages that implicitly pass arrays @e(by
#    reference).
   Cuando se llama a una funcion, se asigna una copia de cada valor de argumento
   a la variable de parametro correspondiente, por lo que la funcion recibe una
   copia, no el original. Pasar grandes arreglos de esta manera puede ser
   ineficiente, y cualquier cambio que la funcion hace a elementos de arreglo
   afectan solo a la copia, no al original. En este sentido, Go trata a los
   arreglos como a cualquier otro tipo, pero este comportamiento es diferente de
   otros lenguajes que implicitamente pasan arreglos por referencia.

#    Of course, we can explicitly pass a pointer to an array so that any
#    modifications the function makes to array elements will be visible to the
#    caller. This function zeroes the contents of a @c([32]byte) array:
   Por supuesto, podemos pasar explicitamente un puntero a un arreglo para que
   cualquier modificacion que la funcion hace a los elementos del arreglo sean
   visibles para quien llama a la funcion. Esta funcion pone a cero el contenido
   de un arreglo @c([32]byte):

#    ..src > go
#      func zero(ptr *[32]byte) {
#        for i := range ptr {
#          ptr[i] = 0
#        }
#      }
#    < src..
   ..src > go
     func zero(ptr *[32]byte) {
       for i := range ptr {
         ptr[i] = 0
       }
     }
   < src..

#    The array literal @c([32]byte{}) yields an array of 32 bytes. Each element of
#    the array has the zero value for @c(byte), which is zero. We can use that
#    fact to write a different version of @c(zero):
   El arreglo literal @c([32]byte{}) produce una serie de 32 bytes. Cada
   elemento del arreglo tiene el valor cero para @c(byte), que es cero. Podemos
   utilizar este hecho para escribir una version diferente de zero:

#    ..src > go
#      func zero(ptr *[32]byte) {
#        *ptr = [32]byte{}
#      }
#    < src..
   ..src > go
     func zero(ptr *[32]byte) {
       *ptr = [32]byte{}
     }
   < src..

#    Using a pointer to an array is efficient and allows the called function to
#    mutate the caller’s variable, but arrays are still inherently inflexible
#    because of their fixed size. The @c(zero) function will not accept a pointer
#    to a @c([16]byte) variable, for example, nor is there any way to add or
#    remove array elements. For these reasons, other than special cases like
#    SHA256’s fixed-size hash, arrays are seldom used as function parameters;
#    instead, we use slices.
   El uso de un puntero a un arreglo es eficiente y permite que la funcion
   llamada mute la variable de quien la llama, pero los arreglos son
   intrinsecamente inflexibles debido a su tamaño fijo. La funcion @c(zero) no
   aceptara un puntero a una variable @c([16]byte), por ejemplo, ni hay ninguna
   manera de añadir o eliminar elementos del arreglo. Por estas razones, aparte
   de casos especiales como el hash SHA256 de tamaño fijo, rara vez se usan
   arreglos como parametros de funcion; En su lugar, utilizamos slices.

#    @b(Exercise 4.1): Write a function that counts the number of bits that are
#    different in two SHA256 hashes. (See @c(PopCount) from @l(#Section 2.6.2).)
   @b(Ejercicio 4.1): Escribir una funcion que cuente el numero de bits que son
   diferentes en dos hash SHA256. (Ver @c(PopCount) en la @l(#Seccion 2.6.2).)

#    @b(Exercise 4.2): Write a program that prints the SHA256 hash of its standard
#    input by default but supports a command-line flag to print the SHA384 or
#    SHA512 hash instead.
   @b(Ejercicio 4.2): Escribir un programa que imprima el hash SHA256 de su
   entrada estandar por defecto, pero que accepte una bandera de linea de
   comando para imprimir tambien los hash SHA384 o SHA512.

# ** Section 4.2 <> Slices
** Seccion 4.2 <> Slices

#    Slices represent variable-length sequences whose elements all have the same
#    type. A slice type is written @c([]T), where the elements have type @c(T); it
#    looks like an array type without a size.
   Los slices representan secuencias de longitud variable cuyos elementos tienen
   todos el mismo tipo. Un tipo slice se escribe @c([]T), donde los elementos
   tienen el tipo @c(T); es como un tipo arreglo pero sin un tamaño.

#    Arrays and slices are intimately connected. A slice is a lightweight data
#    structure that gives access to a subsequence (or perhaps all) of the elements
#    of an array, which is known as the slice’s @e(underlying array). A slice has
#    three components: a pointer, a length, and a capacity. The pointer points to
#    the first element of the array that is reachable through the slice, which is
#    not necessarily the array’s first element. The length is the number of slice
#    elements; it can’t exceed the capacity, which is usually the number of
#    elements between the start of the slice and the end of the underlying
#    array. The built-in functions @c(len) and @c(cap) return those values.
   Arreglos y slices estan intimamente conectados. Un slice es una estructura de
   datos ligera que da acceso a una subsecuencia de (o tal vez todos) los
   elementos de un arreglo, que se conoce como @e(arreglo subyacente) del
   slice. Una slice tiene tres componentes: un puntero, una longitud y una
   capacidad. El puntero apunta al primer elemento del arreglo que se puede
   acceder a traves del slice, que no es necesariamente el primer elemento del
   arreglo. La longitud es el numero de elementos del slice; No puede exceder la
   capacidad, que suele ser el numero de elementos entre el inicio de la
   division y el final del arreglo subyacente. Las funciones nativas @c(len) y
   @c(cap) regresan esos valores.

#    Multiple slices can share the same underlying array and may refer to
#    overlapping parts of that array. Figure 4.1 shows an array of strings for the
#    months of the year, and two overlapping slices of it. The array is declared
#    as
   Multiples slices pueden compartir el mismo arreglo subyacente y pueden
   referirse a partes superpuestas de ese arreglo. La Figura 4.1 muestra un
   arreglo de cadenas para los meses del año, y dos slices superpuestos del
   mismo. El arreglo se declara como

#    ..src > go
#      months := [...]string{1: "January", /* ... */, 12: "December"}
#    < src..
   ..src > go
     meses := [...]string{1: "Enero", /* ... */, 12: "Diciembre"}
   < src..

#    so January is @c(months[1]) and December is @c(months[12]). Ordinarily, the
#    array element at index 0 would contain the first value, but because months
#    are always numbered from 1, we can leave it out of the declaration and it
#    will be initialized to an empty string.
   asi Enero es @c(meses[1]) y Diciembre es @c(meses[12]). Normalmente, el
   elemento de arreglo en el indice 0 contendria el primer valor, pero como los
   meses siempre estan numerados apartir de 1, podemos dejarlo fuera de la
   declaracion y se inicializara en una cadena vacia.

#    ..figure > Figure 4.1. Two overlapping slices of an array of months.
   ..figure > Figura 4.1. Dos slices superpuestos de un arreglo de meses.

#      ..img > img/Figure-4.1.jpg
     ..img > img/Figure-4.1.jpg


#    The @e(slice operator) @c(s[i:j]), where @c(0) ≤ @c(i) ≤ @c(j) ≤ @c[cap(s)],
#    creates a new slice that refers to elements @c(i) through @c(j-1) of the
#    sequence @c(s), which may be an array variable, a pointer to an array, or
#    another slice. The resulting slice has @c(j-i) elements. If @c(i) is omitted,
#    it’s 0, and if @c(j) is omitted, it’s @c[len(s)]. Thus the slice
#    @c(months[1:13]) refers to the whole range of valid months, as does the slice
#    @c(months[1:]); the slice @c(months[:]) refers to the whole array. Let’s
#    define overlapping slices for the second quarter and the northern summer:
   El @e(operador de slice) @c(s[i:j]), donde @c(0) ≤ @c(i) ≤ @c(j) ≤
   @c[cap(s)], crea un nuevo segmento que se refiere a los elementos de @c(i) a
   @c(j-1) de la secuencia @c(s), que puede ser una variable del arreglo, un
   puntero a un arreglo u otra porcion. El slice resultante tiene @c(j-i)
   elementos. Si @c(i) se omite, es 0, y si @c(j) se omite, es @c[len(s)]. Asi,
   el slice @c(meses[1:13]) se refiere a toda la gama de meses validos, como lo
   hace el slice @c(meses[1:]); el slice @c(meses[:]) se refiere a todo el
   arreglo. Vamos a definir slices superpuestos para el segundo trimestre y el
   verano boreal:

#    ..src > go
#      Q2 := months[4:7]
#      summer := months[6:9]
#      fmt.Println(Q2)     // ["April" "May" "June"]
#      fmt.Println(summer) // ["June" "July" "August"]
#    < src..
   ..src > go
     Q2 := meses[4:7]
     verano := meses[6:9]
     fmt.Println(Q2)     // ["Abril" "Mayo" "Junio"]
     fmt.Println(verano) // ["Junio" "Julio" "Augosto"]
   < src..

#    June is included in each and is the sole output of this (inefficient) test
#    for common elements:
   Junio ​​se incluye en ambos y es la unica salida de esta (ineficiente) prueba
   para elementos comunes:

#    ..src > go
#      for _, s := range summer {
#        for _, q := range Q2 {
#          if s == q {
#            fmt.Printf("%s appears in both\n", s)
#          }
#        }
#      }
#    < src..
   ..src > go
     for _, s := range verano {
       for _, q := range Q2 {
         if s == q {
           fmt.Printf("%s aparece en ambos\n", s)
         }
       }
     }
   < src..

#    Slicing beyond @c[cap(s)] causes a panic, but slicing beyond @c[len(s)]
#    extends the slice, so the result may be longer than the original:
   Seccionar mas alla de @c[cap(s)] causa un panico, pero seccionar mas alla
   @c[len(s)] extiende el slice, por lo que el resultado puede ser mas largo que
   el original:

#    ..src > go
#      fmt.Println(summer[:20])    // panic: out of range
#
#      endlessSummer := summer[:5] // extend a slice (within capacity)
#      fmt.Println(endlessSummer)  // "[June July August September October]"
#    < src..
   ..src > go
     fmt.Println(verano[:20])    // panico: fuera de rango

     veranoSinFin := verano[:5] // ampliar slice (dentro de la capacidad)
     fmt.Println(veranoSinFin)  // "[Junio Julio Augosto Septiembre Octubre]"
   < src..

#    As an aside, note the similarity of the substring operation on strings to the
#    slice operator on @c([]byte) slices. Both are written @c(x[m:n]), and both
#    return a subsequence of the original bytes, sharing the underlying
#    representation so that both operations take constant time. The expression
#    @c(x[m:n]) yields a string if @c(x) is a string, or a @c([]byte) if @c(x) is
#    a @c([]byte).
   Como anotacion, tenga en cuenta la similitud de la operacion de subcadena en
   cadenas con el operador slice en slices de @c([]byte). Ambos se escriben
   @c(x[m:n]), y ambos vuelven una subsecuencia de los bytes originales,
   compartiendo la representacion subyacente de modo que ambas operaciones toman
   tiempo constante. La expresion @c(x[m:n]) produce una cadena si @c(x) es una
   cadena, o un @c([]byte) si @c(x) es un @c([]byte).

#    Since a slice contains a pointer to an element of an array, passing a slice
#    to a function permits the function to modify the underlying array
#    elements. In other words, copying a slice creates an @e(alias) (@l(#Section
#    2.3.2<>§2.3.2)) for the underlying array. The function @c(reverse) reverses
#    the elements of an @c([]int) slice in place, and it may be applied to slices
#    of any length.
   Dado que un slice contiene un puntero a un elemento de un arreglo, el paso de
   un slice a una funcion permite a la funcion modificar los elementos del
   arreglo subyacente. En otras palabras, la copia de una slice crea un alias
   (@l(#Seccion 2.3.2<>§2.3.2)) para el arreglo subyacente. La funcion
   @c(reverse) invierte los elementos de un slice @c([]int) en su lugar, y se
   puede aplicar a slices de cualquier longitud.

#    ..figure > @l(gopl.io/ch4/rev/main.go<>gopl.io/ch4/rev)
   ..figure > @l(gopl.io/ch4/rev/main.go<>gopl.io/ch4/rev)

#      ..src > go
#        // reverse reverses a slice of ints in place.
#        func reverse(s []int) {
#          for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
#            s[i], s[j] = s[j], s[i]
#          }
#        }
#      < src..
     ..src > go
       // reverse invierte un slice de enteros en su posicion.
       func reverse(s []int) {
         for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
           s[i], s[j] = s[j], s[i]
         }
       }
     < src..


#    Here we reverse the whole array a:
   Aqui invertimos todo el conjunto:

#    ..src > go
#      a := [...]int{0, 1, 2, 3, 4, 5}
#      reverse(a[:])
#      fmt.Println(a) // "[5 4 3 2 1 0]"
#    < src..
   ..src > go
     a := [...]int{0, 1, 2, 3, 4, 5}
     reverse(a[:])
     fmt.Println(a) // "[5 4 3 2 1 0]"
   < src..

#    A simple way to @e(rotate) a slice left by @m(n) elements is to apply the
#    @c(reverse) function three times, first to the leading @m(n) elements, then
#    to the remaining elements, and finally to the whole slice. (To rotate to the
#    right, make the third call first.)
   Una forma sencilla de @e(rotar) un slice a la izquierda @m(n) elementos es
   aplicar la funcion @c(reverse) tres veces, primero a los @m(n) elementos
   iniciales, luego a los elementos restantes, y finalmente a todo el slice.
   (Para rotar a la derecha, primero haga la tercer llamada.)

#    ..src > go
#      s := []int{0, 1, 2, 3, 4, 5}
#      // Rotate s left by two positions.
#      reverse(s[:2])
#      reverse(s[2:])
#      reverse(s)
#      fmt.Println(s) // "[2 3 4 5 0 1]"
#    < src..
   ..src > go
     s := []int{0, 1, 2, 3, 4, 5}
     // rotar s a la izquierda dos posiciones.
     reverse(s[:2])
     reverse(s[2:])
     reverse(s)
     fmt.Println(s) // "[2 3 4 5 0 1]"
   < src..

#    Notice how the expression that initializes the slice @c(s) differs from that
#    for the array @c(a). A @e(slice literal) looks like an array literal, a
#    sequence of values separated by commas and surrounded by braces, but the size
#    is not given. This implicitly creates an array variable of the right size and
#    yields a slice that points to it. As with array literals, slice literals may
#    specify the values in order, or give their indices explicitly, or use a mix
#    of the two styles.
   Observe como la expresion que inicializa el slice @c(s) difiere de la del
   arreglo de @c(a). Una @e(slice literal) se ve similar a un arreglo literal,
   una secuencia de valores separados por comas y rodeada por llaves, pero el
   tamaño no se proporciona. Esto crea implicitamente una variable de arreglo
   del tamaño correcto y produce una division que apunta a el. Al igual que con
   los arreglos literales, los slices literales pueden especificar los valores
   en orden, o dar sus indices explicitamente, o usar una mezcla de los dos
   estilos.

#    Unlike arrays, slices are not comparable, so we cannot use @c(==) to test
#    whether two slices contain the same elements. The standard library provides
#    the highly optimized @c(bytes.Equal) function for comparing two slices of
#    bytes (@c([]byte)), but for other types of slice, we must do the comparison
#    ourselves:
   A diferencia de los arreglos, los slices no son comparables, por lo que no
   pueden usar @c(==) para probar si dos slices contienen los mismos elementos.
   La libreria estandar proporciona la funcion @c(bytes.Equal) altamente
   optimizada para comparar dos slices de bytes (@c([]byte)), pero para otros
   tipos de slice, tenemos que hacer la comparacion nosotros mismos:

#    ..src > go
#      func equal(x, y []string) bool {
#        if len(x) != len(y) {
#          return false
#        }
#        for i := range x {
#          if x[i] != y[i] {
#            return false
#          }
#        }
#        return true
#      }
#    < src..
   ..src > go
     func equal(x, y []string) bool {
       if len(x) != len(y) {
         return false
       }
       for i := range x {
         if x[i] != y[i] {
           return false
         }
       }
       return true
     }
   < src..

#    Given how natural this @"(deep) equality test is, and that it is no more
#    costly at run time than the @c(==) operator for arrays of strings, it may be
#    puzzling that slice comparisons do not also work this way. There are two
#    reasons why deep equivalence is problematic. First, unlike array elements,
#    the elements of a slice are indirect, making it possible for a slice to
#    contain itself.  Although there are ways to deal with such cases, none is
#    simple, efficient, and most importantly, obvious.
   En vista de lo natural, que es esta prueba de igualdad de la @"(profundidad),
   y que no es mas costosa en tiempo de ejecucion que el operador @c(==) para
   arreglos de cadenas, puede ser desconcertante que la comparacion de slice no
   funcionen tambien de esta manera. Hay dos razones por las cuales la
   equivalencia de profunda es problematica. En primer lugar, a diferencia de
   los elementos del arreglo, los elementos de un slice son indirectos, lo que
   hace posible que una slice se contenga a si mismo. Aunque hay maneras de
   tratar con tales casos, ninguno es simple, eficiente, y lo mas importante,
   obvio.

#    Second, because slice elements are indirect, a fixed slice value may contain
#    different elements at different times as the contents of the underlying array
#    are modified. Because a hash table such as Go’s map type makes only shallow
#    copies of its keys, it requires that equality for each key remain the same
#    throughout the lifetime of the hash table. Deep equivalence would thus make
#    slices unsuitable for use as map keys. For reference types like pointers and
#    channels, the @c(==) operator tests @e(reference identity), that is, whether
#    the two entities refer to the same thing. An analogous @"(shallow) equality
#    test for slices could be useful, and it would solve the problem with maps,
#    but the inconsistent treatment of slices and arrays by the @c(==) operator
#    would be confusing. The safest choice is to disallow slice comparisons
#    altogether.
   En segundo lugar, debido a que los elementos del slice son indirectos, un
   valor fijo del slice puede contener diferentes elementos en momentos
   diferentes a medida que se modifican los contenidos del arreglo
   subyacente. Dado que una tabla hash como el tipo de mapa de Go solo hace
   copias poco profundas de sus claves, requiere que la igualdad para cada clave
   permanezca igual durante toda la vida de la tabla hash. La equivalencia
   profunda haria asi que los slices no fueran adecuados para ser utilizados
   como mapas de claves. Para los tipos de referencia como punteros y canales,
   el operador @c(==) prueba la @e(identidad de la referencia), es decir, si las
   dos entidades se refieren a la misma cosa. Una prueba de igualdad
   @"(superficial) similar para slices podria ser util, y resolveria el problema
   con los mapas, pero el tratamiento inconsistente de slices y arreglos por el
   operador @c(==) seria confuso. La opcion mas segura es no permitir
   comparaciones de slices por completo.

#    The only legal slice comparison is against @c(nil), as in
   La unica comparacion legal en slices es contra @c(nil), como en

#    ..src > go
#      if summer == nil { /* ... */ }
#    < src..
   ..src > go
     if summer == nil { /* ... */ }
   < src..

#    The zero value of a slice type is @c(nil). A nil slice has no underlying
#    array. The nil slice has length and capacity zero, but there are also non-nil
#    slices of length and capacity zero, such as @c([]int{}) or @c{make([]int,
#    3)[3:]}. As with any type that can have nil values, the nil value of a
#    particular slice type can be written using a conversion expression such as
#    @c{[]int(nil)}.
   El valor cero de un tipo slice es @c(nil). Un slice nil no tiene arreglo
   subyacente. El slice nil tiene longitud y capacidad cero, pero tambien hay
   slices no nulos de longitud y capacidad cero, como @c([]int{}) o
   @c{make([]int, 3)[3:]}. Como con cualquier tipo que puede tener valores
   nulos, el valor nulo de un tipo de segmento particular puede ser escrito
   utilizando una expresion de conversion como @c{[]int(nil)}.

#    ..src > go
#      var s []int    // len(s) == 0, s == nil
#      s = nil        // len(s) == 0, s == nil
#      s = []int(nil) // len(s) == 0, s == nil
#      s = []int{}    // len(s) == 0, s != nil
#    < src..
   ..src > go
     var s []int    // len(s) == 0, s == nil
     s = nil        // len(s) == 0, s == nil
     s = []int(nil) // len(s) == 0, s == nil
     s = []int{}    // len(s) == 0, s != nil
   < src..

#    So, if you need to test whether a slice is empty, use @c[len(s) == 0], not
#    @c(s == nil). Other than comparing equal to @c(nil), a nil slice behaves like
#    any other zero-length slice; @c[reverse(nil)] is perfectly safe, for
#    example. Unless clearly documented to the contrary, Go functions should treat
#    all zero-length slices the same way, whether nil or non-nil.
   Por lo tanto, si usted necesita probar si una slice esta vacio, utilice
   @c[len(s) == 0], no @c(s == nil). Ademas de comparar la igualdad con @c(nil),
   una slice nil se comporta como cualquier otro slice de longitud cero; por
   ejemplo, @c[reverse(nil)] es perfectamente seguro. A menos que se demuestre
   claramente lo contrario, las funciones de Go deben tratar todos los slices de
   longitud cero de la misma manera, sea o no nulo.

#    The built-in function @c(make) creates a slice of a specified element type,
#    length, and capacity. The capacity argument may be omitted, in which case the
#    capacity equals the length.
   La funcion nativa @c(make) crea un slice de un tipo de elemento, con longitud
   y capacidad especifico. Se puede omitir el argumento capacidad, en cuyo caso
   la capacidad es igual a la longitud.

#    ..src > go
#      make([]T, len)
#      make([]T, len, cap) // same as make([]T, cap)[:len]
#    < src..
   ..src > go
     make([]T, len)
     make([]T, len, cap) // igual que make([]T, cap)[:len]
   < src..

#    Under the hood, @c(make) creates an unnamed array variable and returns a
#    slice of it; the array is accessible only through the returned slice. In the
#    first form, the slice is a view of the entire array. In the second, the slice
#    is a view of only the array’s first @c(len) elements, but its capacity
#    includes the entire array. The additional elements are set aside for future
#    growth.
   Bajo el capo, @c(make) crea una variable de arreglo sin nombre y devuelve un
   slice de este; El arreglo es accesible solo a traves del slice devuelto. En
   la primera forma, el slice es una vista de todo el arreglo. En el segundo, el
   slice es una vista de solo los primeros @c(len) elementos, pero su capacidad
   incluye toda el arreglo arreglo. Los elementos adicionales se reservan para
   el futuro crecimiento.

# *** Section 4.2.1 <> The @c(append) Function
*** Seccion 4.2.1 <> La Funcion @c(append)

#     The built-in @c(append) function appends items to slices:
    La funcion nativa @c(append) agrega elementos a slices:

#     ..src > go
#       var runes []rune
#       for _, r := range "Hello, 世界" {
#         runes = append(runes, r)
#       }
#       fmt.Printf("%q\n", runes) // "['H' 'e' 'l' 'l' 'o' ',' ' ' 'B' 'F']"
#     < src..
    ..src > go
      var runes []rune
      for _, r := range "Hello, 世界" {
        runes = append(runes, r)
      }
      fmt.Printf("%q\n", runes) // "['H' 'e' 'l' 'l' 'o' ',' ' ' 'B' 'F']"
    < src..

#     The loop uses @c(append) to build the slice of nine runes encoded by the
#     string literal, although this specific problem is more conveniently solved
#     by using the built-in conversion @c{[]rune("Hello, 世界")}.
    El bucle utiliza @c(append) para construir el slice codificado de nueve
    runas literales, aunque este problema especifico se resuelve mas
    convenientemente mediante el uso de la conversion nativa @c{[]rune("Hello,
    世界")}.

#     The @c(append) function is crucial to understanding how slices work, so
#     let’s take a look at what is going on. Here’s a version called @c(appendInt)
#     that is specialized for @c([]int) slices:
    La funcion @c(append) es crucial para la comprension de como trabajan los
    slices, asi que vamos a echar un vistazo a lo que esta pasando. Aqui hay una
    version llamada @c(appendInt) que se especializa en slices @c([]int):

#     ..figure > @l(gopl.io/ch4/append/main.go<>gopl.io/ch4/append)
    ..figure > @l(gopl.io/ch4/append/main.go<>gopl.io/ch4/append)

#       ..src > go
#         func appendInt(x []int, y int) []int {
#           var z []int
#           zlen := len(x) + 1
#           if zlen <= cap(x) {
#             // There is room to grow.  Extend the slice.
#             z = x[:zlen]
#           } else {
#             // There is insufficient space.  Allocate a new array.
#             // Grow by doubling, for amortized linear complexity.
#             zcap := zlen
#             if zcap < 2*len(x) {
#               zcap = 2 * len(x)
#             }
#             z = make([]int, zlen, zcap)
#             copy(z, x) // a built-in function; see text
#           }
#           z[len(x)] = y
#           return z
#         }
#       < src..
      ..src > go
        func appendInt(x []int, y int) []int {
          var z []int
          zlen := len(x) + 1
          if zlen <= cap(x) {
            // Hay espacio para crecer. Extiende el slice
            z = x[:zlen]
          } else {
            // No hay suficiente espacio.  Asigna un nuevo arreglo.
            // Crecer al doble, para compenzar la complejidad lineal.
            zcap := zlen
            if zcap < 2*len(x) {
              zcap = 2 * len(x)
            }
            z = make([]int, zlen, zcap)
            copy(z, x) // a built-in function; see text
          }
          z[len(x)] = y
          return z
        }
      < src..


#     Each call to @c(appendInt) must check whether the slice has sufficient
#     capacity to hold the new elements in the existing array. If so, it extends
#     the slice by defining a larger slice (still within the original array),
#     copies the element @c(y) into the new space, and returns the slice. The
#     input @c(x) and the result @c(z) share the same underlying array.
    Cada llamada a @c(appendInt) debe comprobar si el slice tiene capacidad
    suficiente para contener los nuevos elementos en el arreglo existente. Si es
    asi, se extiende el slice mediante la definicion de una slice mas grande
    (todavia dentro de la arreglo original), copia el elemento @c(y) en el nuevo
    espacio, y devuelve el slice. La entrada @c(x) y el resultado @c(z)
    comparten el misma arreglo subyacente.

#     If there is insufficient space for growth, @c(appendInt) must allocate a new
#     array big enough to hold the result, copy the values from @c(x) into it,
#     then append the new element @c(y). The result @c(z) now refers to a
#     different underlying array than the array that @c(x) refers to.
    Si no hay suficiente espacio para el crecimiento, @c(appendInt) debe asignar
    un nueva arreglo lo suficientemente grande para contener el resultado,
    copiar los valores de @c(x) en el y, a continuacion, añadir el nuevo
    elemento @c(y). Ahora el resultado @c(z) hace referencia a un arreglo
    subyacente diferente al que referia el arreglo @c(x).

#     It would be straightforward to copy the elements with explicit loops, but
#     it’s easier to use the built-in function @c(copy), which copies elements
#     from one slice to another of the same type. Its first argument is the
#     destination and its second is the source, resembling the order of operands
#     in an assignment like @c(dst = src). The slices may refer to the same
#     underlying array ; they may even overlap. Although we don’t use it here,
#     @c(copy) returns the number of elements actually copied, which is the
#     smaller of the two slice lengths, so there is no danger of running off the
#     end or overwriting something out of range.
    Seria facil copiar los elementos con bucles explicitas, pero es mas facil
    utilizar la funcion nativa @c(copy), que copia los elementos de un slice a
    otro del mismo tipo. Su primer argumento es el destino y el segundo es la
    fuente, parecido al orden de los operandos de una asignacion como @c(dst =
    src). Los slices pueden referirse al mismo arreglo subyacente; Incluso
    pueden superponerse. Aunque no lo usamos aqui, @c(copy) devuelve el numero
    de elementos copiados realmente, que es la longitud del menor de los slices,
    por lo que no hay peligro de se acabe o sobreescriba algo fuera del rango.

#     For efficiency, the new array is usually somewhat larger than the minimum
#     needed to hold @c(x) and @c(y). Expanding the array by doubling its size at
#     each expansion avoids an excessive number of allocations and ensures that
#     appending a single element takes constant time on average.  This program
#     demonstrates the effect:
    Por eficiencia, el nueva arreglo es generalmente algo mayor que el minimo
    necesario para almacenar @c(x) y @c(y). La expandir el arreglo duplicando su
    tamaño en cada expansion evita un numero excesivo de asignaciones y asegura
    que anexar un solo elemento tome un tiempo constante en promedio. Este
    programa demuestra el efecto:

    ..src > go
      func main() {
        var x, y []int
        for i := 0; i < 10; i++ {
          y = appendInt(x, i)
          fmt.Printf("%d cap=%d\t%v\n", i, cap(y), y)
          x = y
        }
      }
    < src..

#     Each change in capacity indicates an allocation and a copy:
    Cada cambio de capacidad indica una asignacion y una copia:

#     ..pre >
#       0  cap=1     [0]
#       1  cap=2     [0 1]
#       2  cap=4     [0 1 2]
#       3  cap=4     [0 1 2 3]
#       4  cap=8     [0 1 2 3 4]
#       5  cap=8     [0 1 2 3 4 5]
#       6  cap=8     [0 1 2 3 4 5 6]
#       7  cap=8     [0 1 2 3 4 5 6 7]
#       8  cap=16    [0 1 2 3 4 5 6 7 8]
#       9  cap=16    [0 1 2 3 4 5 6 7 8 9]
#     < pre..
    ..pre >
      0  cap=1     [0]
      1  cap=2     [0 1]
      2  cap=4     [0 1 2]
      3  cap=4     [0 1 2 3]
      4  cap=8     [0 1 2 3 4]
      5  cap=8     [0 1 2 3 4 5]
      6  cap=8     [0 1 2 3 4 5 6]
      7  cap=8     [0 1 2 3 4 5 6 7]
      8  cap=16    [0 1 2 3 4 5 6 7 8]
      9  cap=16    [0 1 2 3 4 5 6 7 8 9]
    < pre..


#     Let’s take a closer look at the @c(i=3) iteration. The slice @c(x) contains
#     the three elements @c([0 1 2]) but has capacity 4, so there is a single
#     element of slack at the end, and @c(appendInt) of the element 3 may proceed
#     without reallocating. The resulting slice @c(y) has length and capacity 4, and
#     has the same underlying array as the original slice @c(x), as Figure 4.2
#     shows.
    Echemos un vistazo mas cercano a la iteracion @c(i=3). El slice @c(x)
    contiene tres elementos @c([0 1 2]), pero tiene la capacidad de 4, por lo
    que hay un solo elemento de holgura en el extremo, y agrerar el elemento 3
    procede sin reasignacion en @c(appendInt). El slice @c(y) resultante tiene
    longitud y capacidad 4, y tiene el mismo arreglo subyacente que el slice
    @c(x) original, como lo muestra la Figura 4.2.

#     ..figure > Figure 4.2. Appending with room to grow.
    ..figure > Figura 4.2. Adicion con espacio para crecer.

#       ..img > img/Figure-4.2.jpg
      ..img > img/Figure-4.2.jpg


#     On the next iteration, @c(i=4), there is no slack at all, so @c(appendInt)
#     allocates a new array of size 8, copies the four elements @c([0 1 2 3]) of
#     @c(x), and appends 4, the value of @c(i). The resulting slice @c(y) has a
#     length of 5 but a capacity of 8; the slack of 3 will save the next three
#     iterations from the need to reallocate. The slices @c(y) and @c(x) are views
#     of different arrays. This operation is depicted in Figure 4.3.
    En la siguiente iteracion, @c(i=4), no hay holgura en absoluto, por lo que
    @c(appendInt) asigna un nueva arreglo de tamaño 8, copia los cuatro
    elementos de @c(x) (@c([0 1 2 3])), y agrega 4, el valor de @c(i). El slice
    resultante @c(y) tiene una longitud de 5, pero una capacidad de 8; La
    holgura de 3 guardara las siguientes tres iteraciones. Las slices @c(y) y
    @c(x) son vistas de diferentes arreglos. Esta operacion se muestra en la
    Figura 4.3.

#     ..figure > Figure 4.3. Appending without room to grow.
    ..figure > Figura 4.3. Adicion sin crear espacio.

#       ..img > img/Figure-4.3.jpg
      ..img > img/Figure-4.3.jpg


#     The built-in @c(append) function may use a more sophisticated growth
#     strategy than @c(appendInt)’s simplistic one. Usually we don’t know whether
#     a given call to @c(append) will cause a reallocation, so we can’t assume
#     that the original slice refers to the same array as the resulting slice, nor
#     that it refers to a different one. Similarly, we must not assume that
#     operations on elements of the old slice will (or will not) be reflected in
#     the new slice. As a result, it’s usual to assign the result of a call to
#     @c(append) to the same slice variable whose value we passed to @c(append):
    La funcion nativa @c(append) puede utilizar una estrategia de crecimiento
    mas sofisticado que la simplista @c(appendInt). Por lo general, no sabemos
    si una llamada a @c(append) provocara una reasignacion, asi que no podemos
    asumir que el slice original se refiere al mismo arreglo que el slice
    resultante, ni que este se refiere a uno diferente. Del mismo modo, no
    debemos suponer que las operaciones sobre los elementos del antiguo slice se
    reflejaran (o no) en la nuevo slice. Como resultado de ello, es habitual
    asignar el resultado de una llamada a @c(append) al mismo slice cuyo valor
    pasamos a @c(append):

#     ..src > go
#       runes = append(runes, r)
#     < src..
    ..src > go
      runes = append(runes, r)
    < src..

#     Updating the slice variable is required not just when calling @c(append), but
#     for any function that may change the length or capacity of a slice or make
#     it refer to a different underlying array. To use slices correctly, it’s
#     important to bear in mind that although the elements of the underlying array
#     are indirect, the slice’s pointer, length, and capacity are not. To update
#     them requires an assignment like the one above. In this respect, slices are
#     not @"(pure) reference types but resemble an aggregate type such as this
#     struct:
    La actualizacion de la variable slice se requiere no solo al llamar a
    @c(append), sino tambien a cualquier funcion que pueda cambiar la longitud o
    la capacidad de una slice o hacer que se refiere a un arreglo subyacente
    diferente. Para usar los slices correctamente, es importante tener en cuenta
    que aunque los elementos del arreglo subyacente son indirectos, el puntero,
    la longitud y la capacidad de la slice no lo son. Para actualizarlos se
    requiere una asignacion como la anterior. En este sentido, los slices no son
    los tipos de referencia @"(puros), sino que se asemejan a un tipo de
    agregado como esta estructura:

#     ..src > go
#       type IntSlice struct {
#         ptr      *int
#         len, cap int
#       }
#     < src..
    ..src > go
      type IntSlice struct {
        ptr      *int
        len, cap int
      }
    < src..

#     Our @c(appendInt) function adds a single element to a slice, but the
#     built-in @c(append) lets us add more than one new element, or even a whole
#     slice of them.
    Nuestra funcion @c(appendInt) añade un elemento a un slice, pero el
    @c(append) nativo nos permite añadir mas de un elemento nuevo, o incluso
    todo un slice de ellos.

#     ..src > go
#       var x []int
#       x = append(x, 1)
#       x = append(x, 2, 3)
#       x = append(x, 4, 5, 6)
#       x = append(x, x...) // append the slice x
#       fmt.Println(x)      // "[1 2 3 4 5 6 1 2 3 4 5 6]"
#     < src..
    ..src > go
      var x []int
      x = append(x, 1)
      x = append(x, 2, 3)
      x = append(x, 4, 5, 6)
      x = append(x, x...) // añade el slice x
      fmt.Println(x)      // "[1 2 3 4 5 6 1 2 3 4 5 6]"
    < src..

#     With the small modification shown below, we can match the behavior of the
#     built-in @c(append).  The ellipsis @"(@c(...)) in the declaration of
#     @c(appendInt) makes the function @e(variadic): it accepts any number of
#     final arguments. The corresponding ellipsis in the call above to @c(append)
#     shows how to supply a list of arguments from a slice. We’ll explain this
#     mechanism in detail in @l(#Section 5.7).
    Con la pequeña modificacion se muestra a continuacion, podemos hacer
    coincidir el comportamiento con el @c(append) nativo. Los puntos suspensivos
    (@c("...")) en la declaracion de @c(appendInt) crean una funcion
    @e(variadic): acepta cualquier numero de argumentos finales. Los puntos
    suspensivos en la llamada @c(append) anterior muestran como suministrar una
    lista de argumentos apartir de un slice. Vamos a explicar este mecanismo en
    detalle en la @l(#Seccion 5.7).

#     ..src > go
#       func appendInt(x []int, y ...int) []int {
#         var z []int
#         zlen := len(x) + len(y)
#         // ...expand z to at least zlen...
#         copy(z[len(x):], y)
#         return z
#       }
#     < src..
    ..src > go
      func appendInt(x []int, y ...int) []int {
        var z []int
        zlen := len(x) + len(y)
        // ...expand z to at least zlen...
        copy(z[len(x):], y)
        return z
      }
    < src..

#     The logic to expand @c(z)’s underlying array remains unchanged and is not
#     shown.
    La logica para expandir el arreglo @c(z) subyacente, se mantiene sin
    cambios y no se muestra.

# *** Section 4.2.2 <> In-Place Slice Techniques
*** Seccion 4.2.2 <> Tecnicas de Slices In Situ

#     Let’s see more examples of functions that, like @c(rotate) and @c(reverse),
#     modify the elements of a slice in place. Given a list of strings, the
#     @c(nonempty) function returns the non-empty ones:
    Veamos mas ejemplos de funciones que, como @c(rotate) y @c(reverse), modifican
    los elementos de un slice en su lugar. Dada una lista de cadenas, la
    funcion @c(nonempty) devuelve las que no estan vacias:

#     ..figure > @l(gopl.io/ch4/nonempty/main.go<>gopl.io/ch4/nonempty)
    ..figure > @l(gopl.io/ch4/nonempty/main.go<>gopl.io/ch4/nonempty)

#       ..src > go
#         // Nonempty is an example of an in-place slice algorithm.
#         package main
#
#         import "fmt"
#
#         // nonempty returns a slice holding only the non-empty strings.
#         // The underlying array is modified during the call.
#         func nonempty(strings []string) []string {
#           i := 0
#           for _, s := range strings {
#             if s != "" {
#               strings[i] = s
#               i++
#             }
#           }
#           return strings[:i]
#         }
#       < src..
      ..src > go
        // Nonempty es un ejemplo de algoritmo in situ.
        package main

        import "fmt"

        // nonempty regresa un slice que contiene solo las cadenas no vacias.
        // El arreglo subyacente se modifica durante la llamada.
        func nonempty(strings []string) []string {
          i := 0
          for _, s := range strings {
            if s != "" {
              strings[i] = s
              i++
            }
          }
          return strings[:i]
        }
      < src..


#     The subtle part is that the input slice and the output slice share the same
#     underlying array.  This avoids the need to allocate another array, though of
#     course the contents of @c(data) are partly overwritten, as evidenced by the
#     second print statement:
    La parte sutil es que la porcion de entrada y la porcion de salida comparten
    el mismo arreglo subyacente. Esto evita la necesidad de asignar otro
    arreglo, aunque por supuesto los contenidos de datos se sobrescriben en
    parte, como se evidencia por la segunda instruccion de impresion:

#     ..src > go
#       data := []string{"one", "", "three"}
#       fmt.Printf("%q\n", nonempty(data)) // `["one" "three"]`
#       fmt.Printf("%q\n", data)           // `["one" "three" "three"]`
#     < src..
    ..src > go
      data := []string{"uno", "", "tres"}
      fmt.Printf("%q\n", nonempty(data)) // `["uno" "tres"]`
      fmt.Printf("%q\n", data)           // `["uno" "tres" "tres"]`
    < src..

#     Thus we would usually write: @c[data = nonempty(data)].
    Por lo tanto normalmente escribe: @c[data = nonempty(data)].

#     The @c(nonempty) function can also be written using @c(append):
    La funcion @c(nonempty) tambien se puede escribir utilizando @c(append):

#     ..src > go
#       func nonempty2(strings []string) []string {
#         out := strings[:0] // zero-length slice of original
#         for _, s := range strings {
#           if s != "" {
#             out = append(out, s)
#           }
#         }
#         return out
#       }
#     < src..
    ..src > go
      func nonempty2(strings []string) []string {
        out := strings[:0] // slice del original con longitud cero
        for _, s := range strings {
          if s != "" {
            out = append(out, s)
          }
        }
        return out
      }
    < src..

#     Whichever variant we use, reusing an array in this way requires that at most
#     one output value is produced for each input value, which is true of many
#     algorithms that filter out elements of a sequence or combine adjacent
#     ones. Such intricate slice usage is the exception, not the rule, but it can
#     be clear, efficient, and useful on occasion.
    Cualquiera que sea la variante que utilicemos, la reutilizacion de un
    arreglo de este modo requiere que se produzca como maximo un valor de salida
    para cada valor de entrada, lo que es cierto para muchos algoritmos que
    filtran elementos de una secuencia o combinan elementos adyacentes. Este uso
    intrincado de un slice es la excepcion, no la regla, pero puede ser clara,
    eficiente y util en ocasiones.

#     A slice can be used to implement a stack. Given an initially empty slice
#     @c(stack), we can push a new value onto the end of the slice with
#     @c(append):
    Se puede usar un slice para implementar una pila. Dada que tenemos un slice
    vacio @c(stack), podemos empujar un nuevo valor en el extremo del slice con
    @c(append):

#     ..src > go
#       stack = append(stack, v) // push v
#     < src..
    ..src > go
      stack = append(stack, v) // push v
    < src..

#     The top of the stack is the last element:
    La parte superior del stack es el ultimo elemento:

#     ..src > go
#       top := stack[len(stack)-1] // top of stack
#     < src..
    ..src > go
      top := stack[len(stack)-1] // parte superior del stack
    < src..

#     and shrinking the stack by popping that element is
    y para  sacar el elemento del stack es

#     ..src > go
#       stack = stack[:len(stack)-1] // pop
#     < src..
    ..src > go
      stack = stack[:len(stack)-1] // sacar
    < src..

#     To remove an element from the middle of a slice, preserving the order of the
#     remaining elements, use @c(copy) to slide the higher-numbered elements down
#     by one to fill the gap:
    Para eliminar un elemento a la mitad de una slice, preservando el orden de
    los elementos restantes, utilice @c(copy) para deslizar los elementos de
    numeros mas altos hacia abajo por uno, para llenar el hueco:

#     ..src > go
#       func remove(slice []int, i int) []int {
#         copy(slice[i:], slice[i+1:])
#         return slice[:len(slice)-1]
#       }
#       func main() {
#         s := []int{5, 6, 7, 8, 9}
#         fmt.Println(remove(s, 2)) // "[5 6 8 9]"
#       }
#     < src..
    ..src > go
      func remove(slice []int, i int) []int {
        copy(slice[i:], slice[i+1:])
        return slice[:len(slice)-1]
      }
      func main() {
        s := []int{5, 6, 7, 8, 9}
        fmt.Println(remove(s, 2)) // "[5 6 8 9]"
      }
    < src..

#     And if we don’t need to preserve the order, we can just move the last
#     element into the gap:
    Y si no necesitamos preservar el orden, podemos solo mover el ultimo
    elemento al hueco:

#     ..src > go
#       func remove(slice []int, i int) []int {
#         slice[i] = slice[len(slice)-1]
#         return slice[:len(slice)-1]
#       }
#       func main() {
#         s := []int{5, 6, 7, 8, 9}
#         fmt.Println(remove(s, 2)) // "[5 6 9 8]
#       }
#     < src..
    ..src > go
      func remove(slice []int, i int) []int {
        slice[i] = slice[len(slice)-1]
        return slice[:len(slice)-1]
      }
      func main() {
        s := []int{5, 6, 7, 8, 9}
        fmt.Println(remove(s, 2)) // "[5 6 9 8]
      }
    < src..

#     @b(Exercise 4.3): Rewrite @c(reverse) to use an array pointer instead of a
#     slice.
   @b(Ejercicio 4.3): Reescribir @c(reverse) para utilizar un puntero a
   un arreglo en lugar de un slice.

#     @b(Exercise 4.4): Write a version of @c(rotate) that operates in a single
#     pass.
   @b(Ejercicio 4.4): Escribir una version de @c(rotate) que opere en una sola
   pasada.

#     @b(Exercise 4.5): Write an in-place function to eliminate adjacent
#     duplicates in a @c([]string) slice.
   @b(Ejercicio 4.5): Escribir una funcion in situ para eliminar duplicados
   adyacentes en una slice @c([]string).

#     @b(Exercise 4.6): Write an in-place function that squashes each run of
#     adjacent Unicode spaces (see @c(unicode.IsSpace)) in a UTF-8-encoded
#     @c([]byte) slice into a single ASCII space.
   @b(Ejercicio 4.6): Escribir una funcion in situ que aplaste cada sequencia
   Unicode de espacios adyacentes (ver @c(unicode.IsSpace)) en un slice
   @c([]byte) codificado en UTF-8 en solo espacio ASCII.

#     @b(Exercise 4.7): Modify @c(reverse) to reverse the characters of a
#     @c([]byte) slice that represents a UTF-8-encoded string, in place. Can you
#     do it without allocating new memory?
   @b(Ejercicio 4.7): Modificar @c(reverse) para invertir in situ los caracteres
   de una slice @c([]byte) que represente una cadena codificado en
   UTF-8. ¿Puedes hacerlo sin asignar nueva memoria?

# ** Section 4.3 <> Maps
** Seccion 4.3 <> Mapas

#    The hash table is one of the most ingenious and versatile of all data
#    structures. It is an unordered collection of key/value pairs in which all the
#    keys are distinct, and the value associated with a given key can be
#    retrieved, updated, or removed using a constant number of key comparisons on
#    the average, no matter how large the hash table.
   La tabla hash es una de las mas ingeniosas y versatiles de todas las
   estructuras de datos. Es una coleccion desordenada de pares clave/valor en la
   que todas las claves son distintas, y el valor asociado con una clave dada
   puede ser recuperado, actualizado o eliminado, usando un numero constante de
   comparaciones clave en promedio, no importa cuan grande sea el tamaño de la
   tabla hash.

#    In Go, a @e(map) is a reference to a hash table, and a map type is written
#    @c(map[K]V), where @c(K) and @c(V) are the types of its keys and values. All
#    of the keys in a given map are of the same type, and all of the values are of
#    the same type, but the keys need not be of the same type as the values. The
#    key type @c(K) must be comparable using @c(==), so that the map can test
#    whether a given key is equal to one already within it. Though floating-point
#    numbers are comparable, it’s a bad idea to compare floats for equality and,
#    as we mentioned in @l(#Chapter 3), especially bad if NaN is a possible
#    value. There are no restrictions on the value type @c(V).
   En Go, un @e(mapa) es una referencia a una tabla hash, y un tipo de mapa se
   escribe como @c(map[K]V), en donde @c(K) y @c(V) son los tipos de sus claves
   y valores. Todas las claves en un mapa son del mismo tipo, y todos los
   valores son del mismo tipo, pero las claves no necesitan ser del mismo tipo
   que los valores. El tipo de clave @c(K) debe ser comparable usando @c(==), de
   modo que el mapa puede probar si una clave dada es igual a una que ya esta
   dentro de ell. Aunque los numeros de punto flotante son comparables, es una
   mala idea comparar floats por igualdad y, como mencionamos en el @l(#Capitulo
   3), es especialmente malo si NaN es un valor posible. No hay restricciones
   sobre el tipo de valor @c(V).

#    The built-in function @c(make) can be used to create a map:
   Se puede utilizar la funcion nativa @c(make) para crear un mapa:

#    ..src > go
#      ages := make(map[string]int) // mapping from strings to ints
#    < src..
   ..src > go
     edades := make(map[string]int) // mapeo de cadenas a ints
   < src..

#    We can also use a @e(map literal) to create a new map populated with some
#    initial key/value pairs:
   Tambien podemos usar un @e(mapa literal) para crear un nuevo mapa poblada con
   algunos pares iniciales clave/valor:

#    ..src > go
#      ages := map[string]int{
#        "alice":   31,
#        "charlie": 34,
#      }
#    < src..
   ..src > go
     edades := map[string]int{
       "alice":   31,
       "charlie": 34,
     }
   < src..

#    This is equivalent to
   Esto es equivalente a

#    ..src > go
#      ages := make(map[string]int)
#      ages["alice"] = 31
#      ages["charlie"] = 34
#    < src..
   ..src > go
     edades := make(map[string]int)
     edades["alice"] = 31
     edades["charlie"] = 34
   < src..

#    so an alternative expression for a new empty map is @c(map[string]int{}).
   por lo que una expresion alternativa para un nuevo mapa vacio es
   @c(map[string]int{}).

#    Map elements are accessed through the usual subscript notation:
   Los elementos del mapa se acceden a traves de la notacion de subindice usual:

#    ..src > go
#      ages["alice"] = 32
#      fmt.Println(ages["alice"]) // "32"
#    < src..
   ..src > go
     edades["alice"] = 32
     fmt.Println(edades["alice"]) // "32"
   < src..

#    and removed with the built-in function @c(delete):
   y se remueve con la funcion nativa @c(delete):

#    ..src > go
#      delete(ages, "alice") // remove element ages["alice"]
#    < src..
   ..src > go
     delete(edades, "alice") // remover elemento ages["alice"]
   < src..

#    All of these operations are safe even if the element isn’t in the map; a map
#    lookup using a key that isn’t present returns the zero value for its type,
#    so, for instance, the following works even when @c("bob") is not yet a key in
#    the map because the value of @c(ages["bob"]) will be @c(0).
   Todas estas operaciones son seguras incluso si el elemento no esta en el
   mapa; una busqueda en el mapa utulizando una clave que no esta presente
   devuelve el valor cero para su tipo, por ejemplo, lo siguiente funciona
   incluso cuando @c("bob") aun no es una clave en el mapa, por lo que el valor
   de @c(edades["bob"]) sera 0.

#    ..src > go
#      ages["bob"] = ages["bob"] + 1 // happy birthday!
#    < src..
   ..src > go
     edades["bob"] = edades["bob"] + 1 // feliz cumpleaños!
   < src..

#    The shorthand assignment forms @c(x += y) and @c(x++) also work for map
#    elements, so we can rewrite the statement above as
   Las formas de asignacion abreviada @c(x += y) y @c(x++) tambien funcionan
   para elementos del mapa, asi que podemos rescribir la sentencia anterior como

#    ..src > go
#      ages["bob"] += 1
#    < src..
   ..src > go
     edades["bob"] += 1
   < src..

#    or even more concisely as
   O incluso mas conciso como

#    ..src > go
#      ages["bob"]++
#    < src..
   ..src > go
     edades["bob"]++
   < src..

#    But a map element is not a variable, and we cannot take its address:
   Pero un elemento del mapa no es una variable, y no podemos tomar su
   direccion:

#    ..src > go
#      _ = &ages["bob"] // compile error: cannot take address of map element
#    < src..
   ..src > go
     _ = &ages["bob"] // error de compilacion: no puede tomar la direccion del elemento mapa
   < src..

#    One reason that we can’t take the address of a map element is that growing a
#    map might cause rehashing of existing elements into new storage locations,
#    thus potentially invalidating the address.
   Una de las razones por las que no podemos tomar la direccion de un elemento
   de un mapa es que el crecimiento de un mapa podria provocar la reorganizacion
   de elementos existentes en nuevas ubicaciones de almacenamiento, lo que
   podria invalidar la direccion.

#    To enumerate all the key/value pairs in the map, we use a @c(range)-based
#    @c(for) loop similar to those we saw for slices. Successive iterations of the
#    loop cause the @c(name) and @c(age) variables to be set to the next key/value
#    pair:
   Para enumerar todos los pares clave/valor en el mapa, se utiliza un bucle
   @c(for) basado en @c(range) similar al que vimos para los slices. Las
   iteraciones sucesivas del bucle hacen que las variables @c(name) y @c(age) se
   establecen en el siguiente par clave/valor:

#    ..src > go
#      for name, age := range ages {
#        fmt.Printf("%s\t%d\n", name, age)
#      }
#    < src..
   ..src > go
     for nombre, edad := range edades {
       fmt.Printf("%s\t%d\n", nombre, edad)
     }
   < src..

#    The order of map iteration is unspecified, and different implementations
#    might use a different hash function, leading to a different ordering. In
#    practice, the order is random, varying from one execution to the next. This
#    is intentional; making the sequence vary helps force programs to be robust
#    across implementations. To enumerate the key/value pairs in order, we must
#    sort the keys explicitly, for instance, using the @c(Strings) function from
#    the @c(sort) package if the keys are strings. This is a common pattern:
   El orden de iteracion del mapa no se especifica, y las diferentes
   implementaciones pueden utilizar una funcion de hash diferente, lo que
   conduce a un orden diferente. En la practica, el orden es aleatorio, variando
   de una ejecucion a la siguiente. Esto es intencional; Haciendo que la
   secuencia varie ayuda a obligar a los programas a ser robustos en todas las
   implementaciones. Para enumerar los pares clave/valor en orden, hay que
   ordenar las claves de forma explicita, por ejemplo, mediante la funcion
   @c(Strings) del paquete @c(sort) si las claves son cadenas. Este es un patron
   comun:

#    ..src > go
#      import "sort"
#
#      var names []string
#      for name := range ages {
#        names = append(names, name)
#      }
#      sort.Strings(names)
#      for _, name := range names {
#        fmt.Printf("%s\t%d\n", name, ages[name])
#      }
#    < src..
   ..src > go
     import "sort"

     var nombres []string
     for nombre := range edades {
       nombres = append(nombres, nombre)
     }

     sort.Strings(nombres)
     for _, nombre := range nombres {
       fmt.Printf("%s\t%d\n", nombre, edades[nombre])
     }
   < src..

#    Since we know the final size of @c(names) from the outset, it is more
#    efficient to allocate an array of the required size up front. The statement
#    below creates a slice that is initially empty but has sufficient capacity to
#    hold all the keys of the @c(ages) map:
   Dado que sabemos el tamaño final de nombres desde el principio, es mas
   eficiente asignar un arreglo del tamaño requerido por adelantado. La
   siguiente declaracion crea un slice que esta inicialmente vacio, pero tiene
   la capacidad suficiente para contener todas las llaves del mapa @e(edades):

#    ..src > go
#      names := make([]string, 0, len(ages))
#    < src..
   ..src > go
     nombres := make([]string, 0, len(edades))
   < src..

#    In the first @c(range) loop above, we require only the keys of the @c(ages)
#    map, so we omit the second loop variable. In the second loop, we require only
#    the elements of the @c(names) slice, so we use the blank identifier @c(_) to
#    ignore the first variable, the index.
   En el primer @c(range) del bucle anterior, solo necesitamos las llaves claves
   del mapa @c(edades), por lo que se omite la segunda variable de bucle. En el
   segundo bucle, se requieren solo los elementos del slice @c(nombres), por lo
   que se utiliza el identificador en blanco @c(_) para ignorar la primer
   variable, el indice.

#    The zero value for a map type is @c(nil), that is, a reference to no hash
#    table at all.
   El valor cero para el tipo de un mapa es @c(nil), es decir, una referencia a
   ninguna tabla hash en absoluto.

#    ..src > go
#      var ages map[string]int
#      fmt.Println(ages == nil)    // "true"
#      fmt.Println(len(ages) == 0) // "true"
#    < src..
   ..src > go
     var edades map[string]int
     fmt.Println(edades == nil)    // "true"
     fmt.Println(len(edades) == 0) // "true"
   < src..

#    Most operations on maps, including lookup, @c(delete), @c(len), and @c(range)
#    loops, are safe to perform on a nil map reference, since it behaves like an
#    empty map. But storing to a nil map causes a panic:
   La mayoria de las operaciones en los mapas, incluyendo las operaciones de
   busqueda, @c(delete), @c(len) y bucles @c(range), son seguros para llevar a
   cabo en un mapa de referencia a @c(nil), ya que se comporta como un mapa
   vacio. Pero almacenar en un mapa nil provoca un panico:

#    ..src > go
#      ages["carol"] = 21 // panic: assignment to entry in nil map
#    < src..
   ..src > go
     ages["carol"] = 21 // panic: assignment to entry in nil map
   < src..

#    You must allocate the map before you can store into it.
   Debe asignar el mapa antes de poder almacenarlo.

#    Accessing a map element by subscripting always yields a value. If the key is
#    present in the map, you get the corresponding value; if not, you get the zero
#    value for the element type, as we saw with @c(ages["bob"]). For many purposes
#    that’s fine, but sometimes you need to know whether the element was really
#    there or not. For example, if the element type is numeric, you might have to
#    distinguish between a nonexistent element and an element that happens to have
#    the value zero, using a test like this:
   El acceso a un elemento de un mapa mediante subindice siempre produce un
   valor. Si la clave esta presente en el mapa, se obtiene el valor
   correspondiente; si no, se obtiene el valor cero para el tipo de elemento,
   como hemos visto con @c(edades["bob"]). Para muchos propositos eso esta bien,
   pero a veces necesitas saber si el elemento estaba realmente ahi o no. Por
   ejemplo, si el tipo de elemento es numerico, es posible que tenga que
   distinguir entre un elemento inexistente y un elemento que tiene el valor
   cero, mediante una prueba como esta:

#    ..src > go
#      age, ok := ages["bob"]
#      if !ok { /* "bob" is not a key in this map; age == 0. */ }
#    < src..
   ..src > go
     edad, ok := edades["bob"]
     if !ok { /* "bob" no es una clave en este mapa; edad == 0. */ }
   < src..

#    You’ll often see these two statements combined, like this:
   A menudo vera estas dos afirmaciones combinadas, como aqui:

#    ..src > go
#      if age, ok := ages["bob"]; !ok { /* ... */ }
#    < src..
   ..src > go
     if age, ok := ages["bob"]; !ok { /* ... */ }
   < src..

#    Subscripting a map in this context yields two values; the second is a boolean
#    that reports whether the element was present. The boolean variable is often
#    called @c(ok), especially if it is immediately used in an @c(if) condition.
   El subindice de un mapa en este contexto produce dos valores; El segundo es
   un booleano que informa si el elemento estaba presente. La variable booleana
   a menudo se denomina @c(ok), especialmente si se utiliza inmediatamente en
   una condicion @c(if).

#    As with slices, maps cannot be compared to each other; the only legal
#    comparison is with @c(nil). To test whether two maps contain the same keys
#    and the same associated values, we must write a loop:
   Como con los slices, los mapas no pueden ser compararse uno con otro; la
   unica comparacion legal es con @c(nil). Para probar si dos mapas contienen
   las mismas claves y los mismos valores asociados, debemos escribir un bucle:

#    ..src > go
#      func equal(x, y map[string]int) bool {
#        if len(x) != len(y) {
#          return false
#        }
#        for k, xv := range x {
#          if yv, ok := y[k]; !ok || yv != xv {
#            return false
#          }
#        }
#        return true
#      }
#    < src..
   ..src > go
     func equal(x, y map[string]int) bool {
       if len(x) != len(y) {
         return false
       }
       for k, xv := range x {
         if yv, ok := y[k]; !ok || yv != xv {
           return false
         }
       }
       return true
     }
   < src..

#    Observe how we use @c(!ok) to distinguish the @"(missing) and @"(present but
#    zero) cases. Had we naïvely written @c(xv != y[k]), the call below would
#    incorrectly report its arguments as equal:
   Observe como se utiliza @c(!ok) para distinguir los casos @"(que faltan) y
   los @"(presentes, pero en cero). Si hubieramos escrito ingenuamente @c(xv !=
   y[k]), la llamada de abajo reportaria incorrectamente sus argumentos como
   iguales:

#    ..src > go
#      // True if equal is written incorrectly.
#      equal(map[string]int{"A": 0}, map[string]int{"B": 42})
#    < src..
   ..src > go
     // Verdadero si equal esta escrito incorrectamente.
     equal(map[string]int{"A": 0}, map[string]int{"B": 42})
   < src..

#    Go does not provide a @c(set) type, but since the keys of a map are distinct,
#    a map can serve this purpose. To illustrate, the program @$(dedup) reads a
#    sequence of lines and prints only the first occurrence of each distinct
#    line. (It’s a variant of the @$(dup) program that we showed in @l(#Section
#    1.3).)  The @$(dedup) program uses a map whose keys represent the set of
#    lines that have already appeared to ensure that subsequent occurrences are
#    not printed.
   Go no proporciona un tipo @c(set), pero ya que las claves de un mapa son
   distintas, un mapa puede servir a este proposito. Para ilustrarlo, el
   programa @$(dedup) lee una secuencia de lineas e imprime solo la primera
   ocurrencia de cada linea distinta. (Es una variante del programa @$(dup) que
   mostramos en la @l(#Seccion 1.3)). El programa @$(dedup) utiliza un mapa
   cuyas claves representan el conjunto de lineas que ya han aparecido para
   asegurar que las ocurrencias posteriores no se impriman.

#    ..figure > @l(gopl.io/ch4/dedup/main.go<>gopl.io/ch4/dedup)
   ..figure > @l(gopl.io/ch4/dedup/main.go<>gopl.io/ch4/dedup)

#      ..src > go
#        func main() {
#          seen := make(map[string]bool) // a set of strings
#          input := bufio.NewScanner(os.Stdin)
#          for input.Scan() {
#            line := input.Text()
#            if !seen[line] {
#              seen[line] = true
#              fmt.Println(line)
#            }
#          }
#
#          if err := input.Err(); err != nil {
#            fmt.Fprintf(os.Stderr, "dedup: %v\n", err)
#            os.Exit(1)
#          }
#        }
#      < src..
     ..src > go
       func main() {
         consulta := make(map[string]bool) // un conjunto de cadenas
         entrada  := bufio.NewScanner(os.Stdin)
         for entrada.Scan() {
           linea := input.Text()
           if !consulta[linea] {
             consulta[linea] = true
             fmt.Println(linea)
           }
         }

         if err := entrada.Err(); err != nil {
           fmt.Fprintf(os.Stderr, "dedup: %v\n", err)
           os.Exit(1)
         }
       }
     < src..


#    Go programmers often describe a map used in this fashion as a @"(set of
#    strings) without further ado, but beware, not all @c(map[string]bool) values
#    are simple sets; some may contain both @c(true) and @c(false) values.
   Los programadores de Go a menudo describen un mapa de esta manera
   utilizandolo como un @"(conjunto de cadenas) sin mas preambulos, pero
   cuidado, no todo los valores @c(map[string]bool) son conjuntos simples;
   algunos pueden contener valores tanto @c(true) y @c(false).

#    Sometimes we need a map or set whose keys are slices, but because a map’s
#    keys must be comparable, this cannot be expressed directly. However, it can
#    be done in two steps. First we define a helper function @c(k) that maps each
#    key to a string, with the property that @c[k(x) == k(y)] if and only if we
#    consider @c(x) and @c(y) equivalent. Then we create a map whose keys are
#    strings, applying the helper function to each key before we access the map.
   A veces necesitamos un mapa o conjunto cuyas claves sean slices, pero ya que
   las claves de un mapa deben ser comparables, esto se no puede expresar
   directamente. Sin embargo, se puede hacer en dos pasos. Primero definimos una
   funcion auxiliar @c(k) que mapea cada clave en una cadena, con la
   caracteristica que @c[k(x) == k(y)] si y solo si consideramos @c(x) e @c(y)
   equivalentes. Luego creamos un mapa cuyas claves son cadenas, aplicando la
   funcion auxiliar a cada clave antes de acceder al mapa.

#    The example below uses a map to record the number of times @c(Add) has been
#    called with a given list of strings. It uses @c(fmt.Sprintf) to convert a
#    slice of strings into a single string that is a suitable map key, quoting
#    each slice element with @c(%q) to record string boundaries faithfully:
   El siguiente ejemplo utiliza un mapa para registrar el numero de veces que se
   ha llamado a @c(Add) con una lista dada de cadenas. Utiliza @c(fmt.Sprintf)
   para convertir un slice de cadenas en una sola cadena que es una clave de
   mapa adecuada, citando cada elemento del slice con @c(%q) para registrar los
   limites de las cadena fielmente:

#    ..src > go
#      var m = make(map[string]int)
#
#      func k(list []string) string  { return fmt.Sprintf("%q", list) }
#
#      func Add(list []string)       { m[k(list)]++ }
#      func Count(list []string) int { return m[k(list)] }
#    < src..
   ..src > go
     var m = make(map[string]int)

     func k(list []string) string  { return fmt.Sprintf("%q", list) }

     func Add(list []string)       { m[k(list)]++ }
     func Count(list []string) int { return m[k(list)] }
   < src..

#    The same approach can be used for any non-comparable key type, not just
#    slices. It’s even useful for comparable key types when you want a definition
#    of equality other than @c(==), such as case-insensitive comparisons for
#    strings. And the type of @c[k(x)] needn’t be a string; any comparable type
#    with the desired equivalence property will do, such as integers, arrays, or
#    structs.
   El mismo enfoque se puede utilizar para cualquier tipo de clave no
   comparable, no solo para slices. Incluso es util para este tipo de claves
   comparables cuando se desea una definicion de igualdad distinta de @c(==),
   como comparaciones entre mayusculas y minusculas para cadenas. Y el tipo de
   @c[k(x)] no necesita ser una cadena; Cualquier tipo comparable con la
   propiedad de equivalencia deseada lo hara, como enteros, arreglos o
   estructuras.

#    Here’s another example of maps in action, a program that counts the
#    occurrences of each distinct Unicode code point in its input. Since there are
#    a large number of possible characters, only a small fraction of which would
#    appear in any particular document, a map is a natural way to keep track of
#    just the ones that have been seen and their corresponding counts.
   Aqui hay otro ejemplo de mapas en accion, un programa que cuenta las
   apariciones de cada punto de codigo Unicode distinto en su entrada. Puesto
   que hay un gran numero de caracteres posibles, solo una pequeña fraccion de
   ellos aparecera en cualquier documento en particular, un mapa es una manera
   natural de hacer un seguimiento de solo los que se han visto y su conteo
   correspondiente.

#    ..figure > @l(gopl.io/ch4/charcount/main.go<>gopl.io/ch4/charcount)
   ..figure > @l(gopl.io/ch4/charcount/main.go<>gopl.io/ch4/charcount)

#      ..src > go
#        // Charcount computes counts of Unicode characters.
#        package main
#
#        import (
#          "bufio"
#          "fmt"
#          "io"
#          "os"
#          "unicode"
#          "unicode/utf8"
#        )
#
#        func main() {
#          counts := make(map[rune]int)    // counts of Unicode characters
#          var utflen [utf8.UTFMax + 1]int // count of lengths of UTF-8 encodings
#          invalid := 0                    // count of invalid UTF-8 characters
#
#          in := bufio.NewReader(os.Stdin)
#          for {
#            r, n, err := in.ReadRune()    // returns rune, nbytes, error
#            if err == io.EOF {
#              break
#            }
#            if err != nil {
#              fmt.Fprintf(os.Stderr, "charcount: %v\n", err)
#              os.Exit(1)
#            }
#            if r == unicode.ReplacementChar && n == 1 {
#              invalid++
#              continue
#            }
#            counts[r]++
#            utflen[n]++
#          }
#          fmt.Printf("rune\tcount\n")
#          for c, n := range counts {
#            fmt.Printf("%q\t%d\n", c, n)
#          }
#          fmt.Print("\nlen\tcount\n")
#          for i, n := range utflen {
#            if i > 0 {
#              fmt.Printf("%d\t%d\n", i, n)
#            }
#          }
#          if invalid > 0 {
#            fmt.Printf("\n%d invalid UTF-8 characters\n", invalid)
#          }
#        }
#      < src..
     ..src > go
       // Charcount calcula la cuenta de caracteres Unicode.
       package main

       import (
         "bufio"
         "fmt"
         "io"
         "os"
         "unicode"
         "unicode/utf8"
       )

       func main() {
         counts := make(map[rune]int)    // cuenta de caracteres Unicode
         var utflen [utf8.UTFMax + 1]int // cuenta de longitudes de codificaciones UTF-8
         invalid := 0                    // cuenta de caracteres UTF-8 invalidos

         in := bufio.NewReader(os.Stdin)
         for {
           r, n, err := in.ReadRune()    // regresa runa, nbytes, error
           if err == io.EOF {
             break
           }
           if err != nil {
             fmt.Fprintf(os.Stderr, "charcount: %v\n", err)
             os.Exit(1)
           }
           if r == unicode.ReplacementChar && n == 1 {
             invalid++
             continue
           }
           counts[r]++
           utflen[n]++
         }
         fmt.Printf("rune\tcount\n")
         for c, n := range counts {
           fmt.Printf("%q\t%d\n", c, n)
         }
         fmt.Print("\nlen\tcount\n")
         for i, n := range utflen {
           if i > 0 {
             fmt.Printf("%d\t%d\n", i, n)
           }
         }
         if invalid > 0 {
           fmt.Printf("\n%d invalid UTF-8 characters\n", invalid)
         }
       }
     < src..


#    The @c(ReadRune) method performs UTF-8 decoding and returns three values: the
#    decoded rune, the length in bytes of its UTF-8 encoding, and an error
#    value. The only error we expect is end-of-file. If the input was not a legal
#    UTF-8 encoding of a rune, the returned rune is @c(unicode.ReplacementChar)
#    and the length is 1.
   El metodo @c(ReadRune) realiza la decodificacion UTF-8 y devuelve tres
   valores: la runa decodificada, la longitud en bytes de su codificacion UTF-8,
   y un valor de error. El unico error que esperamos es el fin de archivo. Si la
   entrada no era la codificacion UTF-8 legal de una runa, la runa devuelta es
   @c(unicode.ReplacementChar) y la su longitud es 1.

#    The @$(charcount) program also prints a count of the lengths of the UTF-8
#    encodings of the runes that appeared in the input. A map is not the best data
#    structure for that; since encoding lengths range only from 1 to @c(utf8.UTFMax)
#    (which has the value 4), an array is more compact.
   El programa @$(charcount) tambien imprime un recuento de las longitudes de
   las codificaciones UTF-8 de las runas que aparecieron en la entrada. Un mapa
   no es la mejor estructura de datos para eso; ya que las longitudes de
   codificacion varian solo de 1 a utf8.UTFMax (que tiene el valor 4), un
   arreglo es mas compacto.

#    As an experiment, we ran @$(charcount) on this book itself at one
#    point. Although it’s mostly in English, of course, it does have a fair number
#    of non-ASCII characters. Here are the top ten:
   Como un experimento, en un momento ejecutamos @$(charcount). Aunque
   (originalmente) esta principalmente en Ingles, por supuesto, tiene un buen
   numero de caracteres no ASCII. Aqui estan los diez primeros:

#    ..pre >
#      ° 27 世 15 界 14 é 13 ˣ 10 ≤ 5 × 5 𢉩 4 � 4 □ 3
   ..pre >
     ° 27 世 15 界 14 é 13 ˣ 10 ≤ 5 × 5 𢉩 4 � 4 □ 3

#    and here is the distribution of the lengths of all the UTF-8 encodings:
   Y aqui esta la distribucion de las longitudes de todas las codificaciones
   UTF-8:

#    ..pre >
#      len  count
#      1    765391
#      2    60
#      3    70
#      4    0
#    < pre..
   ..pre >
     len  count
     1    765391
     2    60
     3    70
     4    0
   < pre..

#    The value type of a map can itself be a composite type, such as a map or
#    slice. In the following code, the key type of @c(graph) is @c(string) and the
#    value type is @c(map[string]bool), representing a set of strings.
#    Conceptually, @c(graph) maps a string to a set of related strings, its
#    successors in a directed graph.
   El tipo de valor de un mapa puede ser un tipo compuesto, como un mapa o un
   slice. En el siguiente codigo, el tipo de la clave de @c(graph) es @c(string)
   y el tipo de valor es @c(map[string]bool), lo que representa un conjunto de
   cadenas. Conceptualmente, @c(graph) asigna una cadena a un conjunto de cadenas
   relacionadas, sus sucesores en un grafo dirigido.

#    ..figure > @l(gopl.io/ch4/graph/main.go<>gopl.io/ch4/graph)
   ..figure > @l(gopl.io/ch4/graph/main.go<>gopl.io/ch4/graph)

#      ..src > go
#        var graph = make(map[string]map[string]bool)
#
#        func addEdge(from, to string) {
#          edges := graph[from]
#          if edges == nil {
#            edges = make(map[string]bool)
#            graph[from] = edges
#          }
#          edges[to] = true
#        }
#
#        func hasEdge(from, to string) bool {
#          return graph[from][to]
#        }
#      < src..
     ..src > go
       var graph = make(map[string]map[string]bool)

       func addEdge(from, to string) {
         edges := graph[from]
         if edges == nil {
           edges = make(map[string]bool)
           graph[from] = edges
         }
         edges[to] = true
       }

       func hasEdge(from, to string) bool {
         return graph[from][to]
       }
     < src..


#    The @c(addEdge) function shows the idiomatic way to populate a map lazily,
#    that is, to initialize each value as its key appears for the first time. The
#    @c(hasEdge) function shows how the zero value of a missing map entry is often
#    put to work: even if neither @c(from) nor @c(to) is present,
#    @c(graph[from][to]) will always give a meaningful result.
   La funcion @c(addEdge) muestra la forma idiomatica para poblar un mapa
   perezosamente, es decir, para inicializar cada valor como su clave cuando
   aparece por primera vez. La funcion @c(hasEdge) muestra como el valor cero de
   una entrada del mapa que falta se pone a trabajar: incluso si no estan
   precentes ni @c(from) ni @c(to), @c(graph[from][to]) siempre dara un
   resultado significativo.

#    @b(Exercise 4.8): Modify @$(charcount) to count letters, digits, and so on in
#    their Unicode categories, using functions like @c(unicode.IsLetter).
   @b(Ejercicio 4.8): Modificar @$(charcount) para contar letras, digitos, y
   demas en sus categorias Unicode, utilizando funciones como
   @c(unicode.IsLetter).

#    @b(Exercise 4.9): Write a program @$(wordfreq) to report the frequency of
#    each word in an input text file. Call @c[input.Split(bufio.ScanWords)] before
#    the first call to @c(Scan) to break the input into words instead of lines.
   @b(Ejercicio 4.9): Escribir un programa @$(wordfreq) para reportar la
   frecuencia de cada palabra en un archivo de texto de entrada. Llamar a
   @c[input.Split(bufio.ScanWords)] antes de la primer llamada a @c(Scan) para
   romper la entrada en palabras en lugar de lineas.

# ** Section 4.4 <> Structs
** Seccion 4.4 <> Estructuras

#    A @e(struct) is an aggregate data type that groups together zero or more
#    named values of arbitrary types as a single entity. Each value is called a
#    @e(field). The classic example of a struct from data processing is the
#    employee record, whose fields are a unique ID, the employee’s name, address,
#    date of birth, position, salary, manager, and the like. All of these fields
#    are collected into a single entity that can be copied as a unit, passed to
#    functions and returned by them, stored in arrays, and so on.
   Una @e(estructura) es un tipo de datos agregada que agrupa de cero a mas
   valores con nombre de tipos arbitrarios como una entidad unica. Cada valor se
   denomina @e(campo). El ejemplo clasico de una estructura de procesamiento de
   datos es el registro de un empleado, cuyos campos son un identificador unico,
   el nombre del empleado, direccion, fecha de nacimiento, posicion, salario,
   gerente y similares. Todos estos campos se recopilan en una sola entidad que
   puede ser copiada como una unidad, pasada a funciones y devuelta por ellas,
   almacenada en arreglos, y demas.

#    These two statements declare a struct type called @c(Employee) and a variable
#    called @c(dilbert) that is an instance of an @c(Employee):
   Estas dos declaraciones declaran un tipo de estructura llamada @c(Empleado) y una
   variable llamada @c(dilbert) que es una instancia de un @c(Empleado):

#    ..src > go
#      type Employee struct {
#        ID        int
#        Name      string
#        Address   string
#        DoB       time.Time
#        Position  string
#        Salary    int
#        ManagerID int
#      }
#
#      var dilbert Employee
#    < src..
   ..src > go
     type Empleado struct {
       ID        int
       Nombre    string
       Direccion string
       DoB       time.Time
       Posicion  string
       Salario   int
       GerenteID int
     }

     var dilbert Empleado
   < src..

#    The individual fields of @c(dilbert) are accessed using dot notation like
#    @c(dilbert.Name) and @c(dilbert.DoB). Because dilbert is a variable, its
#    fields are variables too, so we may assign to a field:
   Los campos individuales de @c(dilbert) se accede usando la notacion de punto
   como @c(dilbert.Nombre) y @c(dilbert.DoB). Puesto que @c(dilbert) es una
   variable, sus campos son variables tambien, por lo que podemos establecer un
   campo:

#    ..src > go
#      dilbert.Salary -= 5000 // demoted, for writing too few lines of code
#    < src..
   ..src > go
     dilbert.Salario -= 5000 // Rebajado, por escribir muy pocas lineas de codigo
   < src..

#    or take its address and access it through a pointer:
   O tomar su direccion y acceder a ella a traves de un puntero:

#    ..src > go
#      position := &dilbert.Position
#      *position = "Senior " + *position // promoted, for outsourcing to Elbonia
#    < src..
   ..src > go
     posicion := &dilbert.Posicion
     *posicion = "Senior " + *posicion // promovido, para subcontrata a Elbonia
   < src..

#    The dot notation also works with a pointer to a struct:
   La notacion de punto tambien funciona con un puntero a una estructura:

#    ..src > go
#      var employeeOfTheMonth *Employee = &dilbert
#      employeeOfTheMonth.Position += " (proactive team player)"
#    < src..
   ..src > go
     var empleadoDelMes *Empleado = &dilbert
     empleadoDelMes.Posicion += " (proactive team player)"
   < src..

#    The last statement is equivalent to
   La ultima sentencia es equivalente a

#    ..src > go
#      (*employeeOfTheMonth).Position += " (proactive team player)"
#    < src..
   ..src > go
     (*empleadoDelMes).Posicion += " (proactive team player)"
   < src..

#    Given an employee’s unique ID, the function @c(EmployeeByID) returns a
#    pointer to an @c(Employee) struct. We can use the dot notation to access its
#    fields:
   Ya que un empleado tiene un ID unico, la funcion @c(EmpleadoPorID) devuelve
   un puntero a una estructura @c(Empleado). Podemos usar la notacion de punto
   para acceder a sus campos:

#    ..src > go
#      func EmployeeByID(id int) *Employee { /* ... */ }
#
#      fmt.Println(EmployeeByID(dilbert.ManagerID).Position) // "Pointy-haired boss"
#
#      id := dilbert.ID
#      EmployeeByID(id).Salary = 0 // fired for... no real reason
#    < src..
   ..src > go
     func EmpleadoPorID(id int) *Empleado { /* ... */ }

     fmt.Println(EmpleadoPorID(dilbert.GerenteID).Posicion) // "Jefe de pelo puntiagudo"

     id := dilbert.ID
     EmpleadoPorID(id).Salario = 0 // despedido por... ninguna razon real
   < src..

#    The last statement updates the @c(Employee) struct that is pointed to by the
#    result of the call to @c(EmployeeByID). If the result type of
#    @c(EmployeeByID) were changed to @c(Employee) instead of @c(*Employee), the
#    assignment statement would not compile since its left-hand side would not
#    identify a variable.
   La ultima instruccion actualiza la estructura @c(Empleado) a la que apunta el
   resultado de la llamada a @c(EmpleadoPorID). Si el tipo de resultado de
   @c(EmpleadoPorID) se cambiara a @c(Empleado) en lugar de @c(*Empleado), la
   instruccion de asignacion no compilara ya que su lado izquierdo no
   identificaria a una variable.

#    Fields are usually written one per line, with the field’s name preceding its
#    type, but consecutive fields of the same type may be combined, as with
#    @c(Name) and @c(Address) here:
   Generalmente, se escribe un campo por linea, con el nombre del campo que
   precede a su tipo, pero pueden combinarse los campos consecutivos del mismo
   tipo, como con @c(Nombre) y @c(Direccion):

#    ..src > go
#      type Employee struct {
#        ID            int
#        Name, Address string
#        DoB           time.Time
#        Position      string
#        Salary        int
#        ManagerID     int
#      }
#    < src..
   ..src > go
     type Empleado struct {
       ID                int
       Nombre, Direccion string
       DoB               time.Time
       Posicion          string
       Salario           int
       GerenteID         int
     }
   < src..

#    Field order is significant to type identity. Had we also combined the
#    declaration of the @c(Position) field (also a string), or interchanged
#    @c(Name) and @c(Address), we would be defining a different struct
#    type. Typically we only combine the declarations of related fields.
   El orden del campo es significativo para identificar el tipo. Si hubieramos
   combinado tambien la declaracion del campo @c(Posicion) (tambien una cadena),
   o intercambiado @c(Nombre) y @c(Direccion), estariamos definiendo un tipo de
   estructura diferente. Normalmente solo combinamos la declaracion de campos
   relacionados.

#    The name of a struct field is exported if it begins with a capital letter;
#    this is Go’s main access control mechanism. A struct type may contain a
#    mixture of exported and unexported fields.
   El nombre de un campo en la estructura se exporta si comienza con una letra
   mayuscula; este es el mecanismo principal de control de acceso en Go. Una
   estructura puede contener una mezcla de campos exportados y no exportados.

#    Struct types tend to be verbose because they often involve a line for each
#    field. Although we could write out the whole type each time it is needed, the
#    repetition would get tiresome. Instead, struct types usually appear within
#    the declaration of a named type like @c(Employee).
   Los tipos estructura tienden a ser detallados porque a menudo implican una
   linea para cada campo. Aunque podriamos escribir todo el tipo cada vez que
   sea necesario, la repeticion cansaria. En cambio, los tipos estructura suelen
   aparecer dentro de la declaracion de un tipo con nombre como @c(Empleado).

#    A named struct type @c(S) can’t declare a field of the same type @c(S): an
#    aggregate value cannot contain itself. (An analogous restriction applies to
#    arrays.) But @c(S) may declare a field of the pointer type @c(*S), which lets
#    us create recursive data structures like linked lists and trees. This is
#    illustrated in the code below, which uses a binary tree to implement an
#    insertion sort:
   Un llamado tipo de estructura @c(S) no puede declarar un campo del mismo tipo
   @c(S): un valor agregado no puede contenerse a si mismo. (Una restriccion
   analoga se aplica a los arreglos.) Pero @c(S) puede declarar un campo del
   tipo puntero @c(*S), lo que nos permite crear estructuras de datos recursivas
   como listas enlazadas y arboles. Esto se ilustra en el siguiente codigo, que
   utiliza un arbol binario para implementar un tipo de insercion:

#    ..figure > @l(gopl.io/ch4/treesort/sort.go<>gopl.io/ch4/treesort)
   ..figure > @l(gopl.io/ch4/treesort/sort.go<>gopl.io/ch4/treesort)

#      ..src > go
#        type tree struct {
#          value       int
#          left, right *tree
#        }
#
#        // Sort sorts values in place.
#        func Sort(values []int) {
#          var root *tree
#          for _, v := range values {
#            root = add(root, v)
#          }
#          appendValues(values[:0], root)
#        }
#
#        // appendValues appends the elements of t to values in order
#        // and returns the resulting slice.
#        func appendValues(values []int, t *tree) []int {
#          if t != nil {
#            values = appendValues(values, t.left)
#            values = append(values, t.value)
#            values = appendValues(values, t.right)
#          }
#          return values
#        }
#
#        func add(t *tree, value int) *tree {
#          if t == nil {
#            // Equivalent to return &tree{value: value}.
#            t = new(tree)
#            t.value = value
#            return t
#          }
#          if value < t.value {
#            t.left = add(t.left, value)
#          } else {
#            t.right = add(t.right, value)
#          }
#          return t
#        }
#      < src..
     ..src > go
       type tree struct {
         value       int
         left, right *tree
       }

       // Sort ordena los valores en su lugar.
       func Sort(values []int) {
         var root *tree
         for _, v := range values {
           root = add(root, v)
         }
         appendValues(values[:0], root)
       }

       // appendValues agrega los alementos de t a los valores en orden
       // y devuelve el slice resultante.
       func appendValues(values []int, t *tree) []int {
         if t != nil {
           values = appendValues(values, t.left)
           values = append(values, t.value)
           values = appendValues(values, t.right)
         }
         return values
       }

       func add(t *tree, value int) *tree {
         if t == nil {
           // Equivalente a regresar &tree{value: value}.
           t = new(tree)
           t.value = value
           return t
         }
         if value < t.value {
           t.left = add(t.left, value)
         } else {
           t.right = add(t.right, value)
         }
         return t
       }
     < src..


#    The zero value for a struct is composed of the zero values of each of its
#    fields. It is usually desirable that the zero value be a natural or sensible
#    default. For example, in @c(bytes.Buffer), the initial value of the struct is
#    a ready-to-use empty buffer, and the zero value of @c(sync.Mutex), which
#    we’ll see in @l(#Chapter 9), is a ready-to-use unlocked mutex. Sometimes this
#    sensible initial behavior happens for free, but sometimes the type designer
#    has to work at it.
   El valor cero de una estructura se compone de los valores cero de cada uno de
   sus campos. Por lo general, es deseable que el valor cero sea un defecto
   natural o razonable. Por ejemplo, en @c(bytes.Buffer), el valor inicial de la
   estructura es un buffer vacio listo para su uso, y el valor cero de
   @c(sync.Mutex), que veremos en el @l(#Capitulo 9), es un mutex desbloqueado
   listo para usas. A veces este comportamiento inicial razonable ocurre de
   forma gratuita, pero a veces el diseñador de tipo tiene que trabajar en ello.

#    The struct type with no fields is called the @e(empty struct), written
#    @c(struct{}). It has size zero and carries no information but may be useful
#    nonetheless. Some Go programmers use it instead of @c(bool) as the value type
#    of a map that represents a set, to emphasize that only the keys are
#    significant, but the space saving is marginal and the syntax more cumbersome,
#    so we generally avoid it.
   El tipo de una estructura sin campos se denomina @e(estructura vacia), se
   escribe @c(struct{}). Tiene un tamaño cero y no lleva ninguna informacion,
   sin embargo puede ser util. Algunos programadores lo utilizan en lugar de
   @c(bool) como el tipo de valor de un mapa que representa un conjunto, hacer
   hincapie en que solo las claves son significativas, pero el ahorro de espacio
   es marginal y la sintaxis es mas engorrosa, por lo que generalmente lo
   evitamos.

#    ..src > go
#      seen := make(map[string]struct{}) // set of strings
#      // ...
#      if _, ok := seen[s]; !ok {
#        seen[s] = struct{}{}
#        // ...first time seeing s...
#      }
#    < src..
   ..src > go
     seen := make(map[string]struct{}) // conjunto de strings
     // ...
     if _, ok := seen[s]; !ok {
       seen[s] = struct{}{}
       // ...primera ves viendo s...
     }
   < src..

# *** Section 4.4.1 <> Struct Literals
*** Seccion 4.4.1 <> Estructuras Literales

#     A value of a struct type can be written using a @e(struct literal) that
#     specifies values for its fields.
    Un valor de un tipo de estructura se puede escribir usando una estructura
    literal que especifique los valores de sus campos.

#     ..src > go
#       type Point struct{ X, Y int }
#
#       p := Point{1, 2}
#     < src..
    ..src > go
      type Point struct{ X, Y int }

      p := Point{1, 2}
    < src..

#     There are two forms of struct literal. The first form, shown above, requires
#     that a value be specified for @e(every) field, in the right order. It
#     burdens the writer (and reader) with remembering exactly what the fields
#     are, and it makes the code fragile should the set of fields later grow or be
#     reordered. Accordingly, this form tends to be used only within the package
#     that defines the struct type, or with smaller struct types for which there
#     is an obvious field ordering convention, like @c(image.Point{x, y}) or
#     @c(color.RGBA{red, green, blue, alpha}).
    Hay dos formas de struct literal. La primer forma, mostrada arriba, requiere
    que se especifique un valor de @e(cada) campo, en el orden correcto. Se
    carga al escritor (y al lector) el recordar exactamente cuales son los
    campos, y hace que el codigo sea fragil si el conjunto de campos crece mas
    tarde o se reordena. En consequencia, esta forma tiende a ser utilizado solo
    dentro del paquete que define el tipo de estructura o con tipos de
    estructuras mas pequeños para los cuales existe una convencion de ordenacion
    de campos obvia, como @c(image.Point{x, y}) o @c(color.RGBA{red, green,
    blue, alpha}).

#     More often, the second form is used, in which a struct value is initialized
#     by listing some or all of the field names and their corresponding values, as
#     in this statement from the Lissajous program of @l(#Section 1.4):
    Mas a menudo, se utiliza la segunda forma, en la que una estructura se
    inicia haciendo una lista de todos o algunos de los nombres de los campos y
    sus valores correspondientes, como en esta declaracion del programa
    Lissajous de la @l(#Seccion 1.4):

#     ..src > go
#       anim := gif.GIF{LoopCount: nframes}
#     < src..
    ..src > go
      anim := gif.GIF{LoopCount: nframes}
    < src..

#     If a field is omitted in this kind of literal, it is set to the zero value
#     for its type. Because names are provided, the order of fields doesn’t
#     matter.
    Si se omite un campo en este tipo de literal, se establece en el valor cero
    para su tipo. Ya que los nombres se proporcionan, el orden de los campos no
    importa.

#     The two forms cannot be mixed in the same literal. Nor can you use the
#     (order-based) first form of literal to sneak around the rule that unexported
#     identifiers may not be referred to from another package.
    Las dos formas no se pueden mezclar en el mismo literal. Tampoco se puede
    usar la primer forma de literal (basada en ordenes) para colarse alrededor
    de la regla de que los identificadores no exportados no pueden ser referidos
    desde otro paquete.

#     ..src > go
#       package p
#       type T struct{ a, b int } // a and b are not exported
#     < src..

#     ..src > go
#       package q
#       import "p"
#       var _ = p.T{a: 1, b: 2} // compile error: can't reference a, b
#       var _ = p.T{1, 2}       // compile error: can't reference a, b
#     < src..
    ..src > go
      package p
      type T struct{ a, b int } // no se exportan a y b
    < src..

    ..src > go
      package q
      import "p"
      var _ = p.T{a: 1, b: 2} // error de compilacion: no se puede referenciar a, b
      var _ = p.T{1, 2}       // error de compilacion: no se puede referenciar a, b
    < src..

#     Although the last line above doesn’t mention the unexported field
#     identifiers, it’s really using them implicitly, so it’s not allowed.
    Aunque la ultima linea no menciona los identificadores de campo no
    exportados, realmente los esta usando implicitamente, por lo que no es
    permitido.

#     Struct values can be passed as arguments to functions and returned from
#     them. For instance, this function scales a @c(Point) by a specified factor:
    Los valores de una estructura se pueden pasar como argumentos a funciones y
    ser devueltos. Por ejemplo, esta funcion escala un @c(Point) por un factor
    especifico:

#     ..src > go
#       func Scale(p Point, factor int) Point {
#         return Point{p.X * factor, p.Y * factor}
#       }
#
#       fmt.Println(Scale(Point{1, 2}, 5)) // "{5 10}"
#     < src..
    ..src > go
      func Scale(p Point, factor int) Point {
        return Point{p.X * factor, p.Y * factor}
      }

      fmt.Println(Scale(Point{1, 2}, 5)) // "{5 10}"
    < src..

#     For efficiency, larger struct types are usually passed to or returned from
#     functions indirectly using a pointer,
    Por eficiencia, las estructuras mas grandes normalmente se pasan a las
    funciones o se devuelven indirectamente mediante un puntero,

#     ..src > go
#       func Bonus(e *Employee, percent int) int {
#         return e.Salary * percent / 100
#       }
#     < src..
    ..src > go
      func Bonus(e *Employee, percent int) int {
        return e.Salary * percent / 100
      }
    < src..

#     and this is required if the function must modify its argument, since in a
#     call-by-value language like Go, the called function receives only a copy of
#     an argument, not a reference to the original argument.
    Y esto es necesario si la funcion debe modificar su argumento, ya que en un
    lenguaje de llamada por valor como Go, la funcion llamada recibe solo una
    copia, no una referencia al argumento original.

#     ..src > go
#       func AwardAnnualRaise(e *Employee) {
#         e.Salary = e.Salary * 105 / 100
#       }
#     < src..
    ..src > go
      func AwardAnnualRaise(e *Employee) {
        e.Salary = e.Salary * 105 / 100
      }
    < src..

#     Because structs are so commonly dealt with through pointers, it’s possible
#     to use this shorthand notation to create and initialize a struct variable
#     and obtain its address:
    Debido a que las estructuras se manejan tan comunmente mediante punteros, es
    posible utilizar esta notacion conpacta para crear e inicializar una
    estructura y obtener su direccion:

#     ..src > go
#       pp := &Point{1, 2}
#     < src..
    ..src > go
      pp := &Point{1, 2}
    < src..

#     It is exactly equivalent to
    Es exactamente equivalente a

#     ..src > go
#       pp := new(Point)
#       *pp = Point{1, 2}
#     < src..
    ..src > go
      pp := new(Point)
      *pp = Point{1, 2}
    < src..

#     but @c(&Point{1, 2}) can be used directly within an expression, such as a
#     function call.
    pero @c(&Point{1, 2}) se puede utilizar directamente dentro de una
    expresion, como una llamada de funcion.

# *** Section 4.4.2 <> Comparing Structs
*** Seccion 4.4.2 <> Comparacion de estructuras

#     If all the fields of a struct are comparable, the struct itself is
#     comparable, so two expressions of that type may be compared using @c(==) or
#     @c(!=). The @c(==) operation compares the corresponding fields of the two
#     structs in order, so the two printed expressions below are equivalent:
    Si todos los campos de una estructura son comparables, la estructura en si
    es comparable, por lo que se puede comparar dos expresiones de ese tipo
    usando @c(==) o @c(!=). La operacion @c(==) compara los campos
    correspondientes de las dos estructuras en orden, por lo que las dos
    expresiones a continuacion son equivalentes:

#     ..src > go
#       type Point struct{ X, Y int }
#
#       p := Point{1, 2}
#       q := Point{2, 1}
#       fmt.Println(p.X == q.X && p.Y == q.Y) // "false"
#       fmt.Println(p == q)                   // "false"
#     < src..
    ..src > go
      type Point struct{ X, Y int }

      p := Point{1, 2}
      q := Point{2, 1}
      fmt.Println(p.X == q.X && p.Y == q.Y) // "false"
      fmt.Println(p == q)                   // "false"
    < src..

#     Comparable struct types, like other comparable types, may be used as the key
#     type of a map.
    Las estructuras de tipos comparables, al igual que otros tipos comparables,
    se pueden utilizar como la clave de un mapa.

#     ..src > go
#       type address struct {
#         hostname string
#         port     int
#       }
#
#       hits := make(map[address]int)
#       hits[address{"golang.org", 443}]++
#     < src..
    ..src > go
      type address struct {
        hostname string
        port     int
      }

      hits := make(map[address]int)
      hits[address{"golang.org", 443}]++
    < src..

# *** Section 4.4.3 <> Struct Embedding and Anonymous Fields
*** Seccion 4.4.3 <> Estructura Enbebida y Campos Anonimos

#     In this section, we’ll see how Go’s unusual @e(struct embedding) mechanism
#     lets us use one named struct type as an @e(anonymous field) of another
#     struct type, providing a convenient syntactic shortcut so that a simple dot
#     expression like @c(x.f) can stand for a chain of fields like @c(x.d.e.f).
    En esta seccion, veremos como utilizar el inusual mecanismo de @e(estructura
    enbebida) de Go que nos permite usar una estructura como un @e(campo
    anonimo) de otra estructura, proporcionando un acceso directo,
    sintacticamente conveniente para que una simple expresion de punto como
    @c(x.f) puede representar una cadena de campos como @c(x.d.e.f).

#     Consider a 2-D drawing program that provides a library of shapes, such as
#     rectangles, ellipses, stars, and wheels. Here are two of the types it might
#     define:
    Considere un programa de dibujo 2-D que proporciona una libreria de formas,
    como rectangulos, elipses, estrellas y ruedas. Aqui hay dos de los tipos que
    podria definir:

#     ..src > go
#       type Circle struct {
#         X, Y, Radius int
#       }
#       type Wheel struct {
#         X, Y, Radius, Spokes int
#       }
#     < src..
    ..src > go
      type Circulo struct {
        X, Y, Radio int
      }
      type Rueda struct {
        X, Y, Radio, Rayos int
      }
    < src..

#     A @c(Circle) has fields for the @c(X) and @c(Y) coordinates of its center,
#     and a @c(Radius). A @c(Wheel) has all the features of a @c(Circle), plus
#     @c(Spokes), the number of inscribed radial spokes. Let’s create a wheel:
    Un @c(Circulo) tiene campos para las coordenadas de su centro @c(X) y @c(Y),
    y un @c(Radio). Una @c(Rueda) tiene todas las caracteristicas de un
    @c(Circulo), ademas de @c(Rayos), el numero de radios radiales
    inscritos. Vamos a crear una rueda:

#     ..src > go
#       var w Wheel
#       w.X = 8
#       w.Y = 8
#       w.Radius = 5
#       w.Spokes = 20
#     < src..
    ..src > go
      var w Rueda
      w.X = 8
      w.Y = 8
      w.Radio = 5
      w.Rayos = 20
    < src..

#     As the set of shapes grows, we’re bound to notice similarities and
#     repetition among them, so it may be convenient to factor out their common
#     parts:
    A medida que el conjunto de formas crece, estamos obligados a notar
    semejanzas y repeticiones entre ellos, por lo que puede ser conveniente
    factorizar sus partes comunes:

#     ..src > go
#       type Point struct {
#         X, Y int
#       }
#
#       type Circle struct {
#         Center Point
#         Radius int
#       }
#
#       type Wheel struct {
#         Circle Circle
#         Spokes int
#       }
#     < src..
    ..src > go
      type Punto struct {
        X, Y int
      }

      type Circulo struct {
        Centro Punto
        Radio  int
      }

      type Rueda struct {
        Circulo Circulo
        Rayos   int
      }
    < src..

#     The application may be clearer for it, but this change makes accessing the
#     fields of a @c(Wheel) more verbose:
    La aplicacion puede ser mas clara para ello, pero este cambio hace que el
    acceso a los campos de una Rueda sea mas detallado:

#     ..src > go
#       var w Wheel
#       w.Circle.Center.X = 8
#       w.Circle.Center.Y = 8
#       w.Circle.Radius = 5
#       w.Spokes = 20
#     < src..
    ..src > go
      var w Rueda
      w.Circulo.Centro.X = 8
      w.Circulo.Centro.Y = 8
      w.Circulo.Radio = 5
      w.Rayos = 20
    < src..

#     Go lets us declare a field with a type but no name; such fields are called
#     @e(anonymous fields). The type of the field must be a named type or a
#     pointer to a named type. Below, @c(Circle) and @c(Wheel) have one anonymous
#     field each. We say that a @c(Point) is @e(embedded) within @c(Circle), and a
#     @c(Circle) is embedded within @c(Wheel).
    Go nos permite declarar un campo con un tipo pero sin nombre; estos campos
    se denominan campos anonimos. El tipo del campo debe ser un tipo con nombre
    o un puntero a un tipo con nombre. Debajo, @c(Circulo) y @c(Rueda) tienen un
    campo anonimo cada uno. Se dice que un @c(Punto) esta enbebido dentro del
    @c(Circulo), y un @c(Circulo) esta enbebido dentro de la @c(Rueda).

#     ..src > go
#       type Circle struct {
#         Point
#         Radius int
#       }
#
#       type Wheel struct {
#         Circle
#         Spokes int
#       }
#     < src..
    ..src > go
      type Circulo struct {
        Punto
        Radio int
      }

      type Rueda struct {
        Circulo
        Rayos   int
      }
    < src..

#     Thanks to embedding, we can refer to the names at the leaves of the implicit
#     tree without giving the intervening names:
    Gracias al embebido, podemos referirnos a los nombres en las hojas
    del arbol implicitamento sin dar los nombres participantes:

#     ..src > go
#       var w Wheel
#       w.X = 8        // equivalent to w.Circle.Point.X = 8
#       w.Y = 8        // equivalent to w.Circle.Point.Y = 8
#       w.Radius = 5   // equivalent to w.Circle.Radius = 5
#       w.Spokes = 20
#     < src..
    ..src > go
      var w Rueda
      w.X = 8        // equivalente a w.Circulo.Punto.X = 8
      w.Y = 8        // equivalente a w.Circulo.Punto.Y = 8
      w.Radio = 5    // equivalente a w.Circulo.Radio = 5
      w.Rayos = 20
    < src..

#     The explicit forms shown in the comments above are still valid, however,
#     showing that @"(anonymous field) is something of a misnomer. The fields
#     @c(Circle) and @c(Point) do have names—that of the named type—but those
#     names are optional in dot expressions. We may omit any or all of the
#     anonymous fields when selecting their subfields.
    Las formas explicitas que se muestran en los comentarios anteriores siguen
    siendo validas, sin embargo, demuestra que @"(campo anonimo) es un termino
    inapropiado. Los campos @c(Circulo) y @c(Punto) tienen nombres–del tipo
    nombrado–pero esos nombres son opcionales en las expresiones de punto.
    Podemos omitir cualquiera o todos los campos anonimos al seleccionar sus
    subcampos.

#     Unfortunately, there’s no corresponding shorthand for the struct literal
#     syntax, so neither of these will compile:
    Desafortunadamente, no hay una sintaxis compacta correspondiente para una
    estructura literal, por lo que ninguna de ellas compilara:

#     ..src > go
#       w = Wheel{8, 8, 5, 20}                       // compile error: unknown fields
#       w = Wheel{X: 8, Y: 8, Radius: 5, Spokes: 20} // compile error: unknown fields
#     < src..
    ..src > go
      w = Wheel{8, 8, 5, 20}                       // error de compilacion: campos desconocidos
      w = Wheel{X: 8, Y: 8, Radius: 5, Spokes: 20} // error de compilacion: campos desconocidos
    < src..

#     The struct literal must follow the shape of the type declaration, so we must
#     use one of the two forms below, which are equivalent to each other:
    La estructura literal debe seguir el formato de la declaracion del tipo, por
    lo que debemos utilizar una de las siguientes dos formas, que son
    equivalentes entre si:

#     ..figure > @l(gopl.io/ch4/embed/main.go<>gopl.io/ch4/embed)
    ..figure > @l(gopl.io/ch4/embed/main.go<>gopl.io/ch4/embed)

#       ..src > go
#           w = Wheel{Circle{Point{8, 8}, 5}, 20}
#
#           w = Wheel{
#             Circle: Circle{
#               Point:  Point{X: 8, Y: 8},
#               Radius: 5,
#             },
#             Spokes: 20, // NOTE: trailing comma necessary here (and at Radius)
#           }
#
#           fmt.Printf("%#v\n", w)
#           // Output:
#           // Wheel{Circle:Circle{Point:Point{X:8, Y:8}, Radius:5}, Spokes:20}
#
#           w.X = 42
#
#           fmt.Printf("%#v\n", w)
#           // Output:
#           // Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20}
#       < src..
      ..src > go
          w = Rueda{Circulo{Punto{8, 8}, 5}, 20}

          w = Rueda{
            Circulo: Circulo{
              Punto:  Punto{X: 8, Y: 8},
              Radio: 5,
            },
            Rayos: 20, // NOTA: comma necesaria aqui (y en el Radio)
          }

          fmt.Printf("%#v\n", w)
          // Salida:
          // Rueda{Circulo:Circulo{Punto:Punto{X:8, Y:8}, Radio:5}, Rayos:20}

          w.X = 42

          fmt.Printf("%#v\n", w)
          // Salida:
          // Rueda{Circulo:Circulo{Punto:Punto{X:42, Y:8}, Radio:5}, Rayos:20}
      < src..


#     Notice how the @c(#) adverb causes @c(Printf)’s @c(%v) verb to display
#     values in a form similar to Go syntax. For struct values, this form includes
#     the name of each field.
    Observe como el adverbio @c(#) hace que el verbo @c(%v) de @c(Printf)
    muestre los valores en una forma similar a la sintaxis Go. Para los valores
    de estructura, este formato incluye el nombre de cada campo.

#     Because @"(anonymous) fields do have implicit names, you can’t have two
#     anonymous fields of the same type since their names would conflict. And
#     because the name of the field is implicitly determined by its type, so too
#     is the visibility of the field. In the examples above, the @c(Point) and
#     @c(Circle) anonymous fields are exported. Had they been unexported
#     (@c(point) and @c(circle)), we could still use the shorthand form
    Dado que los campos @"(anonimos) tienen nombres implicitos, no se puede
    tener dos campos anonimos del mismo tipo, ya que sus nombres entran en
    conflicto. Y debido a que el nombre del campo esta implicitamente
    determinado por su tipo, tambien lo es la visibilidad del campo. En los
    ejemplos anteriores, se exportan campos anonimos @c(Punto) y
    @c(Circulo). Si no hubieran sido exportados (@c(punto) y @c(circulo)),
    podriamos utilizar la forma compacta

#     ..src > go
#       w.X = 8 // equivalent to w.circle.point.X = 8
#     < src..
    ..src > go
      w.X = 8 // equivalente a w.circulo.punto.X = 8
    < src..

#     but the explicit long form shown in the comment would be forbidden outside
#     the declaring package because @c(circle) and @c(point) would be
#     inaccessible.
    pero el fomato explicito que se muestra en el comentario estaria prohibido
    fuera del paquete porque @c(circulo) y @c(punto) serian inaccesibles.

#     What we’ve seen so far of struct embedding is just a sprinkling of syntactic
#     sugar on the dot notation used to select struct fields. Later, we’ll see
#     that anonymous fields need not be struct types; any named type or pointer to
#     a named type will do. But why would you want to embed a type that has no
#     subfields?
    Lo que hemos visto hasta ahora sobre estructuras enbebidas es solo una pisca
    de azucar sintactico en la notacion de punto utilizada para seleccionar los
    campos de la estructura. Mas adelante, veremos que los campos anonimos no
    necesitan ser de tipo estructura; puede ser cualquier tipo con nombre o
    puntero a un tipo con nombre. Pero, ¿para que querrias incorporar un tipo
    que no tiene subcampos?

#     The answer has to do with methods. The shorthand notation used for selecting
#     the fields of an embedded type works for selecting its methods as well. In
#     effect, the outer struct type gains not just the fields of the embedded type
#     but its methods too. This mechanism is the main way that complex object
#     behaviors are composed from simpler ones. @e(Composition) is central to
#     object-oriented programming in Go, and we’ll explore it further in
#     @l(#Section 6.3).
    La respuesta tiene que ver con los metodos. La notacion compacta utilizada
    para seleccionar los campos de un tipo enbebido funciona para seleccionar
    tambien sus metodos. En efecto, el tipo de estructura externa gana no solo
    los campos del tipo enbebido sino tambien sus metodos. Este mecanismo es la
    forma principal en que los comportamientos de objetos complejos se componen
    de los mas simples. La composicion es fundamental para la programacion
    orientada a objetos en Go, y la exploraremos mas adelante en la @l(#Seccion
    6.3).

# ** Section 4.5 <> JSON
** Seccion 4.5 <> JSON

#    JavaScript Object Notation (JSON) is a standard notation for sending and
#    receiving structured information. JSON is not the only such notation. XML
#    (@l(#Section 7.14<>§7.14)), ASN.1, and Google’s Protocol Buffers serve
#    similar purposes and each has its niche, but because of its simplicity,
#    readability, and universal support, JSON is the most widely used.
   JavaScript Object Notation (JSON) es una notacion estandar para enviar y
   recibir informacion estructurada. JSON no es la unica notacion. XML
   (@l(#Seccion 7.14<>§7.14)), ASN.1, y Google’s Protocol Buffers sirven a
   propositos similares y cada uno tiene su nicho, pero debido a su simplicidad,
   facilidad de lectura, y un apoyo universal, JSON es el mas utilizado.

#    Go has excellent support for encoding and decoding these formats, provided by
#    the standard library packages @c(encoding/json), @c(encoding/xml),
#    @c(encoding/asn1), and so on, and these packages all have similar APIs. This
#    section gives a brief overview of the most important parts of the
#    @c(encoding/json) package.
   Go tiene un excelente soporte para la codificacion y decodificacion de estos
   formatos, proporcionado por los paquetes de las librerias estandar
   @c(encoding/json) , @c(encoding/xml), @c(encoding/asn1), y demas, y todos
   estos paquetes tienen APIs similares. En esta seccion se presenta una breve
   descripcion de las partes mas importantes del paquete @c(encoding/json).

#    JSON is an encoding of JavaScript values—strings, numbers, booleans, arrays,
#    and objects—as Unicode text. It’s an efficient yet readable representation
#    for the basic data types of @l(#Chapter 3) and the composite types of this
#    chapter—arrays, slices, structs, and maps.
   JSON es una codificacion de valores JavaScript–cadenas, numeros, booleanos,
   arreglos y objetos–como texto Unicode. Es una representacion eficiente pero
   legible para los tipos de datos basicos del @l(#Capitulo 3) y los tipos
   compuestos de este capitulo–arreglos, slices, estructuras, y mapas.

#    The basic JSON types are numbers (in decimal or scientific notation),
#    booleans (@c(true) or @c(false)), and strings, which are sequences of Unicode
#    code points enclosed in double quotes, with backslash escapes using a similar
#    notation to Go, though JSON’s @c(\U)@e(hhhh) numeric escapes denote UTF-16
#    codes, not runes.
   Los tipos JSON basicos son numeros (en notacion decimal o cientifica),
   booleanos (@c(true) o @c(false)), y cadenas, que son secuencias de puntos de
   codigo Unicode entre comillas dobles, con escapes mediante la barra invertida
   utilizando una notacion similar a Go, aunque los escapes JSON @c(\U)@e(hhhh)
   denotan codigos UTF-16, no runas.

#    These basic types may be combined recursively using JSON arrays and
#    objects. A JSON array is an ordered sequence of values, written as a
#    comma-separated list enclosed in square brackets; JSON arrays are used to
#    encode Go arrays and slices. A JSON object is a mapping from strings to
#    values, written as a sequence of @c(name:value) pairs separated by commas and
#    surrounded by braces; JSON objects are used to encode Go maps (with string
#    keys) and structs.  For example:
   Estos tipos basicos se pueden combinar recursivamente utilizando arreglos
   JSON y objetos. Un arreglo JSON es una secuencia ordenada de valores, escrita
   como una lista separada por comas entre corchetes; los arreglos JSON se
   utilizan para codificar arreglos Go y slices. Un objeto JSON es un mapeo de
   cadenas a valores, escrito como una secuencia de pares @c(nombre:valor)
   separados por comas y rodeados por llaves; Los objetos JSON se usan para
   codificar mapas Go (con claves de tipo cadena) y estructuras. Por ejemplo:

#    | @c(boolean) | @c(true)                                 |
#    |-------------|------------------------------------------|
#    | @c(number)  | @c(-273.15)                              |
#    |-------------|------------------------------------------|
#    | @c(string)  | @c("She said \"Hello, 世界\"")             |
#    |-------------|------------------------------------------|
#    | @c(array)   | @c(["gold", "silver", "bronze"])         |
#    |-------------|------------------------------------------|
#    | @c(object)  | @c({"year": 1980,                        |
#    |             | "event": "archery",                      |
#    |             | "medals": ["gold", "silver", "bronze"]}) |
   | @c(booleano) | @c(true)                                 |
   |--------------|------------------------------------------|
   | @c(numero)   | @c(-273.15)                              |
   |--------------|------------------------------------------|
   | @c(cadena)   | @c("She said \"Hello,  世界\"")            |
   |--------------|------------------------------------------|
   | @c(arreglo)  | @c(["gold", "silver", "bronze"])         |
   |--------------|------------------------------------------|
   | @c(objeto)   | @c({"year": 1980,                        |
   |              | "event": "archery",                      |
   |              | "medals": ["gold", "silver", "bronze"]}) |


#    Consider an application that gathers movie reviews and offers
#    recommendations. Its @c(Movie) data type and a typical list of values are
#    declared below. (The string literals after the @c(Year) and @c(Color) field
#    declarations are @e(field tags); we’ll explain them in a moment.)
   Considere una aplicacion que reune reseñas de peliculas y ofrece
   recomendaciones. A continuacion se declara un tipo de datos @c(Movie) y luego
   una lista de estos valores. (Los literales de cadena despues de las
   declaraciones @c(Year) y @c(Color) son etiquetas de campo; las explicaremos
   en un momento.)

#    ..figure > @l(gopl.io/ch4/movie/main.go<>gopl.io/ch4/movie)
   ..figure > @l(gopl.io/ch4/movie/main.go<>gopl.io/ch4/movie)

#      ..src > go
#        type Movie struct {
#          Title  string
#          Year   int  `json:"released"`
#          Color  bool `json:"color,omitempty"`
#          Actors []string
#        }
#
#        var movies = []Movie{
#          {Title: "Casablanca", Year: 1942, Color: false,
#            Actors: []string{"Humphrey Bogart", "Ingrid Bergman"}},
#          {Title: "Cool Hand Luke", Year: 1967, Color: true,
#            Actors: []string{"Paul Newman"}},
#          {Title: "Bullitt", Year: 1968, Color: true,
#            Actors: []string{"Steve McQueen", "Jacqueline Bisset"}},
#          // ...
#        }
#      < src..
     ..src > go
       type Movie struct {
         Title  string
         Year   int  `json:"released"`
         Color  bool `json:"color,omitempty"`
         Actors []string
       }

       var movies = []Movie{
         {Title: "Casablanca", Year: 1942, Color: false,
           Actors: []string{"Humphrey Bogart", "Ingrid Bergman"}},
         {Title: "Cool Hand Luke", Year: 1967, Color: true,
           Actors: []string{"Paul Newman"}},
         {Title: "Bullitt", Year: 1968, Color: true,
           Actors: []string{"Steve McQueen", "Jacqueline Bisset"}},
         // ...
       }
     < src..


#    Data structures like this are an excellent fit for JSON, and it’s easy to
#    convert in both directions. Converting a Go data structure like @c(movies) to
#    JSON is called @e(marshaling). Marshaling is done by @c(json.Marshal):
   Las estructuras de datos como esta son un excelente ajuste para JSON, y es
   facil de convertir en ambas direcciones. Convertir una estructura de datos Go
   como @c(movies) a JSON se denomina @e(marshaling). La ordenacion se se
   realiza con @c(json.Marshal):

#    ..src > go
#      data, err := json.Marshal(movies)
#      if err != nil {
#        log.Fatalf("JSON marshaling failed: %s", err)
#      }
#      fmt.Printf("%s\n", data)
#    < src..
   ..src > go
     data, err := json.Marshal(movies)
     if err != nil {
       log.Fatalf("JSON marshaling failed: %s", err)
     }
     fmt.Printf("%s\n", data)
   < src..

#    @c(Marshal) produces a byte slice containing a very long string with no
#    extraneous white space; we’ve folded the lines so it fits:
   @c(Marshal) produce una slice de bytes que contiene una cadena muy grande sin
   ningun espacio en blanco:

#    ..src > go
#      [{"Title":"Casablanca","released":1942,"Actors":["Humphrey Bogart","Ingrid Bergman"]},{"Title":"Cool Hand Luke","released":1967,"color":true,"Actors":["Paul Newman"]},{"Title":"Bullitt","released":1968,"color":true,"Actors":["Steve McQueen","Jacqueline Bisset"]}]
#    < src..
   ..src > go
     [{"Title":"Casablanca","released":1942,"Actors":["Humphrey Bogart","Ingrid Bergman"]},{"Title":"Cool Hand Luke","released":1967,"color":true,"Actors":["Paul Newman"]},{"Title":"Bullitt","released":1968,"color":true,"Actors":["Steve McQueen","Jacqueline Bisset"]}]
   < src..

#    This compact representation contains all the information but it’s hard to
#    read. For human consumption, a variant called @c(json.MarshalIndent) produces
#    neatly indented output. Two additional arguments define a prefix for each
#    line of output and a string for each level of indentation:
   Esta representacion compacta contiene toda la informacion, pero es dificil de
   leer. Para el consumo humano, una variante llamada @c(json.MarshalIndent)
   produce una salida perfectamente indentada. Dos argumentos adicionales
   definen un prefijo para cada linea de salida y una cadena para cada nivel de
   sangria:

#    ..src > go
#      data, err := json.MarshalIndent(movies, "", "    ")
#      if err != nil {
#        log.Fatalf("JSON marshaling failed: %s", err)
#      }
#      fmt.Printf("%s\n", data)
#    < src..
   ..src > go
     data, err := json.MarshalIndent(movies, "", "    ")
     if err != nil {
       log.Fatalf("JSON marshaling failed: %s", err)
     }
     fmt.Printf("%s\n", data)
   < src..

#    The code above prints
   El codigo anterior

#    ..src > go
#      [
#          {
#              "Title": "Casablanca",
#              "released": 1942,
#              "Actors": [
#                  "Humphrey Bogart",
#                  "Ingrid Bergman"
#              ]
#          },
#          {
#              "Title": "Cool Hand Luke",
#              "released": 1967,
#              "color": true,
#              "Actors": [
#                  "Paul Newman"
#              ]
#          },
#          {
#              "Title": "Bullitt",
#              "released": 1968,
#              "color": true,
#              "Actors": [
#                  "Steve McQueen",
#                  "Jacqueline Bisset"
#              ]
#          }
#      ]
#    < src..
   ..src > go
     [
         {
             "Title": "Casablanca",
             "released": 1942,
             "Actors": [
                 "Humphrey Bogart",
                 "Ingrid Bergman"
             ]
         },
         {
             "Title": "Cool Hand Luke",
             "released": 1967,
             "color": true,
             "Actors": [
                 "Paul Newman"
             ]
         },
         {
             "Title": "Bullitt",
             "released": 1968,
             "color": true,
             "Actors": [
                 "Steve McQueen",
                 "Jacqueline Bisset"
             ]
         }
     ]
   < src..

#    Marshaling uses the Go struct field names as the field names for the JSON
#    objects (through @e(reflection), as we’ll see in @l(#Section 12.6)). Only
#    exported fields are marshaled, which is why we chose capitalized names for
#    all the Go field names.
   Marshaling utiliza los nombres de los campos en la estructura Go como los
   nombres de campo de los objetos JSON (mediante @e(reflexion), como veremos en
   la @l(#Seccion 12.6)). Solo se exportan los campos exportables, por lo que
   elegimos nombres en mayusculas para todos los nombres de campo.

#    You may have noticed that the name of the @c(Year) field changed to
#    @c(released) in the output, and @c(Color) changed to @c(color). That’s
#    because of the @e(field tags). A field tag is a string of metadata associated
#    at compile time with the field of a struct:
   Habra notado que el nombre del campo @c(Year) cambia a @c(released) en la
   salida, y @c(Color) cambia a @c(color) . Eso es debido a las etiquetas de los
   campos. Una etiqueta de campo es una cadena de metadatos asociados en tiempo
   de compilacion con el campo de una estructura:

#    ..src > go
#      Year  int  `json:"released"`
#      Color bool `json:"color,omitempty"`
#    < src..
   ..src > go
     Year  int  `json:"released"`
     Color bool `json:"color,omitempty"`
   < src..

#    A field tag may be any literal string, but it is conventionally interpreted
#    as a space-separated list of @c(key:"value") pairs; since they contain double
#    quotation marks, field tags are usually written with raw string literals. The
#    @c(json) key controls the behavior of the @c(encoding/json) package, and
#    other @c(encoding/...) packages follow this convention. The first part of the
#    @c(json) field tag specifies an alternative JSON name for the Go field. Field
#    tags are often used to specify an idiomatic JSON name like @c(total_count)
#    for a Go field named @c(TotalCount). The tag for @c(Color) has an additional
#    option, @c(omitempty), which indicates that no JSON output should be produced
#    if the field has the zero value for its type (@c(false), here) or is
#    otherwise empty.  Sure enough, the JSON output for @e(Casablanca), a
#    black-and-white movie, has no @c(color) field.
   Una etiqueta de campo puede ser cualquier cadena literal, pero se interpreta
   convencionalmente como una lista separada por espacios de pares
   @c(clave:"valor"); Ya que contiene comillas dobles, las etiquetas de campo
   normalmente se escriben con literales de cadena sin formato. La clave
   @c(json) controla el comportamiento del paquete @c(encoding/json), y otros
   paquetes @c(encoding/...) siguen esta convencion. La primera parte de la
   etiqueta de campo @c(json) especifica un nombre JSON alternativo para el
   campo Go. Las etiquetas de los campos a menudo se utilizan para especificar
   un nombre JSON idiomatico como @c(total_count) para un campo Go llamado
   @c(TotalCount). La etiqueta @c(Color) tiene una opcion adicional,
   @c(omitempty), lo que indica que no se debe producir ninguna salida JSON si
   el campo tiene el valor cero para su tipo (@c(false), aqui) o esta
   vacia. Efectivamente, la salida JSON para Casablanca, una pelicula en blanco
   y negro, no tiene el campo @c(color).

#    The inverse operation to marshaling, decoding JSON and populating a Go data
#    structure, is called @e(unmarshaling), and it is done by @c(json.Unmarshal).
#    The code below unmarshals the JSON movie data into a slice of structs whose
#    only field is @c(Title). By defining suitable Go data structures in this way,
#    we can select which parts of the JSON input to decode and which to
#    discard. When @c(Unmarshal) returns, it has filled in the slice with the
#    @c(Title) information; other names in the JSON are ignored.
   La operacion inversa para marshaling, la decodificacion de JSON y rellenar
   una estructura de datos Go, se denomina @e(unmarshaling), y se realiza por
   @c(json.Unmarshal). El codigo de abajo descoloca los datos de la pelicula
   JSON en un slice de estructuras cuyo unico campo es Title . De esta manera,
   al definir estructuras de datos Go adecuadas, podemos seleccionar que partes
   de la entrada JSON se deben descifrar y cuales descartar. Cuando
   @c(Unmarshal) regresa, se ha llenado el slice con la informacion de
   @c(Title); Otros nombres en el JSON se ignoran.

#    ..src > go
#      var titles []struct{ Title string }
#      if err := json.Unmarshal(data, &titles); err != nil {
#        log.Fatalf("JSON unmarshaling failed: %s", err)
#      }
#      fmt.Println(titles) // "[{Casablanca} {Cool Hand Luke} {Bullitt}]"
#    < src..
   ..src > go
     var titles []struct{ Title string }
     if err := json.Unmarshal(data, &titles); err != nil {
       log.Fatalf("JSON unmarshaling failed: %s", err)
     }
     fmt.Println(titles) // "[{Casablanca} {Cool Hand Luke} {Bullitt}]"
   < src..

#    Many web services provide a JSON interface—make a request with HTTP and back
#    comes the desired information in JSON format. To illustrate, let’s query the
#    GitHub issue tracker using its web-service interface. First we’ll define the
#    necessary types and constants:
   Muchos servicios web proporcionan una interfaz JSON–se hace una solicitud con
   HTTP y devuelve la informacion deseada en formato JSON. Para ilustrarlo,
   vamos a consultar el seguimiento de problemas en GitHub con su interfaz de
   servicio web. Primero definiremos los tipos y constantes necesarios:

#    ..figure > @l(gopl.io/ch4/github/github.go<>gopl.io/ch4/github)
   ..figure > @l(gopl.io/ch4/github/github.go<>gopl.io/ch4/github)

#      ..src > go
#        // Package github provides a Go API for the GitHub issue tracker.
#        // See https://developer.github.com/v3/search/#search-issues.
#        package github
#
#        import "time"
#
#        const IssuesURL = "https://api.github.com/search/issues"
#
#        type IssuesSearchResult struct {
#          TotalCount int `json:"total_count"`
#          Items      []*Issue
#        }
#
#        type Issue struct {
#          Number    int
#          HTMLURL   string `json:"html_url"`
#          Title     string
#          State     string
#          User      *User
#          CreatedAt time.Time `json:"created_at"`
#          Body      string    // in Markdown format
#        }
#
#        type User struct {
#          Login   string
#          HTMLURL string `json:"html_url"`
#        }
#      < src..
     ..src > go
       // El paquete github proporciana una API en Go para el seguimiento de problemas.
       // Ver https://developer.github.com/v3/search/#search-issues.
       package github

       import "time"

       const IssuesURL = "https://api.github.com/search/issues"

       type IssuesSearchResult struct {
         TotalCount int `json:"total_count"`
         Items      []*Issue
       }

       type Issue struct {
         Number    int
         HTMLURL   string `json:"html_url"`
         Title     string
         State     string
         User      *User
         CreatedAt time.Time `json:"created_at"`
         Body      string    // En formato Markdown
       }

       type User struct {
         Login   string
         HTMLURL string `json:"html_url"`
       }
     < src..


#    As before, the names of all the struct fields must be capitalized even if
#    their JSON names are not. However, the matching process that associates JSON
#    names with Go struct names during unmarshaling is case-insensitive, so it’s
#    only necessary to use a field tag when there’s an underscore in the JSON name
#    but not in the Go name. Again, we are being selective about which fields to
#    decode; the GitHub search response contains considerably more information
#    than we show here.
   Como antes, los nombres de todos los campos de estructura deben estar en
   mayuscula incluso si sus nombres JSON no. Sin embargo, el proceso de
   coincidencia que asocia los nombres de JSON con los nombres de una estructura
   de Go durante el unmarshaling no distingue entre mayusculas y minusculas, por
   lo que solo es necesario utilizar una etiqueta de campo cuando hay un
   subrayado en el nombre JSON pero no en el nombre Go. Una vez mas, estamos
   siendo selectivos acerca de que campos decodificar; La respuesta de busqueda
   de GitHub contiene considerablemente mas informacion de la que mostramos
   aqui.

#    The @c(SearchIssues) function makes an HTTP request and decodes the result as
#    JSON. Since the query terms presented by a user could contain characters like
#    @c(?) and @c(&) that have special meaning in a URL, we use
#    @c(url.QueryEscape) to ensure that they are taken literally.
   La funcion @c(SearchIssues) realiza una peticion HTTP y decodifica el
   resultado como JSON. Puesto que los terminos de consulta presentados por un
   usuario pueden contener caracteres como @c(?) y @c(&) que tienen un
   significado especial en una URL, usamos @c(url.QueryEscape) para asegurar de
   que se tomen literalmente.

#    ..figure > @l(gopl.io/ch4/github/search.go<>gopl.io/ch4/github)
   ..figure > @l(gopl.io/ch4/github/search.go<>gopl.io/ch4/github)

#      ..src > go
#        package github
#
#        import (
#          "encoding/json"
#          "fmt"
#          "net/http"
#          "net/url"
#          "strings"
#        )
#
#        // SearchIssues queries the GitHub issue tracker.
#        func SearchIssues(terms []string) (*IssuesSearchResult, error) {
#          q := url.QueryEscape(strings.Join(terms, " "))
#          resp, err := http.Get(IssuesURL + "?q=" + q)
#          if err != nil {
#            return nil, err
#          }
#
#          // We must close resp.Body on all execution paths.
#          // (Chapter 5 presents 'defer', which makes this simpler.)
#          if resp.StatusCode != http.StatusOK {
#            resp.Body.Close()
#            return nil, fmt.Errorf("search query failed: %s", resp.Status)
#          }
#
#          var result IssuesSearchResult
#          if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
#            resp.Body.Close()
#            return nil, err
#          }
#          resp.Body.Close()
#          return &result, nil
#        }
#      < src..
     ..src > go
       package github

       import (
         "encoding/json"
         "fmt"
         "net/http"
         "net/url"
         "strings"
       )

       // SearchIssues consulta el seguimiento de problemas de GitHub.
       func SearchIssues(terms []string) (*IssuesSearchResult, error) {
         q := url.QueryEscape(strings.Join(terms, " "))
         resp, err := http.Get(IssuesURL + "?q=" + q)
         if err != nil {
           return nil, err
         }

         // Debemos cerrar resp.Body en todas las rutas de ejecucion.
         // (El Capitulo 5 presenta 'defer', lo que simplifica esto.)
         if resp.StatusCode != http.StatusOK {
           resp.Body.Close()
           return nil, fmt.Errorf("search query failed: %s", resp.Status)
         }

         var result IssuesSearchResult
         if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
           resp.Body.Close()
           return nil, err
         }
         resp.Body.Close()
         return &result, nil
       }
     < src..


#    The earlier examples used @c(json.Unmarshal) to decode the entire contents of
#    a byte slice as a single JSON entity. For variety, this example uses the
#    @e(streaming) decoder, @c(json.Decoder), which allows several JSON entities
#    to be decoded in sequence from the same stream, although we don’t need that
#    feature here. As you might expect, there is a corresponding streaming encoder
#    called @c(json.Encoder).
   Los ejemplos anteriores utilizaron @c(json.Unmarshal) para decodificar todo
   el contenido de una slice de bytes como una sola entidad JSON. Para variar,
   este ejemplo utiliza el decodificador de @e(flujo), @c(json.Decoder) , que
   permite que varias entidades JSON sean decodificados en secuencia desde el
   mismo flujo, aunque aqui no necesitamos esa caracteristica. Como era de
   esperar, hay un codificador de flujo correspondiente llamado @c(json.Encoder).

#    The call to @c(Decode) populates the variable @c(result). There are various
#    ways we can format its value nicely. The simplest, demonstrated by the
#    @c(issues) command below, is as a text table with fixed-width columns, but in
#    the next section we’ll see a more sophisticated approach based on templates.
   La llamada a @c(Decode) rellena la variable @c(result). Hay varias maneras en
   que podemos dar un formato agradable a su valor. A continuacion mostramos el
   mas simple, con el commando @c(issues), es como una tabla de texto con
   columnas de ancho fijo, pero en la siguiente seccion vamos a ver un enfoque
   mas sofisticado basado en plantillas.

#    ..figure > @l(gopl.io/ch4/issues/main.go<>gopl.io/ch4/issues)
   ..figure > @l(gopl.io/ch4/issues/main.go<>gopl.io/ch4/issues)

#      ..src > go
#        // Issues prints a table of GitHub issues matching the search terms.
#        package main
#
#        import (
#          "fmt"
#          "log"
#          "os"
#
#          "gopl.io/ch4/github"
#        )
#
#        func main() {
#          result, err := github.SearchIssues(os.Args[1:])
#          if err != nil {
#            log.Fatal(err)
#          }
#          fmt.Printf("%d issues:\n", result.TotalCount)
#          for _, item := range result.Items {
#            fmt.Printf("#%-5d %9.9s %.55s\n",
#              item.Number, item.User.Login, item.Title)
#          }
#        }
#      < src..
     ..src > go
       // Issues imprime una tabla de coincidencia de problemas que coinciden
       // con los terminos de busqueda
       package main

       import (
         "fmt"
         "log"
         "os"

         "gopl.io/ch4/github"
       )

       func main() {
         result, err := github.SearchIssues(os.Args[1:])
         if err != nil {
           log.Fatal(err)
         }
         fmt.Printf("%d issues:\n", result.TotalCount)
         for _, item := range result.Items {
           fmt.Printf("#%-5d %9.9s %.55s\n",
             item.Number, item.User.Login, item.Title)
         }
       }
     < src..


#    The command-line arguments specify the search terms. The command below
#    queries the Go project’s issue tracker for the list of open bugs related to
#    JSON decoding:
   Los argumentos de linea de comandos especifican los terminos de busqueda. El
   comando siguiente consulta el rastreador de problemas del proyecto Go para la
   lista de errores abiertos relacionados con la descodificacion JSON:

#    ..src > sh
#      $ go build gopl.io/ch4/issues
#      $ ./issues repo:golang/go is:open json decoder
#      13 issues:
#      #5680    eaigner encoding/json: set key converter on en/decoder
#      #6050  gopherbot encoding/json: provide tokenizer
#      #8658  gopherbot encoding/json: use bufio
#      #8462  kortschak encoding/json: UnmarshalText confuses json.Unmarshal
#      #5901        rsc encoding/json: allow override type marshaling
#      #9812  klauspost encoding/json: string tag not symmetric
#      #7872  extempora encoding/json: Encoder internally buffers full output
#      #9650    cespare encoding/json: Decoding gives errPhase when unmarshalin
#      #6716  gopherbot encoding/json: include field name in unmarshal error me
#      #6901  lukescott encoding/json, encoding/xml: option to treat unknown fi
#      #6384    joeshaw encoding/json: encode precise floating point integers u
#      #6647    btracey x/tools/cmd/godoc: display type kind of each named type
#      #4237  gjemiller encoding/base64: URLEncoding padding is optional
#    < src..
   ..src > sh
     $ go build gopl.io/ch4/issues
     $ ./issues repo:golang/go is:open json decoder
     13 issues:
     #5680    eaigner encoding/json: set key converter on en/decoder
     #6050  gopherbot encoding/json: provide tokenizer
     #8658  gopherbot encoding/json: use bufio
     #8462  kortschak encoding/json: UnmarshalText confuses json.Unmarshal
     #5901        rsc encoding/json: allow override type marshaling
     #9812  klauspost encoding/json: string tag not symmetric
     #7872  extempora encoding/json: Encoder internally buffers full output
     #9650    cespare encoding/json: Decoding gives errPhase when unmarshalin
     #6716  gopherbot encoding/json: include field name in unmarshal error me
     #6901  lukescott encoding/json, encoding/xml: option to treat unknown fi
     #6384    joeshaw encoding/json: encode precise floating point integers u
     #6647    btracey x/tools/cmd/godoc: display type kind of each named type
     #4237  gjemiller encoding/base64: URLEncoding padding is optional
   < src..

#    The GitHub web-service interface at @l(https://developer.github.com/v3/) has
#    many more features than we have space for here.
   La interfaz de servicio web en GitHub @l(https://developer.github.com/v3/)
   tiene muchas mas funciones delas que tenemos espacio para mostrar aqui.

#    @b(Exercise 4.10): Modify @c(issues) to report the results in age categories,
#    say less than a month old, less than a year old, and more than a year old.
   @b(Ejercicio 4.10): Modificar @c(issues) para reportar los resultados en
   categorias de edad, es decir menos de un mes de edad, menos de un año de
   edad, y mas de un año de edad.

#    @b(Exercise 4.11): Build a tool that lets users create, read, update, and
#    delete GitHub issues from the command line, invoking their preferred text
#    editor when substantial text input is required.
   @b(Ejercicio 4.11): Construir una herramienta que permite a los usuarios
   crear, leer, actualizar y eliminar los problemas de GitHub desde la linea de
   comandos, invocando su editor de texto preferido cuando se requiera la
   introduccion de texto sustancial.

#    @b(Exercise 4.12): The popular web comic @e(xkcd) has a JSON interface. For
#    example, a request to @l(https://xkcd.com/571/info.0.json) produces a
#    detailed description of comic 571, one of many favorites. Download each URL
#    (once!)  and build an offline index. Write a tool @$(xkcd) that, using this
#    index, prints the URL and transcript of each comic that matches a search term
#    provided on the command line.
   @b(Ejercicio 4.12): El popular comic web @e(xkcd) tiene una interfaz
   JSON. Por ejemplo, una solicitud a @l(https://xkcd.com/571/info.0.json)
   produce una descripcion detallada del comic 571, uno de mis muchos
   favoritos. Descargue cada URL (una vez) y construya un indice sin
   conexion. Escriba una herramienta @$(xkcd) que, utilizando este indice,
   imprima la URL y transcripcion de cada comic que coincida con un termino de
   busqueda proporcionado en la linea de comandos.

#    @b(Exercise 4.13): The JSON-based web service of the Open Movie Database lets
#    you search @l(https://omdbapi.com/) for a movie by name and download its
#    poster image. Write a tool @$(poster) that downloads the poster image for the
#    movie named on the command line.
   @b(Ejercicio 4.13): El servicio web basado en JSON de Open Movie Database le
   permite buscar en @l(https://omdbapi.com/) una pelicula por su nombre y
   descargar la su imagen del poster. Escriba una herramienta @$(poster) que
   descargue la imagen del poster de la pelicula que se nombre en la linea de
   comandos.

# ** Section 4.6 <> Text and HTML Templates
** Seccion 4.6 <> Plantillas de Texto y HTML

#    The previous example does only the simplest possible formatting, for which
#    @c(Printf) is entirely adequate. But sometimes formatting must be more
#    elaborate, and it’s desirable to separate the format from the code more
#    completely. This can be done with the @c(text/template) and @c(html/template)
#    packages, which provide a mechanism for substituting the values of variables
#    into a text or HTML template.
   El ejemplo anterior muestra como hacer el formato lo mas simple posible, para
   lo cual @c(Printf) es completamente adecuado. Pero a veces el formato debe
   ser mas elaborado, y es deseable separar el formato del codigo completamente.
   Esto se puede hacer con los paquetes @c(text/template) y @c(html/template),
   que proporcionan un mecanismo para la sustitucion de los valores de las
   variables en una plantilla de texto o HTML.

#    A template is a string or file containing one or more portions enclosed in
#    double braces, @c({{...}}), called @e(actions). Most of the string is printed
#    literally, but the actions trigger other behaviors. Each action contains an
#    expression in the template language, a simple but powerful notation for
#    printing values, selecting struct fields, calling functions and methods,
#    expressing control flow such as @c(if)-@c(else) statements and @c(range)
#    loops, and instantiating other templates. A simple template string is shown
#    below:
   Una plantilla es una cadena o un archivo que contiene una o mas partes
   encerradas entre llaves dobles, @c({{...}}), llamadas @e(acciones). La mayor
   parte de la cadena se imprime literalmente, pero las acciones desencadenan
   otros comportamientos. Cada accion contiene una expresion en el lenguaje de
   la plantilla, una notacion sencilla pero poderosa para imprimir valores,
   seleccionar de campos de la estructura, llamar a la funciones y metodos,
   expresar el flujo de control, como sentencias @c(if)-@c(else) y bucles
   @c(range), y crear instancias de otras plantillas. A continuacion se muestra
   una cadena de plantilla simple:

#    ..figure > @l(gopl.io/ch4/issuesreport/main.go<>gopl.io/ch4/issuesreport)
   ..figure > @l(gopl.io/ch4/issuesreport/main.go<>gopl.io/ch4/issuesreport)

#      ..src > go
#        const templ = `{{.TotalCount}} issues:
#        {{range .Items}}----------------------------------------
#        Number: {{.Number}}
#        User:   {{.User.Login}}
#        Title:  {{.Title | printf "%.64s"}}
#        Age:    {{.CreatedAt | daysAgo}} days
#        {{end}}`
#      < src..
     ..src > go
       const templ = `{{.TotalCount}} issues:
       {{range .Items}}----------------------------------------
       Number: {{.Number}}
       User:   {{.User.Login}}
       Title:  {{.Title | printf "%.64s"}}
       Age:    {{.CreatedAt | daysAgo}} days
       {{end}}`
     < src..


#    This template first prints the number of matching issues, then prints the
#    number, user, title, and age in days of each one. Within an action, there is
#    a notion of the current value, referred to as @"(dot) and written as @"(.), a
#    period. The dot initially refers to the template’s parameter, which will be a
#    @c(github.IssuesSearchResult) in this example. The @c({{.TotalCount}}) action
#    expands to the value of the @c(TotalCount) field, printed in the usual
#    way. The @c({{range .Items}}) and @c({{end}}) actions create a loop, so the
#    text between them is expanded multiple times, with dot bound to successive
#    elements of @c(Items).
   Esta plantilla primero imprime el numero de problemas encontrados, luego
   imprime el numero, usuario, titulo y edad en dias de cada uno. Dentro de una
   accion, hay una nocion del valor actual, denominado como @"(punto) y escrita
   como @"(.), un punto. El punto se refiere inicialmente al parametro de la
   plantilla, que sera en este ejemplo @c(github.IssuesSearchResult). La accion
   @c({{.TotalCount}}) expande al valor del campo @c(TotalCount), que se imprime
   en la forma habitual. Las acciones @c({{range .Items}}) y @c({{end}}) crean
   un bucle, por lo que el texto entre ellos se expande varias veces, con el
   punto ligado a elementos sucesivos de @c(Items).

#    Within an action, the @c(|) notation makes the result of one operation the
#    argument of another, analogous to a Unix shell pipeline. In the case of
#    @c(Title), the second operation is the @c(printf) function, which is a
#    built-in synonym for @c(fmt.Sprintf) in all templates. For @c(Age), the
#    second operation is the following function, @c(daysAgo), which converts the
#    @c(CreatedAt) field into an elapsed time, using @c(time.Since):
   Dentro de una accion, la notacion @c(|) hace que el resultado de una
   operacion sea el argumento de otra, analoga a una tuberia del shell de
   Unix. En el caso de @c(Title), la segunda operacion es la funcion @c(printf),
   que es un sinonimo nativo para @c(fmt.Sprintf) en todas las plantillas. Para
   @c(Age), la segunda operacion es la funcion, @c(daysAgo), que convierte el
   campo @c(CreatedAt) en el tiempo transcurrido, usando @c(time.Since):

#    ..src > go
#      func daysAgo(t time.Time) int {
#        return int(time.Since(t).Hours() / 24)
#      }
#    < src..
   ..src > go
     func daysAgo(t time.Time) int {
       return int(time.Since(t).Hours() / 24)
     }
   < src..

#    Notice that the type of @c(CreatedAt) is @c(time.Time), not @c(string). In
#    the same way that a type may control its string formatting (@l(#Section
#    2.5<>§2.5)) by defining certain methods, a type may also define methods to
#    control its JSON marshaling and unmarshaling behavior. The JSON-marshaled
#    value of a @c(time.Time) is a string in a standard format.
   Observe que el tipo de @c(CreatedAt) es @c(time.Time), no @c(string). Del
   mismo modo que un tipo puede controlar su formato de cadena (@l(#Seccion
   2.5<>§2.5)) mediante la definicion de ciertos metodos, un tipo puede definir
   tambien metodos para controlar su comportamiento para el marshaling y
   unmarshaling JSON. El valor marshaling JSON de un @c(time.Time) es una cadena
   en un formato estandar.

#    Producing output with a template is a two-step process. First we must parse
#    the template into a suitable internal representation, and then execute it on
#    specific inputs. Parsing need be done only once. The code below creates and
#    parses the template @c(templ) defined above. Note the chaining of method
#    calls: @c(template.New) creates and returns a template; @c(Funcs) adds
#    @c(daysAgo) to the set of functions accessible within this template, then
#    returns that template; finally, @c(Parse) is called on the result.
   Producir la salida con una plantilla es un proceso de dos pasos. Primero
   debemos analizar la plantilla en una representacion interna adecuada, y luego
   ejecutarla en entradas especificas. El analisis se debe hacer solo una
   vez. El siguiente codigo crea y analiza la plantilla templ definida
   anteriormente. Observe el encadenamiento de llamadas a metodos:
   @c(template.New) crea y devuelve una plantilla; @c(Funcs) añade @c(daysAgo)
   al conjunto de funciones accesibles dentro de esta plantilla, luego, devuelve
   esa plantilla; Por ultimo, se llama a @c(Parse) en el resultado.

#    ..src > go
#      report, err := template.New("report").
#        Funcs(template.FuncMap{"daysAgo": daysAgo}).
#        Parse(templ)
#      if err != nil {
#        log.Fatal(err)
#      }
#    < src..
   ..src > go
     report, err := template.New("report").
       Funcs(template.FuncMap{"daysAgo": daysAgo}).
       Parse(templ)
     if err != nil {
       log.Fatal(err)
     }
   < src..

#    Because templates are usually fixed at compile time, failure to parse a
#    template indicates a fatal bug in the program. The @c(template.Must) helper
#    function makes error handling more convenient: it accepts a template and an
#    error, checks that the error is nil (and panics otherwise), and then returns
#    the template. We’ll come back to this idea in @l(#Section 5.9).
   Dado que las plantillas suelen fijarse en tiempo de compilacion, la falta de
   analisis de una plantilla indica un error fatal en el programa. La funcion
   auxiliar @c(template.Must) hace que el manejo de errores sea mas conveniente:
   acepta una plantilla y un error, comprueba que el error es nil (y panicos de
   lo contrario) y, luego devuelve la plantilla. Volveremos a esta idea en la
   @l(#Seccion 5.9).

#    Once the template has been created, augmented with @c(daysAgo), parsed, and
#    checked, we can execute it using a @c(github.IssuesSearchResult) as the data
#    source and @c(os.Stdout) as the destination:
   Una vez la plantilla ha sido creada, aumentada con @c(daysAgo), analizada y
   comprobada, podemos ejecutarla utilizando como fuente de datos
   @c(github.IssuesSearchResult) y @c(os.Stdout) como el destino:

#    ..src > go
#      var report = template.Must(template.New("issuelist").
#        Funcs(template.FuncMap{"daysAgo": daysAgo}).
#        Parse(templ))
#
#      func main() {
#        result, err := github.SearchIssues(os.Args[1:])
#        if err != nil {
#          log.Fatal(err)
#        }
#        if err := report.Execute(os.Stdout, result); err != nil {
#          log.Fatal(err)
#        }
#      }
#    < src..
   ..src > go
     var report = template.Must(template.New("issuelist").
       Funcs(template.FuncMap{"daysAgo": daysAgo}).
       Parse(templ))

     func main() {
       result, err := github.SearchIssues(os.Args[1:])
       if err != nil {
         log.Fatal(err)
       }
       if err := report.Execute(os.Stdout, result); err != nil {
         log.Fatal(err)
       }
     }
   < src..

#    The program prints a plain text report like this:
   El programa imprime un informe en texto plano como este:

#    ..src > sh
#      $ go build gopl.io/ch4/issuesreport
#      $ ./issuesreport repo:golang/go is:open json decoder
#      13 issues:
#      ---------------------------------------
#      Number: 5680
#      User:   eaigner
#      Title:  encoding/json: set key converter on en/decoder
#      Age:    750 days
#      ---------------------------------------
#      Number: 6050
#      User:   gopherbot
#      Title:  encoding/json: provide tokenizer
#      Age:    695 days
#      ---------------------------------------
#      ...
#    < src..
   ..src > sh
     $ go build gopl.io/ch4/issuesreport
     $ ./issuesreport repo:golang/go is:open json decoder
     13 issues:
     ---------------------------------------
     Number: 5680
     User:   eaigner
     Title:  encoding/json: set key converter on en/decoder
     Age:    750 days
     ---------------------------------------
     Number: 6050
     User:   gopherbot
     Title:  encoding/json: provide tokenizer
     Age:    695 days
     ---------------------------------------
     ...
   < src..

#    Now let’s turn to the @c(html/template) package. It uses the same API and
#    expression language as @c(text/template) but adds features for automatic and
#    context-appropriate escaping of strings appearing within HTML, JavaScript,
#    CSS, or URLs. These features can help avoid a perennial security problem of
#    HTML generation, an @e(injection attack), in which an adversary crafts a
#    string value like the title of an issue to include malicious code that, when
#    improperly escaped by a template, gives them control over the page.
   Ahora pasemos al paquete @c(html/template). Utiliza el mismo API y el mismo
   lenguaje de expresion que @c(text/template) pero añade caracteristicas para
   el escape automatico y apropiado de cadanes que aparecen dentro de HTML,
   JavaScript, CSS o URLs. Estas caracteristicas pueden ayudar a evitar un
   problema de seguridad perenne de la generacion de HTML, un @e(ataque de
   inyeccion), en el que un adversario crea un valor de cadena como el titulo de
   un tema, para incluir codigo malicioso, que cuando se escapa indebidamente
   por una plantilla, les da control sobre la pagina.

#    The template below prints the list of issues as an HTML table. Note the
#    different import:
   La plantilla siguiente muestra la lista de temas como una tabla HTML.
   Observe la diferente importacion:

#    ..figure > @l(gopl.io/ch4/issueshtml/main.go<>gopl.io/ch4/issueshtml)
   ..figure > @l(gopl.io/ch4/issueshtml/main.go<>gopl.io/ch4/issueshtml)

#      ..src > go
#        import "html/template"
#
#        var issueList = template.Must(template.New("issuelist").Parse(`
#        <h1>{{.TotalCount}} issues</h1>
#        <table>
#        <tr style='text-align: left'>
#          <th>#</th>
#          <th>State</th>
#          <th>User</th>
#          <th>Title</th>
#        </tr>
#        {{range .Items}}
#        <tr>
#          <td><a href='{{.HTMLURL}}'>{{.Number}}</a></td>
#          <td>{{.State}}</td>
#          <td><a href='{{.User.HTMLURL}}'>{{.User.Login}}</a></td>
#          <td><a href='{{.HTMLURL}}'>{{.Title}}</a></td>
#        </tr>
#        {{end}}
#        </table>
#        `))
#      < src..
     ..src > go
       import "html/template"

       var issueList = template.Must(template.New("issuelist").Parse(`
       <h1>{{.TotalCount}} issues</h1>
       <table>
       <tr style='text-align: left'>
         <th>#</th>
         <th>State</th>
         <th>User</th>
         <th>Title</th>
       </tr>
       {{range .Items}}
       <tr>
         <td><a href='{{.HTMLURL}}'>{{.Number}}</a></td>
         <td>{{.State}}</td>
         <td><a href='{{.User.HTMLURL}}'>{{.User.Login}}</a></td>
         <td><a href='{{.HTMLURL}}'>{{.Title}}</a></td>
       </tr>
       {{end}}
       </table>
       `))
     < src..


#    The command below executes the new template on the results of a slightly
#    different query:
   El siguiente comando ejecuta la nueva plantilla en los resultados de una
   consulta ligeramente diferente:

#    ..src > sh
#      $ go build gopl.io/ch4/issueshtml
#      $ ./issueshtml repo:golang/go commenter:gopherbot json encoder >issues.html
#    < src..
   ..src > sh
     $ go build gopl.io/ch4/issueshtml
     $ ./issueshtml repo:golang/go commenter:gopherbot json encoder >issues.html
   < src..

#    Figure 4.4 shows the appearance of the table in a web browser. The links
#    connect to the appropriate web pages at GitHub.
   La figura 4.4 muestra la apariencia de la tabla en un navegador web. Los
   enlaces se conectan a las paginas web apropiadas en GitHub.

#    ..figure > Figure 4.4. An HTML table of Go project issues relating to JSON
#      encoding.
   ..figure > Figura 4.4. Una tabla HTML de los temas del proyecto Go
     relacionados con la codificacion JSON.

#      ..img > img/Figure-4.4.jpg
     ..img > img/Figure-4.4.jpg


#    None of the issues in Figure 4.4 pose a challenge for HTML, but we can see
#    the effect more clearly with issues whose titles contain HTML metacharacters
#    like @c(&) and @c(<). We’ve selected two such issues for this example:
   Ninguno de los temas en la Figura 4.4 representan un desafio para HTML, pero
   podemos ver el efecto mas claramente con temas cuyos titulos contienen
   metacaracteres HTML como @c(&) y @c(<). Hemos seleccionado dos problemas para
   este ejemplo:

#    ..src > sh
#      $ ./issueshtml repo:golang/go 3133 10535 >issues2.html
#    < src..
   ..src > sh
     $ ./issueshtml repo:golang/go 3133 10535 >issues2.html
   < src..

#    Figure 4.5 shows the result of this query. Notice that the @c(html/template)
#    package automatically HTML-escaped the titles so that they appear
#    literally. Had we used the @c(text/template) package by mistake, the
#    four-character string @c("&lt;") would have been rendered as a less-than
#    character @c('<'), and the string @c("<link>") would have become a @c(link)
#    element, changing the structure of the HTML document and perhaps compromising
#    its security.
   La Figura 4.5 muestra el resultado de esta consulta. Observe que el paquete
   @c(html/template) de forma automatica escapa los titulos HTML de modo que
   aparezcan literalmente. Si por error hubieramos usado el paquete
   @c(text/template), la cadena de cuatro caracteres "&lt;" se habria convertido
   en el caracter @c('<') y la cadena @c("<link>") se habria convertido en un
   elemento @c(link), cambiando la estructura del documento HTML y tal vez
   comprometiendo su seguridad.

#    We can suppress this auto-escaping behavior for fields that contain trusted
#    HTML data by using the named string type @c(template.HTML) instead of
#    @c(string). Similar named types exist for trusted JavaScript, CSS, and
#    URLs. The program below demonstrates the principle by using two fields with
#    the same value but different types: @c(A) is a string and @c(B) is a
#    @c(template.HTML).
   Podemos suprimir este comportamiento de auto-escape para los campos que
   contienen datos HTML confiables mediante el uso de un  tipo de cadena
   denominada @c(template.HTML) en lugar de @c(string) . Existen tipos con nombres
   similares para JavaScript, CSS y URL de confianza. El siguiente programa
   demuestra el principio usando  campos con el mismo valor, pero
   con diferentes tipos: c(A) es un @c(string) y @c(B) es un @c(template.HTML).

#    ..figure > Figure 4.5. HTML metacharacters in issue titles are correctly
#      displayed.
   ..figure > Figura 4.5. Los metacaracteres HTML del titulos de temas se
     muestran correctamente.

#      ..img > img/Figure-4.5.jpg
     ..img > img/Figure-4.5.jpg

#    ..figure > @l(gopl.io/ch4/autoescape/main.go<>gopl.io/ch4/autoescape)
   ..figure > @l(gopl.io/ch4/autoescape/main.go<>gopl.io/ch4/autoescape)

#      ..src > go
#        func main() {
#          const templ = `<p>A: {{.A}}</p><p>B: {{.B}}</p>`
#          t := template.Must(template.New("escape").Parse(templ))
#          var data struct {
#            A string        // untrusted plain text
#            B template.HTML // trusted HTML
#          }
#          data.A = "<b>Hello!</b>"
#          data.B = "<b>Hello!</b>"
#          if err := t.Execute(os.Stdout, data); err != nil {
#            log.Fatal(err)
#          }
#        }
#      < src..
     ..src > go
       func main() {
         const templ = `<p>A: {{.A}}</p><p>B: {{.B}}</p>`
         t := template.Must(template.New("escape").Parse(templ))
         var data struct {
           A string        // texto sin fiavilidad
           B template.HTML // HTML confiable
         }
         data.A = "<b>Hello!</b>"
         data.B = "<b>Hello!</b>"
         if err := t.Execute(os.Stdout, data); err != nil {
           log.Fatal(err)
         }
       }
     < src..


#    Figure 4.6 shows the template’s output as it appears in a browser. We can see
#    that @c(A) was subject to escaping but @c(B) was not.
   La Figura 4.6 muestra la salida de la plantilla tal como aparece en un
   navegador. Podemos ver que @c(A) esta sujeto a escapar, pero @c(B) no.

#    ..figure > Figure 4.6. String values are HTML-escaped but @c(template.HTML)
#      values are not.
   ..figure > Figura 4.6. Los valores de cadena tinen escapado HTML escapado,
     pero los valores @c(template.HTML) no.

#      ..img > img/Figure-4.6.jpg
     ..img > img/Figure-4.6.jpg


#    We have space here to show only the most basic features of the template
#    system. As always, for more information, consult the package documentation:
   Tenemos espacio aqui para mostrar solo las caracteristicas mas basicas del
   sistema de plantillas. Como siempre, para obtener mas informacion, consulte
   la documentacion del paquete:

#    ..src > sh
#      $ go doc text/template
#      $ go doc html/template
#    < src..
   ..src > sh
     $ go doc text/template
     $ go doc html/template
   < src..

#    @b(Exercise 4.14): Create a web server that queries GitHub once and then
#    allows navigation of the list of bug reports, milestones, and users.
   @b(Ejercicio 4.14): Crear un servidor web que consulta GitHub una vez y luego
   permita la navegacion de la lista de informe de errores, hitos y usuarios.

# * Chapter 5 <> Functions
* Capitulo 5 <> Funciones

#   A function lets us wrap up a sequence of statements as a unit that can be
#   called from elsewhere in a program, perhaps multiple times. Functions make it
#   possible to break a big job into smaller pieces that might well be written by
#   different people separated by both time and space.  A function hides its
#   implementation details from its users. For all of these reasons, functions are
#   a critical part of any programming language.
  Una funcion nos permite envolver una secuencia de sentencias como una unidad
  que se puede llamar desde cualquier lugar de un programa, tal vez varias
  veces. Las funciones hacen posible romper un gran trabajo en pedazos mas
  pequeños que bien podrian ser escritos por diferentes personas separadas por
  el tiempo y el espacio. Una funcion oculta sus detalles de implementacion a
  sus usuarios. Por todas estas razones, las funciones son una parte critica de
  cualquier lenguaje de programacion.

#   We’ve seen many functions already. Now let’s take time for a more thorough
#   discussion. The running example of this chapter is a web crawler, that is, the
#   component of a web search engine responsible for fetching web pages,
#   discovering the links within them, fetching the pages identified by those
#   links, and so on. A web crawler gives us ample opportunity to explore
#   recursion, anonymous functions, error handling, and aspects of functions that
#   are unique to Go.
  Ya hemos visto muchas funciones. Ahora tomaremos un tiempo para una discusion
  mas exhaustiva. El ejemplo de ejecucion de este capitulo es un rastreador web,
  es decir, el componente de un motor de busqueda web responsable de buscar
  paginas web, descubrir los vinculos dentro de ellas, buscar las paginas
  identificadas por dichos vinculos, etc. Un rastreador web nos da una amplia
  oportunidad para explorar la recursividad, funciones anonimas, manejo de
  errores y aspectos de funciones que son unicos de Go.

# ** Section 5.1 <> Function Declarations
** Seccion 5.1 <> Declaracion de Funciones

#    A function declaration has a name, a list of parameters, an optional list of
#    results, and a body:
   Una declaracion de funcion tiene un nombre, una lista de parametros, una
   lista opcional de resultados y un cuerpo:

#    ..src > go
#      func name(parameter-list) (result-list) {
#        body
#      }
#    < src..
   ..src > go
     func rombre(lista-de-parametros) (lista-de-resultados) {
       cuerpo
     }
   < src..

#    The parameter list specifies the names and types of the function’s
#    @e(parameters), which are the local variables whose values or @e(arguments)
#    are supplied by the caller. The result list specifies the types of the values
#    that the function returns. If the function returns one unnamed result or no
#    results at all, parentheses are optional and usually omitted. Leaving off the
#    result list entirely declares a function that does not return any value and
#    is called only for its effects. In the @c(hypot) function,
   La lista de parametros especifica el nombres y tipos de los @e(parametros) de
   la funcion, que son las variables locales cuyos valores o argumentos son
   suministrados por quien hace la llamada. La lista de resultados especifica
   los tipos de los valores que devuelve la funcion. Si la funcion devuelve un
   resultado sin nombre o ningun resultado, los parentesis son opcionales y
   normalmente se omiten. Dejar fuera la lista de resultados declara
   completamente que una funcion que no devuelve ningun valor y se llama solo
   por sus efectos. En la funcion @c(hypot),

#    ..src > go
#      func hypot(x, y float64) float64 {
#        return math.Sqrt(x*x + y*y)
#      }
#
#      fmt.Println(hypot(3, 4)) // "5"
#    < src..
   ..src > go
     func hypot(x, y float64) float64 {
       return math.Sqrt(x*x + y*y)
     }

     fmt.Println(hypot(3, 4)) // "5"
   < src..

#    @c(x) and @c(y) are parameters in the declaration, @c(3) and @c(4) are
#    arguments of the call, and the function returns a @c(float64) value.
   @c(x) y @c(y) son parametros en la declaracion, @c(3) y @c(4) son argumentos
   de la llamada, y la funcion devuelve un valor @c(float64).

#    Like parameters, results may be named. In that case, each name declares a
#    local variable initialized to the zero value for its type.
   Al igual que los parametros, los resultados pueden tener nombre. En ese caso,
   cada nombre declara una variable local inicializada al valor cero para su
   tipo.

#    A function that has a result list must end with a @c(return) statement unless
#    execution clearly cannot reach the end of the function, perhaps because the
#    function ends with a call to @c(panic) or an infinite @c(for) loop with no
#    @c(break).
   Una funcion que tiene una lista de resultados debe terminar con una
   declaracion @c(return), a menos que la ejecucion claramente no pueda llegar
   al final de la funcion, tal vez porque la funcion termina con una llamada a
   @c(panic) o un bucle @c(for) infinito sin @c(break).

#    As we saw with @c(hypot), a sequence of parameters or results of the same
#    type can be factored so that the type itself is written only once. These two
#    declarations are equivalent:
   Como hemos visto con @c(hypot), una secuencia de parametros o resultados del
   mismo tipo puede ser un factor para que el propio tipo se escriba una sola
   vez. Estas dos declaraciones son equivalentes:

#    ..src > go
#      func f(i, j, k int, s, t string)                { /* ... */ }
#      func f(i int, j int, k int, s string, t string) { /* ... */ }
#    < src..
   ..src > go
     func f(i, j, k int, s, t string)                { /* ... */ }
     func f(i int, j int, k int, s string, t string) { /* ... */ }
   < src..

#    Here are four ways to declare a function with two parameters and one result,
#    all of type @c(int).  The blank identifier can be used to emphasize that a
#    parameter is unused.
   Aqui hay cuatro formas de declarar una funcion con dos parametros y un
   resultado, todos de tipo @c(int). El identificador en blanco puede usarse
   para enfatizar que un parametro no se utiliza.

#    ..src > go
#      func add(x int, y int) int   { return x + y }
#      func sub(x, y int) (z int)   { z = x - y; return }
#      func first(x int, _ int) int { return x }
#      func zero(int, int) int      { return 0 }
#
#      fmt.Printf("%T\n", add)   // "func(int, int) int"
#      fmt.Printf("%T\n", sub)   // "func(int, int) int"
#      fmt.Printf("%T\n", first) // "func(int, int) int"
#      fmt.Printf("%T\n", zero)  // "func(int, int) int"
#    < src..
   ..src > go
     func add(x int, y int) int   { return x + y }
     func sub(x, y int) (z int)   { z = x - y; return }
     func first(x int, _ int) int { return x }
     func zero(int, int) int      { return 0 }

     fmt.Printf("%T\n", add)   // "func(int, int) int"
     fmt.Printf("%T\n", sub)   // "func(int, int) int"
     fmt.Printf("%T\n", first) // "func(int, int) int"
     fmt.Printf("%T\n", zero)  // "func(int, int) int"
   < src..

#    The type of a function is sometimes called its @e(signature). Two functions
#    have the same type or signature if they have the same sequence of parameter
#    types and the same sequence of result types. The names of parameters and
#    results don’t affect the type, nor does whether or not they were declared
#    using the factored form.
   El tipo de una funcion a veces se denomina su @e(firma). Dos funciones tienen
   el mismo tipo o firma si tienen la misma secuencia de tipos de parametros y
   la misma secuencia de tipos de resultados. Los nombres de los parametros y
   resultados no afectan al tipo, ni tampoco si se declararon utilizando el
   formto factorizado.

#    Every function call must provide an argument for each parameter, in the order
#    in which the parameters were declared. Go has no concept of default parameter
#    values, nor any way to specify arguments by name, so the names of parameters
#    and results don’t matter to the caller except as documentation.
   Cada llamada de funcion debe proporcionar un argumento para cada parametro,
   en el orden en que se declararon los parametros. Go no tiene concepto de
   valores de parametro predeterminados, ni ninguna forma de especificar
   argumentos por nombre, por lo que los nombres de parametros y resultados no
   importan al llamador, excepto como documentacion.

#    Parameters are local variables within the body of the function, with their
#    initial values set to the arguments supplied by the caller. Function
#    parameters and named results are variables in the same lexical block as the
#    function’s outermost local variables.
   Los parametros son variables locales dentro del cuerpo de la funcion, con sus
   valores iniciales establecidos a los argumentos proporcionados por quien
   realiza la llamada. Los parametros de funcion y los resultados con nombre son
   variables en el mismo bloque lexico que las variables locales mas externas de
   la funcion.

#    Arguments are passed @e(by value), so the function receives a copy of each
#    argument; modifications to the copy do not affect the caller. However, if the
#    argument contains some kind of reference, like a pointer, slice, map,
#    function, or channel, then the caller may be affected by any modifications
#    the function makes to variables @e(indirectly) referred to by the argument.
   Los argumentos se pasan por valor, por lo que la funcion recibe una copia de
   cada argumento; Las modificaciones a la copia no afectan a la persona que
   llama. Sin embargo, si el argumento contiene algun tipo de referencia, como
   un puntero, slice, mapa, funcion o canal, entonces la persona que llama puede
   verse afectada por las modificaciones que hace la funcion de las variables
   que referencian @e(indirectamente) por el argumento.

#    You may occasionally encounter a function declaration without a body,
#    indicating that the function is implemented in a language other than Go. Such
#    a declaration defines the function signature.
   De vez en cuando puede encontrar una declaracion de funcion sin un cuerpo, lo
   que indica que la funcion se implementa en un idioma que no es Go. Dicha
   declaracion define la firma de la funcion.

#    ..src > go
#      package math
#
#      func Sin(x float64) float64 // implemented in assembly language
#    < src..
   ..src > go
     package math

     func Sin(x float64) float64 // implementado en lenguaje ensamblador
   < src..

# ** Section 5.2 <> Recursion
** Seccion 5.2 <> Recursividad

#    Functions may be @e(recursive), that is, they may call themselves, either
#    directly or indirectly.  Recursion is a powerful technique for many problems,
#    and of course it’s essential for processing recursive data structures. In
#    @l(#Section 4.4), we used recursion over a tree to implement a simple
#    insertion sort. In this section, we’ll use it again for processing HTML
#    documents.
   Las funciones pueden ser @e(recursivas), es decir, que pueden llamarse a si
   mismas, ya sea directa o indirectamente. La recursion es una tecnica poderosa
   para muchos problemas, y por supuesto es esencial para procesar estructuras
   de datos recursivas. En la @l(#Seccion 4.4), se utilizo la recursividad sobre
   un arbol para implementar un mecanismo de insercion sencillo. En esta
   seccion, volveremos a usarlo para procesar documentos HTML.

#    The example program below uses a non-standard package,
#    @c(golang.org/x/net/html), which provides an HTML parser. The
#    @c(golang.org/x/...) repositories hold packages designed and maintained by
#    the Go team for applications such as networking, internationalized text
#    processing, mobile platforms, image manipulation, cryptography, and developer
#    tools. These packages are not in the standard library because they’re still
#    under development or because they’re rarely needed by the majority of Go
#    programmers.
   El siguiente programa de ejemplo utiliza un paquete no estandar,
   @c(golang.org/x/net/html), que proporciona un analizador de HTML. Los
   repositorios @c(golang.org/x/...) tienen paquetes diseñados y mantenidos por
   el equipo de Go para aplicaciones tales como redes, procesamiento de texto
   internacionalizado, plataformas moviles, manipulacion de imagenes,
   criptografia, y herramientas de desarrollo. Estos paquetes no estan en la
   libreria estandar porque todavia estan en desarrollo o porque son raramente
   necesarios por la mayoria de los programadores de Go.

#    The parts of the @c(golang.org/x/net/html) API that we’ll need are shown
#    below. The function @c(html.Parse) reads a sequence of bytes, parses them,
#    and returns the root of the HTML document tree, which is an @c(html.Node).
#    HTML has several kinds of nodes—text, comments, and so on—but here we are
#    concerned only with element nodes of the form @c(<name key='value'>).
   Las partes de  la API @c(golang.org/x/net/html) que tendremos que se muestran a
   continuacion. La funcion @c(html.Parse) lee una secuencia de bytes, los analiza,
   y devuelve la raiz del arbol del documento HTML, que es un @c(html.Node). HTML
   tiene varios tipos de nodos–texto, comentarios, etc.–pero aqui solo nos
   interesan con nodos de elemento de la forma @c(<nombre clave='valor'>).

#    ..figure > @c(golang.org/x/net/html)
   ..figure > @c(golang.org/x/net/html)

#      ..src > go
#        package html
#        type Node struct {
#          Type                    NodeType
#          Data                    string
#          Attr                    []Attribute
#          FirstChild, NextSibling *Node
#        }
#
#        type NodeType int32
#
#        const (
#          ErrorNode NodeType = iota
#          TextNode
#          DocumentNode
#          ElementNode
#          CommentNode
#          DoctypeNode
#        )
#
#        type Attribute struct {
#          Key, Val string
#        }
#
#        func Parse(r io.Reader) (*Node, error)
#      < src..
     ..src > go
       package html
       type Node struct {
         Type                    NodeType
         Data                    string
         Attr                    []Attribute
         FirstChild, NextSibling *Node
       }

       type NodeType int32

       const (
         ErrorNode NodeType = iota
         TextNode
         DocumentNode
         ElementNode
         CommentNode
         DoctypeNode
       )

       type Attribute struct {
         Key, Val string
       }

       func Parse(r io.Reader) (*Node, error)
     < src..


#    The @c(main) function parses the standard input as HTML, extracts the links
#    using a recursive @c(visit) function, and prints each discovered link:
   La funcion @c(main) analiza la entrada estandar como HTML, extrae los enlaces
   usando un cuncion recursiva @c(visit), e imprime cada enlace descubierto:

#    ..figure > @l(gopl.io/ch5/findlinks1/main.go<>gopl.io/ch5/findlinks1)
   ..figure > @l(gopl.io/ch5/findlinks1/main.go<>gopl.io/ch5/findlinks1)

#      ..src > go
#        // Findlinks1 prints the links in an HTML document read from standard input.
#        package main
#
#        import (
#          "fmt"
#          "os"
#
#          "golang.org/x/net/html"
#        )
#
#        func main() {
#          doc, err := html.Parse(os.Stdin)
#          if err != nil {
#            fmt.Fprintf(os.Stderr, "findlinks1: %v\n", err)
#            os.Exit(1)
#          }
#          for _, link := range visit(nil, doc) {
#            fmt.Println(link)
#          }
#        }
#      < src..
     ..src > go
       // Findlinks1 imprime los enlaces en un documento HTML leido en la entrada estandar
       package main

       import (
         "fmt"
         "os"

         "golang.org/x/net/html"
       )

       func main() {
         doc, err := html.Parse(os.Stdin)
         if err != nil {
           fmt.Fprintf(os.Stderr, "findlinks1: %v\n", err)
           os.Exit(1)
         }
         for _, link := range visit(nil, doc) {
           fmt.Println(link)
         }
       }
     < src..


#    The @c(visit) function traverses an HTML node tree, extracts the link from
#    the @c(href) attribute of each @e(anchor) element @c(<a href='...'>), appends
#    the links to a slice of strings, and returns the resulting slice:
   La funcion @c(visit) atraviesa un arbol de nodos HTML, extrae el enlace desde
   el atributo @c(href) de cada elemento de @e(anclaje) @c(<a href='...'>),
   añade los enlaces a un slice de strings, y devuelve el slice resultante:

#    ..src > go
#      // visit appends to links each link found in n and returns the result.
#      func visit(links []string, n *html.Node) []string {
#        if n.Type == html.ElementNode && n.Data == "a" {
#          for _, a := range n.Attr {
#            if a.Key == "href" {
#              links = append(links, a.Val)
#            }
#          }
#        }
#        for c := n.FirstChild; c != nil; c = c.NextSibling {
#          links = visit(links, c)
#        }
#        return links
#      }
#    < src..
   ..src > go
     // visit agrega los enlaces de cada enlace encontrado en n y devuelve el resultado
     func visit(links []string, n *html.Node) []string {
       if n.Type == html.ElementNode && n.Data == "a" {
         for _, a := range n.Attr {
           if a.Key == "href" {
             links = append(links, a.Val)
           }
         }
       }
       for c := n.FirstChild; c != nil; c = c.NextSibling {
         links = visit(links, c)
       }
       return links
     }
   < src..

#    To descend the tree for a node @c(n), @c(visit) recursively calls itself for
#    each of @c(n)’s children, which are held in the @c(FirstChild) linked list.
   Para descender por el arbol a un nodo @c(n), @c(visit) se llama a si misma
   recursivamente para cada uno de los hijos de @c(n), que se mantienen en el
   lista enlazada @c(FirstChild).

#    Let’s run @$(findlinks) on the Go home page, piping the output of @$(fetch)
#    (@l(#Section 1.5<>§1.5)) to the input of @$(findlinks). We’ve edited the
#    output slightly for brevity.
   Vamos a ejecutar @$(findlinks) en la pagina principal de Go, canalizando el
   resultado de @$(fetch) (@l(#Seccion 1.5<>§1.5)) a la entrada de
   @$(findlinks). Hemos modificado la salida ligeramente por brevedad.

#    ..src > sh
#      $ go build gopl.io/ch1/fetch
#      $ go build gopl.io/ch5/findlinks1
#      $ ./fetch https://golang.org | ./findlinks1
#      #
#      /doc/
#      /pkg/
#      /help/
#      /blog/
#      http://play.golang.org/
#      //tour.golang.org/
#      https://golang.org/dl/
#      //blog.golang.org/
#      /LICENSE
#      /doc/tos.html
#      http://www.google.com/intl/en/policies/privacy/
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetch
     $ go build gopl.io/ch5/findlinks1
     $ ./fetch https://golang.org | ./findlinks1
     #
     /doc/
     /pkg/
     /help/
     /blog/
     http://play.golang.org/
     //tour.golang.org/
     https://golang.org/dl/
     //blog.golang.org/
     /LICENSE
     /doc/tos.html
     http://www.google.com/intl/en/policies/privacy/
   < src..

#    Notice the variety of forms of links that appear in the page. Later we’ll see
#    how to resolve them relative to the base URL, @c(https://golang.org), to make
#    absolute URLs.
   Observe la variedad de formas de enlaces que aparecen en la pagina. Mas
   adelante veremos como resolverlos con relacion al URL base,
   @c(https://golang.org), para crear URL absolutas.

#    The next program uses recursion over the HTML node tree to print the
#    structure of the tree in outline. As it encounters each element, it pushes
#    the element’s tag onto a stack, then prints the stack.
   El siguiente programa utiliza la recursion sobre el arbol de nodos HTML para
   imprimir la estructura del arbol en esquema. Cuando encuentra cada elemento,
   empuja la etiqueta del elemento sobre una pila, luego imprime la pila.

#    ..figure > @l(gopl.io/ch5/outline/main.go<>gopl.io/ch5/outline)
   ..figure > @l(gopl.io/ch5/outline/main.go<>gopl.io/ch5/outline)

#      ..src > go
#        func main() {
#          doc, err := html.Parse(os.Stdin)
#          if err != nil {
#            fmt.Fprintf(os.Stderr, "outline: %v\n", err)
#            os.Exit(1)
#          }
#          outline(nil, doc)
#        }
#
#        func outline(stack []string, n *html.Node) {
#          if n.Type == html.ElementNode {
#            stack = append(stack, n.Data) // push tag
#            fmt.Println(stack)
#          }
#          for c := n.FirstChild; c != nil; c = c.NextSibling {
#            outline(stack, c)
#          }
#        }
#      < src..
     ..src > go
       func main() {
         doc, err := html.Parse(os.Stdin)
         if err != nil {
           fmt.Fprintf(os.Stderr, "outline: %v\n", err)
           os.Exit(1)
         }
         outline(nil, doc)
       }

       func outline(stack []string, n *html.Node) {
         if n.Type == html.ElementNode {
           stack = append(stack, n.Data) // push tag
           fmt.Println(stack)
         }
         for c := n.FirstChild; c != nil; c = c.NextSibling {
           outline(stack, c)
         }
       }
     < src..


#    Note one subtlety: although @c(outline) @"(pushes) an element on @c(stack),
#    there is no corresponding pop. When outline calls itself recursively, the
#    callee receives a copy of @c(stack). Although the callee may append elements
#    to this slice, modifying its underlying array and perhaps even allocating a
#    new array, it doesn’t modify the initial elements that are visible to the
#    caller, so when the function returns, the caller’s @c(stack) is as it was
#    before the call.
   Considere una sutileza: aunque @c(outline) @"(empuja) un elemento en el
   @c(stack), no hay ninguna extraccion correspondiente. Cuando @c(outline) se
   llama a si misma de forma recursiva, el receptor recibe una copia del
   @c(stack). Aunque el destinatario de la llamada puede añadir elementos a este
   slice, modificando de su arreglo subyacente e incluso asignando un nuevo
   arreglo, no modifica los elementos iniciales que son visibles para quien
   realiza la llamada, asi que cuando la funcion regresa, el @c(stack) del
   llamantede es tal cual antes de la llamada.

#    Here’s the outline of @c(https://golang.org), again edited for brevity:
   Aqui esta el esquema de @c(https://golang.org), editado nuevamente por
   razones de brevedad:

#    ..src > sh
#      $ go build gopl.io/ch5/outline
#      $ ./fetch https://golang.org | ./outline
#      [html]
#      [html head]
#      [html head meta]
#      [html head title]
#      [html head link]
#      [html body]
#      [html body div]
#      [html body div]
#      [html body div div]
#      [html body div div form]
#      [html body div div form div]
#      [html body div div form div a]
#    < src..
   ..src > sh
     $ go build gopl.io/ch5/outline
     $ ./fetch https://golang.org | ./outline
     [html]
     [html head]
     [html head meta]
     [html head title]
     [html head link]
     [html body]
     [html body div]
     [html body div]
     [html body div div]
     [html body div div form]
     [html body div div form div]
     [html body div div form div a]
   < src..

#    As you can see by experimenting with @c(outline), most HTML documents can be
#    processed with only a few levels of recursion, but it’s not hard to construct
#    pathological web pages that require extremely deep recursion.
   Como puede ver mediante la experimentacion con @c(outline), la mayoria de los
   documentos HTML pueden ser procesados con solo unos pocos niveles de
   recursividad, pero no es dificil de construir paginas web patologicas que
   requieren una recursion extremadamente profunda.

#    Many programming language implementations use a fixed-size function call
#    stack; sizes from 64KB to 2MB are typical. Fixed-size stacks impose a limit
#    on the depth of recursion, so one must be careful to avoid a @e(stack
#    overflow) when traversing large data structures recursively; fixed-size
#    stacks may even pose a security risk. In contrast, typical Go implementations
#    use variable-size stacks that start small and grow as needed up to a limit on
#    the order of a gigabyte.  This lets us use recursion safely and without
#    worrying about overflow.
   Muchas implementaciones de lenguaje de programacion utilizan una funcion
   stack de tamaño fijo; Tamaños de 64KB a 2MB son tipicos. Pilas de tamaño fijo
   imponen un limite en la profundidad de la recursividad, por lo que hay que
   tener cuidado para evitar un desbordamiento de pila cuando se atraviesa
   grandes estructuras de datos de forma recursiva; Las pilas de tamaño fijo
   pueden incluso suponer un riesgo para la seguridad. En contraste, las
   implementaciones tipicas de Go usan pilas de tamaño variable que comienzan
   pequeñas y crecen segun sea necesario hasta un limite del orden de un
   gigabyte. Esto nos permite usar la recursion de forma segura y sin
   preocuparnos por el desbordamiento.

#    @b(Exercise 5.1): Change the @$(findlinks) program to traverse the
#    @c(n.FirstChild) linked list using recursive calls to @c(visit) instead of a
#    loop.
   @b(Ejercicio 5.1): Cambiar el programa @$(findlinks) para atravesar la lista
   enlazada @c(n.FirstChild) mediante llamadas recursivas a @c(visit) en lugar
   de un bucle.

#    @b(Exercise 5.2): Write a function to populate a mapping from element
#    names—@c(p), @c(div), @c(span), and so on—to the number of elements with that
#    name in an HTML document tree.
   @b(Ejercicio 5.2): Escribir una funcion para rellenar un mapeo con los
   nombres de los elementos–@c(p), @c(div), @c(span), y asi sucesivamente-al
   numero de elementos con ese nombre en un arbol de documentos HTML.

#    @b(Exercise 5.3): Write a function to print the contents of all text nodes in
#    an HTML document tree. Do not descend into @c(<script>) or @c(<style>)
#    elements, since their contents are not visible in a web browser.
   @b(Ejercicio 5.3): Escribir una funcion para imprimir el contenido de todos
   los nodos de texto en un arbol de documentos HTML. No descender dentro de
   elementos @c(<script>) o @c(<style>), ya que sus contenidos no son visibles
   en un navegador web.

#    @b(Exercise 5.4): Extend the @c(visit) function so that it extracts other
#    kinds of links from the document, such as images, scripts, and style sheets.
   @b(Ejercicio 5.4): Extender la funcion @c(visit) para que los extractos otros
   tipos de enlaces desde el documento, como imagenes, scripts y hojas de
   estilo.

# ** Section 5.3 <> Multiple Return Values
** Seccion 5.3 <> Multiples Valores de Retorno

#    A function can return more than one result. We’ve seen many examples of
#    functions from standard packages that return two values, the desired
#    computational result and an error value or boolean that indicates whether the
#    computation worked. The next example shows how to write one of our own.
   Una funcion puede devolver mas de un resultado. Hemos visto muchos ejemplos
   de funciones de paquetes estandar que devuelven dos valores, el resultado
   computacional deseado y un valor de error o booleano que indica si el calculo
   funciono. El siguiente ejemplo muestra como escribir una nosotros mismos.

#    The program below is a variation of @$(findlinks) that makes the HTTP request
#    itself so that we no longer need to run @$(fetch). Because the HTTP and
#    parsing operations can fail, @$(findLinks) declares two results: the list of
#    discovered links and an error. Incidentally, the HTML parser can usually
#    recover from bad input and construct a document containing error nodes, so
#    @c(Parse) rarely fails; when it does, it’s typically due to underlying I/O
#    errors.
   El programa siguiente es una variacion de @$(findlinks) que hace la peticion
   HTTP por si mismo, asi que ya no necesitamos para ejecutar @$(fetch). Ya que
   las operaciones de analisis y HTTP pueden fallar, @$(findLinks) declara dos
   resultados: la lista de enlaces descubiertos y un error. Por cierto, el
   analizador de HTML por lo general puede recuperarse de una entrada incorrecta
   y construir un documento que contiene nodos de error, por lo @c(Parse)
   raramente falla; Cuando lo hace, normalmente se debe a errores de E/S
   subyacentes.

#    ..figure > @l(gopl.io/ch5/findlinks2/main.go<>gopl.io/ch5/findlinks2)
   ..figure > @l(gopl.io/ch5/findlinks2/main.go<>gopl.io/ch5/findlinks2)

#      ..src > go
#        func main() {
#          for _, url := range os.Args[1:] {
#            links, err := findLinks(url)
#            if err != nil {
#              fmt.Fprintf(os.Stderr, "findlinks2: %v\n", err)
#              continue
#            }
#            for _, link := range links {
#              fmt.Println(link)
#            }
#          }
#        }
#
#        // findLinks performs an HTTP GET request for url, parses the
#        // response as HTML, and extracts and returns the links.
#        func findLinks(url string) ([]string, error) {
#          resp, err := http.Get(url)
#          if err != nil {
#            return nil, err
#          }
#          if resp.StatusCode != http.StatusOK {
#            resp.Body.Close()
#            return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
#          }
#          doc, err := html.Parse(resp.Body)
#          resp.Body.Close()
#          if err != nil {
#            return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
#          }
#          return visit(nil, doc), nil
#        }
#      < src..
     ..src > go
       func main() {
         for _, url := range os.Args[1:] {
           links, err := findLinks(url)
           if err != nil {
             fmt.Fprintf(os.Stderr, "findlinks2: %v\n", err)
             continue
           }
           for _, link := range links {
             fmt.Println(link)
           }
         }
       }

       // findLinks realiza una peticion HTTP GET por la url, analiza la
       // respuesta como HTML, y extrae y regresa los enlaces.
       func findLinks(url string) ([]string, error) {
         resp, err := http.Get(url)
         if err != nil {
           return nil, err
         }
         if resp.StatusCode != http.StatusOK {
           resp.Body.Close()
           return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
         }
         doc, err := html.Parse(resp.Body)
         resp.Body.Close()
         if err != nil {
           return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
         }
         return visit(nil, doc), nil
       }
     < src..


#    There are four return statements in @c(findLinks), each of which returns a
#    pair of values. The first three @c(return)s cause the function to pass the
#    underlying errors from the @c(http) and @c(html) packages on to the
#    caller. In the first case, the error is returned unchanged; in the second and
#    third, it is augmented with additional context information by @c(fmt.Errorf)
#    (@l(#Section 7.8<>§7.8)). If @c(findLinks) is successful, the final return
#    statement returns the slice of links, with no error.
   Hay cuatro sentencias @c(return) en @c(findLinks), cada uno de las cuales
   devuelve un par de valores. Los tres primeros @c(return) hacen la funcion
   pase los errores subyacentes de los paquetes @c(http) y @c(html) al
   llamador. En el primer caso, el error se devuelve sin cambios; en el segundo
   y tercero, que expande con informacion de contexto adicional con
   @c(fmt.Errorf) (@l(#Seccion 7.8<>§7.8)). Si @c(findLinks) tiene exito, la
   ultima sentencia @c(return) devuelve el slice de enlaces, sin error.

#    We must ensure that @c(resp.Body) is closed so that network resources are
#    properly released even in case of error. Go’s garbage collector recycles
#    unused memory, but do not assume it will release unused operating system
#    resources like open files and network connections. They should be closed
#    explicitly.
   Debemos asegurarnos de cerrar @c(resp.Body) para que los recursos de red se
   liberen adecuadamente, incluso en caso de error. El recolector de basura de
   Go recicla la memoria no utilizada, pero no asume que liberara recursos del
   sistema operativo no utilizados como archivos abiertos y conexiones de
   red. Deberan cerrarse explicitamente.

#    The result of calling a multi-valued function is a tuple of values. The
#    caller of such a function must explicitly assign the values to variables if
#    any of them are to be used:
   El resultado de llamar a una funcion multi-valor es una tupla de valores. El
   llamador de tal funcion debe asignar explicitamente los valores a las
   variables si se desea utilizar alguna de ellas:

#    ..src > go
#      links, err := findLinks(url)
#    < src..
   ..src > go
     links, err := findLinks(url)
   < src..

#    To ignore one of the values, assign it to the blank identifier:
   Para ignorar uno de los valores, asintelo al identificador en blanco:

#    ..src > go
#      links, _ := findLinks(url) // errors ignored
#    < src..
   ..src > go
     links, _ := findLinks(url) // errors ignored
   < src..

#    The result of a multi-valued call may itself be returned from a
#    (multi-valued) calling function, as in this function that behaves like
#    @c(findLinks) but logs its argument:
   El resultado de una llamada multi-valor en si puede ser devuelto desde una
   llamada funcion (multi-valor), como en esta funcion que se comporta como
   @c(findLinks) pero registra su argumento:

#    ..src > go
#      func findLinksLog(url string) ([]string, error) {
#        log.Printf("findLinks %s", url)
#        return findLinks(url)
#      }
#    < src..
   ..src > go
     func findLinksLog(url string) ([]string, error) {
       log.Printf("findLinks %s", url)
       return findLinks(url)
     }
   < src..

#    A multi-valued call may appear as the sole argument when calling a function
#    of multiple parameters. Although rarely used in production code, this feature
#    is sometimes convenient during debugging since it lets us print all the
#    results of a call using a single statement. The two print statements below
#    have the same effect.
   Una llamada multi-valor puede aparecer como el unico argumento cuando se
   llama a una funcion de multiples parametros. Aunque rara vez se utiliza en
   codigo de produccion, esta caracteristica es a veces conveniente durante la
   depuracion, ya que nos permite imprimir todos los resultados de una llamada
   utilizando una sola sentencia. Las dos instrucciones de impresion siguientes
   tienen el mismo efecto.

#    ..src > go
#      log.Println(findLinks(url))
#
#      links, err := findLinks(url)
#      log.Println(links, err)
#    < src..
   ..src > go
     log.Println(findLinks(url))

     links, err := findLinks(url)
     log.Println(links, err)
   < src..

#    Well-chosen names can document the significance of a function’s
#    results. Names are particularly valuable when a function returns multiple
#    results of the same type, like
   Los nombres bien elegidos pueden documentar la importancia de los resultados
   de una funcion. Los nombres son particularmente valiosos cuando una funcion
   devuelve multiples resultados del mismo tipo, como

#    ..src > go
#      func Size(rect image.Rectangle) (width, height int)
#      func Split(path string) (dir, file string)
#      func HourMinSec(t time.Time) (hour, minute, second int)
#    < src..
   ..src > go
     func Size(rect image.Rectangle) (width, height int)
     func Split(path string) (dir, file string)
     func HourMinSec(t time.Time) (hour, minute, second int)
   < src..

#    but it’s not always necessary to name multiple results solely for
#    documentation. For instance, convention dictates that a final @c(bool) result
#    indicates success; an @c(error) result often needs no explanation.
   Pero no siempre es necesario nombrar multiples resultados unicamente para la
   documentacion. Por ejemplo, la convencion dicta que un resultado final
   @c(bool) indica el exito; un resultado erroneo a menudo no necesita
   explicacion.

#    In a function with named results, the operands of a return statement may be
#    omitted. This is called a @e(bare return).
   En una funcion con resultados nombrados, se pueden omitir los operandos de
   una sentencia de devolucion. Esto se llama un @c(retorno desnudo).

#    ..src > go
#      // CountWordsAndImages does an HTTP GET request for the HTML
#      // document url and returns the number of words and images in it.
#      func CountWordsAndImages(url string) (words, images int, err error) {
#        resp, err := http.Get(url)
#        if err != nil {
#          return
#        }
#
#        doc, err := html.Parse(resp.Body)
#        resp.Body.Close()
#        if err != nil {
#          err = fmt.Errorf("parsing HTML: %s", err)
#          return
#        }
#        words, images = countWordsAndImages(doc)
#        return
#      }
#
#      func countWordsAndImages(n *html.Node) (words, images int) { /* ... */ }
#    < src..
   ..src > go
     // CountWordsAndImages realiza una peticion HTTP GET para la URL del
     // documento HTML y regresa el numero de palabras e imagenes que contiene.
     func CountWordsAndImages(url string) (words, images int, err error) {
       resp, err := http.Get(url)
       if err != nil {
         return
       }

       doc, err := html.Parse(resp.Body)
       resp.Body.Close()
       if err != nil {
         err = fmt.Errorf("parsing HTML: %s", err)
         return
       }
       words, images = countWordsAndImages(doc)
       return
     }

     func countWordsAndImages(n *html.Node) (words, images int) { /* ... */ }
   < src..

#    A bare return is a shorthand way to return each of the named result variables
#    in order, so in the function above, each return statement is equivalent to
   Un retorno desnudo es una forma abreviada de devolver cada una de las
   variables de resultado nombradas en orden, por lo que en la funcion anterior,
   cada sentencia @c(return) es equivalente a

#    ..src > go
#      return words, images, err
#    < src..
   ..src > go
     return words, images, err
   < src..

#    In functions like this one, with many return statements and several results,
#    bare returns can reduce code duplication, but they rarely make code easier to
#    understand. For instance, it’s not obvious at first glance that the two early
#    returns are equivalent to @c(return 0, 0, err) (because the result variables
#    @c(words) and @c(images) are initialized to their zero values) and that the
#    final @c(return) is equivalent to @c(return words, images, nil). For this
#    reason, bare returns are best used sparingly.
   En funciones como esta, con muchas declaraciones de retorno y varios
   resultados, los resultados desnudos pueden reducir la duplicacion de codigo,
   pero rara vez hacen que el codigo sea mas facil de entender. Por ejemplo, no
   es obvio a primera vista que los dos primeros resultados son equivalentes a
   @c(return 0, 0, err) (porque las variables de resultado @c(words) e
   @c(images) se inicializan con sus valores cero) y que el ultimo @c(return) es
   equivalente a @c(return words, images, nil). Por esta razon, es mejor
   utilizar los resultados desnudos con moderacion.

#    @b(Exercise 5.5): Implement @c(countWordsAndImages). (See Exercise 4.9 for
#    word-splitting.)
   @b(Ejercicio 5.5): Implementar @c(countWordsAndImages). (Ver el ejercicio 4.9
   para la division de palabras.)

#    @b(Exercise 5.6): Modify the @c(corner) function in @c(gopl.io/ch3/surface)
#    (@l(#Section 3.2<>§3.2)) to use named results and a bare return statement.
   @b(Ejercicio 5.6): Modificar la funcion @c(corner) en @c(gopl.io/ch3/surface)
   (@l(#Seccion 3.2<>§3.2)) para utilizar resultados con nombre y una
   declaracion de retorno desnudo.

# ** Section 5.4 <> Errors
** Seccion 5.4 <> Errores

#    Some functions always succeed at their task. For example,
#    @c(strings.Contains) and @c(strconv.FormatBool) have well-defined results for
#    all possible argument values and cannot fail— barring catastrophic and
#    unpredictable scenarios like running out of memory, where the symptom is far
#    from the cause and from which there’s little hope of recovery.
   Algunas funciones siempre tienen exito en su tarea. Por ejemplo,
   @c(strings.Contains) y @c(strconv.FormatBool) tienen bien definidos todos los
   posibles valores de los argumentos y no pueden fallar–salvo escenarios
   catastroficos e impredecibles como quedarse sin memoria, donde el sintoma
   esta lejos de la causa y de la cual hay poca esperanza de recuperacion.

#    Other functions always succeed so long as their preconditions are met. For
#    example, the @c(time.Date) function always constructs a @c(time.Time) from
#    its components—year, month, and so on—unless the last argument (the time
#    zone) is @c(nil), in which case it panics. This panic is a sure sign of a bug
#    in the calling code and should never happen in a well-written program.
   Otras funciones siempre tienen exito siempre y cuando se cumplan sus
   condiciones previas. Por ejemplo, la funcion @c(time.Date) siempre construye
   un @c(time.Time) a partir de sus componentes–año, mes, y asi sucesivamente–a
   menos que el ultimo argumento (la zona horaria) sea @c(nil), en cuyo caso se
   entra en panico. Este panico es un signo seguro de un error en el codigo de
   llamada y nunca debe suceder en un programa bien escrito.

#    For many other functions, even in a well-written program, success is not
#    assured because it depends on factors beyond the programmer’s control. Any
#    function that does I/O, for example, must confront the possibility of error,
#    and only a naïve programmer believes a simple read or write cannot
#    fail. Indeed, it’s when the most reliable operations fail unexpectedly that
#    we most need to know why.
   Para muchas otras funciones, incluso en un programa bien escrito, el exito no
   esta asegurado porque depende de factores ajenos al control del
   programador. Cualquier funcion que haga E/S, por ejemplo, debe enfrentarse a
   la posibilidad de error, y solo un programador ingenuo cree que una simple
   lectura o escritura no puede fallar. De hecho, es cuando las operaciones mas
   confiables fallan inesperadamente que necesitamos saber por que.

#    Errors are thus an important part of a package’s API or an application’s user
#    interface, and failure is just one of several expected behaviors. This is the
#    approach Go takes to error handling.
   Los errores son, por lo tanto, una parte importante de la API de un paquete o
   de la interfaz de usuario de una aplicacion, y el error es solo uno de varios
   comportamientos esperados. Este es el enfoque que Go toma respecto al manejo
   de errores.

#    A function for which failure is an expected behavior returns an additional
#    result, conventionally the last one. If the failure has only one possible
#    cause, the result is a boolean, usually called @c(ok), as in this example of a
#    cache lookup that always succeeds unless there was no entry for that key:
   Una funcion cuyo fallo es un comportamiento esperado devuelve un resultado
   adicional, convencionalmente el ultimo. Si el fallo tiene solo una causa
   posible, el resultado es un valor booleano, generalmente llamado @c(ok), como
   en este ejemplo de una busqueda en la cache que siempre tiene exito a menos
   que no hubiera ninguna entrada para esa clave:

#    ..src > go
#      value, ok := cache.Lookup(key)
#      if !ok {
#        // ...cache[key] does not exist...
#      }
#    < src..
   ..src > go
     value, ok := cache.Lookup(key)
     if !ok {
       // ...cache[key] does not exist...
     }
   < src..

#    More often, and especially for I/O, the failure may have a variety of causes
#    for which the caller will need an explanation. In such cases, the type of the
#    additional result is @c(error).
   Mas a menudo, y especialmente para E/S, el fallo puede tener una variedad
   de causas para las cuales el llamador necesitara una explicacion. En tales
   casos, el tipo del resultado adicional es @c(error).

#    The built-in type @c(error) is an interface type. We’ll see more of what this
#    means and its implications for error handling in @l(#Chapter 7). For now it’s
#    enough to know that an error may be nil or non-nil, that nil implies success
#    and non-nil implies failure, and that a non-nil @c(error) has an error
#    message string which we can obtain by calling its @c(Error) method or print
#    by calling @c[fmt.Println(err)] or @c[fmt.Printf("%v", err)].
   El tipo nativo @c(error) es un tipo de interfaz. Veremos mas de lo que esto
   significa y sus implicaciones para el manejo de errores en el @l(#Capitulo
   7). Por ahora es suficiente saber que un error puede ser o no @c(nil), que
   nil implica el exito y no-nil implica el fracaso, y que un error no-nil tiene
   una cadena del mensaje de error que se puede obtener llamando a su metodo
   @c(Error) o imprimir mediante @c[fmt.Println(err)] o @c[fmt.Printf("%v",
   err)].

#    Usually when a function returns a non-nil error, its other results are
#    undefined and should be ignored. However, a few functions may return partial
#    results in error cases. For example, if an error occurs while reading from a
#    file, a call to @c(Read) returns the number of bytes it was able to read
#    @e(and) an @c(error) value describing the problem. For correct behavior, some
#    callers may need to process the incomplete data before handling the error, so
#    it is important that such functions clearly document their results.
   Normalmente cuando una funcion devuelve un error no-nil, sus otros resultados
   son indefinidos y se deben ignorar. Sin embargo, algunas funciones pueden
   devolver resultados parciales en casos de error. Por ejemplo, si se produce
   un error durante la lectura de un archivo, una llamada a @c(Read) devuelve el
   numero de bytes que fue capaz de leer @e(y) un valor @c(error) que describe
   el problema. Para el comportamiento correcto, algunos llamadores pueden
   necesitar procesar los datos incompletos antes de manejar el error, por lo
   que es importante que estas funciones documente claramente sus resultados.

#    Go’s approach sets it apart from many other languages in which failures are
#    reported using @e(exceptions), not ordinary values. Although Go does have an
#    exception mechanism of sorts, as we will see in @l(#Section 5.9), it is used
#    only for reporting truly unexpected errors that indicate a bug, not the
#    routine errors that a robust program should be built to expect.
   El enfoque de Go lo diferencia de muchos otros lenguajes en los que se
   reportan fallos utilizando @e(excepciones), no valores normales. Aunque Go
   tiene un mecanismo de excepcion, como veremos en la @l(#Seccion 5.9), se
   utiliza solo para informar de los errores realmente inesperadas que indican
   un error, no los errores de rutina que un programa robusto deberia esperar.

#    The reason for this design is that exceptions tend to entangle the
#    description of an error with the control flow required to handle it, often
#    leading to an undesirable outcome: routine errors are reported to the end
#    user in the form of an incomprehensible stack trace, full of information
#    about the structure of the program but lacking intelligible context about
#    what went wrong.
   La razon de este diseño es que las excepciones tienden a enredar la
   descripcion de un error con el flujo de control requerido para manejarlo,
   conduciendo a menudo a un resultado indeseable: los errores de rutina se
   informan al usuario final en forma de un rastro de pila incomprensible, lleno
   de informacion sobre la estructura del programa pero carece de un contexto
   inteligible sobre lo que salio mal.

#    By contrast, Go programs use ordinary control-flow mechanisms like @c(if) and
#    @c(return) to respond to errors. This style undeniably demands that more
#    attention be paid to error-handling logic, but that is precisely the point.
   Por el contrario, los programas Go utilizan mecanismos de control de flujo
   normales como @c(if) y @c(return) para responder a los errores. Este estilo
   indudablemente exige que se preste mas atencion a la logica de manejo de
   errores, pero ese es precisamente el punto.

# *** Section 5.4.1 <> Error-Handling Strategies
*** Seccion 5.4.1 <> Estrategias de Manejo de Errores

#     When a function call returns an error, it’s the caller’s responsibility to
#     check it and take appropriate action. Depending on the situation, there may
#     be a number of possibilities. Let’s take a look at five of them.
    Cuando una llamada de funcion devuelve un error, es responsabilidad del
    llamador comprobarlo y tomar la accion apropiada. Dependiendo de la
    situacion, puede haber una serie de posibilidades. Echemos un vistazo a
    cinco de ellas.

#     First, and most common, is to @e(propagate) the error, so that a failure in
#     a subroutine becomes a failure of the calling routine. We saw examples of
#     this in the @c(findLinks) function of @l(#Section 5.3). If the call to
#     @c(http.Get) fails, @c(findLinks) returns the HTTP error to the caller without
#     further ado:
    La primera y mas comun, es @e(propagar) el error, por lo que un fallo en una
    subrutina se convierte en un fracaso de la rutina de llamada. Vimos ejemplos
    de esto en la funcion @c(findLinks) de la @l(#Seccion 5.3). Si la llamada a
    @c(http.Get) falla, @c(findLinks) devuelve el error HTTP a la persona al
    llamador sin mas preambulos:

#     ..src > go
#       resp, err := http.Get(url)
#       if err != nil {
#         return nil, err
#       }
#     < src..
    ..src > go
      resp, err := http.Get(url)
      if err != nil {
        return nil, err
      }
    < src..

#     In contrast, if the call to @c(html.Parse) fails, @c(findLinks) does not
#     return the HTML parser’s error directly because it lacks two crucial pieces
#     of information: that the error occurred in the parser, and the URL of the
#     document that was being parsed. In this case, @c(findLinks) constructs a new
#     error message that includes both pieces of information as well as the
#     underlying parse error:
    Por el contrario, si la llamada a @c(html.Parse) falla, @c(findLinks) no
    devuelve el error del analizador de HTML directamente, porque carece de dos
    piezas cruciales de informacion: que se produjo el error en el analizador, y
    la direccion URL del documento que se esta analizando. En este caso,
    @c(findLinks) construye un nuevo mensaje de error que incluye las dos piezas
    de informacion, asi como un analisis del error subyacente:

#     ..src > go
#       doc, err := html.Parse(resp.Body)
#       resp.Body.Close()
#       if err != nil {
#         return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
#       }
#     < src..
    ..src > go
      doc, err := html.Parse(resp.Body)
      resp.Body.Close()
      if err != nil {
        return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
      }
    < src..

#     The @c(fmt.Errorf) function formats an error message using @c(fmt.Sprintf)
#     and returns a new @c(error) value. We use it to build descriptive errors by
#     successively prefixing additional context information to the original error
#     message. When the error is ultimately handled by the program’s @c(main)
#     function, it should provide a clear causal chain from the root problem to
#     the overall failure, reminiscent of a NASA accident investigation:
    La funcion @c(fmt.Errorf) da formato a un mensaje de error utilizando
    @c(fmt.Sprintf) y devuelve un nuevo valor @c(error). Lo utilizamos para
    generar errores descriptivos mediante el prefijo sucesivo de informacion de
    contexto adicional al mensaje de error original. Cuando el error es en
    ultima instancia, manejado por la funcion @c(main) del programa, se debe
    proporcionar una cadena causal clara a partir de la raiz del problema de la
    falta en su conjunto, que recuerda a una investigacion de accidentes de la
    NASA:

#     ..pre >
#       genesis: crashed: no parachute: G-switch failed: bad relay orientation
    ..pre >
      genesis: crashed: no parachute: G-switch failed: bad relay orientation

#     Because error messages are frequently chained together, message strings
#     should not be capitalized and newlines should be avoided. The resulting
#     errors may be long, but they will be selfcontained when found by tools like
#     @$(grep).
    Debido a que los mensajes de error con frecuencia se encadenan juntos, las
    cadenas de mensajes no deben ser mayusculas y las lineas nuevas deben
    evitarse. Los errores resultantes pueden ser largos, pero seran
    autocontenidos cuando sean encuontrados por herramientas como grep.

#     When designing error messages, be deliberate, so that each one is a
#     meaningful description of the problem with sufficient and relevant detail,
#     and be consistent, so that errors returned by the same function or by a
#     group of functions in the same package are similar in form and can be dealt
#     with in the same way.
    Cuando diseñe mensajes de error, sea deliberado, de modo que cada uno sea
    una descripcion significativa del problema con detalles suficientes y
    relevantes, y sea consistente, de modo que los errores devueltos por la
    misma funcion o por un grupo de funciones en el mismo paquete sean similares
    en forma y se puedan tratar de la misma manera.

#     For example, the @c(os) package guarantees that every error returned by a
#     file operation, such as @c(os.Open) or the @c(Read), @c(Write), or @c(Close)
#     methods of an open file, describes not just the nature of the failure
#     (permission denied, no such directory, and so on) but also the name of the
#     file, so the caller needn’t include this information in the error message it
#     constructs.
    Por ejemplo, el paquete @c(os) garantiza que cada error devuelto por una
    operacion de archivo, como @c(os.Open) o los metodos @c(Read), @c(Write), o
    @c(Close) de un archivo abierto, no describen solo la naturaleza de la falla
    (permiso denegado, directorio erroneo, etc), sino tambien el nombre del
    archivo, por lo el que llamador no necesita incluir esta informacion en el
    mensaje de error.

#     In general, the call @c[f(x)] is responsible for reporting the attempted
#     operation @c(f) and the argument value @c(x) as they relate to the context
#     of the error. The caller is responsible for adding further information that
#     it has but the call @c[f(x)] does not, such as the URL in the call to
#     @c(html.Parse) above.
    En general, la llamada @c[f(x)] es responsable de informar el intento de
    operacion @c(f) y el valor del argumento @c(x) en su relacion con el
    contexto del error. El llamador es responsable de añadir mas informacion que
    tiene, pero la llamada @c[f(x)] no, tal como la URL en la llamada a
    @c(html.Parse) anterior.

#     Let’s move on to the second strategy for handling errors. For errors that
#     represent transient or unpredictable problems, it may make sense to
#     @e(retry) the failed operation, possibly with a delay between tries, and
#     perhaps with a limit on the number of attempts or the time spent trying
#     before giving up entirely.
    Pasemos a la segunda estrategia para manejar errores. Para errores que
    representan problemas transitorios o impredecibles, puede tener sentido
    volver a intentar la operacion fallida, posiblemente con un retardo entre
    intentos, y tal vez con un limite en el numero de intentos o el tiempo
    dedicado a tratar antes de renunciar por completo.

#     ..figure > @l(gopl.io/ch5/wait/wait.go<>gopl.io/ch5/wait)
    ..figure > @l(gopl.io/ch5/wait/wait.go<>gopl.io/ch5/wait)

#       ..src > go
#         // WaitForServer attempts to contact the server of a URL.
#         // It tries for one minute using exponential back-off.
#         // It reports an error if all attempts fail.
#         func WaitForServer(url string) error {
#           const timeout = 1 * time.Minute
#           deadline := time.Now().Add(timeout)
#           for tries := 0; time.Now().Before(deadline); tries++ {
#             _, err := http.Head(url)
#             if err == nil {
#               return nil // success
#             }
#             log.Printf("server not responding (%s); retrying...", err)
#             time.Sleep(time.Second << uint(tries)) // exponential back-off
#           }
#           return fmt.Errorf("server %s failed to respond after %s", url, timeout)
#         }
#       < src..
      ..src > go
        // WaitForServer intenta ponerse en contacto con el servidor de una URL
        // Se intenta durante un minuto usando retroceso exponencial.
        // Informa un error si todos los intentos fallan.
        func WaitForServer(url string) error {
          const timeout = 1 * time.Minute
          deadline := time.Now().Add(timeout)
          for tries := 0; time.Now().Before(deadline); tries++ {
            _, err := http.Head(url)
            if err == nil {
              return nil // exito
            }
            log.Printf("server not responding (%s); retrying...", err)
            time.Sleep(time.Second << uint(tries)) // retroceso exponencial
          }
          return fmt.Errorf("server %s failed to respond after %s", url, timeout)
        }
      < src..


#     Third, if progress is impossible, the caller can print the error and stop
#     the program gracefully, but this course of action should generally be
#     reserved for the main package of a program.  Library functions should
#     usually propagate errors to the caller, unless the error is a sign of an
#     internal inconsistency—that is, a bug.
    En tercer lugar, si el progreso es imposible, el llamante puede imprimir el
    error y detener el programa con gracia, pero este curso de accion
    generalmente debe reservarse para el paquete principal de un programa. Las
    funciones de la libreria normalmente deben propagar errores al llamante, a
    menos que el error sea un signo de una inconsistencia interna, es decir, un
    error.

#     ..src > go
#       // (In function main.)
#       if err := WaitForServer(url); err != nil {
#         fmt.Fprintf(os.Stderr, "Site is down: %v\n", err)
#         os.Exit(1)
#       }
#     < src..
    ..src > go
      // (Dentro de la funcion main.)
      if err := WaitForServer(url); err != nil {
        fmt.Fprintf(os.Stderr, "Site is down: %v\n", err)
        os.Exit(1)
      }
    < src..

#     A more convenient way to achieve the same effect is to call @c(log.Fatalf).
#     As with all the @c(log) functions, by default it prefixes the time and date
#     to the error message.
    Una forma mas conveniente para lograr el mismo efecto es llamar a
    @c(log.Fatalf). Al igual que con todas las funciones @c(log), por defecto se
    prefija la hora y la fecha para el mensaje de error.

#     ..src > go
#       if err := WaitForServer(url); err != nil {
#         log.Fatalf("Site is down: %v\n", err)
#       }
#     < src..
    ..src > go
      if err := WaitForServer(url); err != nil {
        log.Fatalf("Site is down: %v\n", err)
      }
    < src..

#     The default format is helpful in a long-running server, but less so for an
#     interactive tool:
    El formato predeterminado es util en un servidor de larga ejecucion, pero
    menos para una herramienta interactiva:

#     ..pre >
#       2006/01/02 15:04:05 Site is down: no such domain: bad.gopl.io
    ..pre >
      2006/01/02 15:04:05 Site is down: no such domain: bad.gopl.io

#     For a more attractive output, we can set the prefix used by the @c(log) package
#     to the name of the command, and suppress the display of the date and time:
    Para una salida mas atractiva, podemos establecer el prefijo utilizado por
    el paquete @c(log) en el nombre del comando, y suprimir la visualizacion de la
    fecha y hora:

#     ..src > go
#       log.SetPrefix("wait: ")
#       log.SetFlags(0)
#     < src..
    ..src > go
      log.SetPrefix("wait: ")
      log.SetFlags(0)
    < src..

#     Fourth, in some cases, it’s sufficient just to log the error and then
#     continue, perhaps with reduced functionality. Again there’s a choice between
#     using the @c(log) package, which adds the usual prefix:
    En cuarto lugar, en algunos casos, basta con registrar el error y luego
    continuar, tal vez con funcionalidad reducida. Una vez mas hay una eleccion
    entre utilizar el paquete @c(log), que añade el prefijo habitual:

#     ..src > go
#       if err := Ping(); err != nil {
#         log.Printf("ping failed: %v; networking disabled", err)
#       }
#     < src..
    ..src > go
      if err := Ping(); err != nil {
        log.Printf("ping failed: %v; networking disabled", err)
      }
    < src..

#     and printing directly to the standard error stream:
    e imprimir directamente a flujo de error estardar:

#     ..src > go
#       if err := Ping(); err != nil {
#         fmt.Fprintf(os.Stderr, "ping failed: %v; networking disabled\n", err)
#       }
#     < src..
    ..src > go
      if err := Ping(); err != nil {
        fmt.Fprintf(os.Stderr, "ping failed: %v; networking disabled\n", err)
      }
    < src..

#     (All @c(log) functions append a newline if one is not already present.)
    (Todas las funciones log añaden un salto de linea si no hay uno presente).

#     And fifth and finally, in rare cases we can safely ignore an error entirely:
    Y quinto y ultimo, en casos raros podemos ignorar un error completamente:

#     ..src > go
#       dir, err := ioutil.TempDir("", "scratch")
#       if err != nil {
#         return fmt.Errorf("failed to create temp dir: %v", err)
#       }
#
#       // ...use temp dir...
#
#       os.RemoveAll(dir) // ignore errors; $TMPDIR is cleaned periodically
#     < src..
    ..src > go
      dir, err := ioutil.TempDir("", "scratch")
      if err != nil {
        return fmt.Errorf("failed to create temp dir: %v", err)
      }

      // ...use temp dir...

      os.RemoveAll(dir) // ignorar errores; $TMPDIR se limpia periodicamente
    < src..

#     The call to @c(os.RemoveAll) may fail, but the program ignores it because
#     the operating system periodically cleans out the temporary directory. In
#     this case, discarding the error was intentional, but the program logic would
#     be the same had we forgotten to deal with it. Get into the habit of
#     considering errors after every function call, and when you deliberately
#     ignore one, document your intention clearly.
    La llamada a os.RemoveAll puede fallar, pero el programa lo ignora porque el
    sistema operativo periodicamente limpia el directorio temporal. En este
    caso, descartar el error fue intencional, pero la logica del programa seria
    la misma si hubieramos olvidado tratar con el. Adquiera el habito de
    considerar errores despues de cada llamada de funcion, y cuando
    deliberadamente ignora uno, documente claramente su intencion.

#     Error handling in Go has a particular rhythm. After checking an error,
#     failure is usually dealt with before success. If failure causes the function
#     to return, the logic for success is not indented within an @c(else) block
#     but follows at the outer level. Functions tend to exhibit a common
#     structure, with a series of initial checks to reject errors, followed by the
#     substance of the function at the end, minimally indented.
    El manejo de errores en Go tiene un ritmo particular. Despues de comprobar
    un error, el fracaso suele tratarse antes del exito. Si el fallo hace que la
    funcion regrese, la logica para el exito no se sangra dentro de un bloque
    @c(else), pero continua en el nivel externo. Las funciones tienden a exhibir
    una estructura comun, con una serie de comprobaciones iniciales para
    rechazar errores, seguidas por la esencia de la funcion al final,
    minimamente indentada.

# *** Section 5.4.2 <> End of File (EOF)
*** Seccion 5.4.2 <> Fin de Archivo (EOF)

#     Usually, the variety of errors that a function may return is interesting to
#     the end user but not to the intervening program logic. On occasion, however,
#     a program must take different actions depending on the kind of error that
#     has occurred. Consider an attempt to read @m(n) bytes of data from a
#     file. If @m(n) is chosen to be the length of the file, any error represents
#     a failure. On the other hand, if the caller repeatedly tries to read
#     fixed-size chunks until the file is exhausted, the caller must respond
#     differently to an end-of-file condition than it does to all other errors.
#     For this reason, the @c(io) package guarantees that any read failure caused
#     by an end-of-file condition is always reported by a distinguished error,
#     @c(io.EOF), which is defined as follows:
    Normalmente, la variedad de errores que una funcion puede devolver es
    interesante para el usuario final, pero no para la logica del programa
    intermedio. En ocasiones, sin embargo, un programa debe tomar diferentes
    acciones dependiendo del tipo de error que se ha producido. Considere un
    intento de leer @m(n) bytes de datos de un archivo. Si se elige @m(n) para
    ser la longitud del archivo, cualquier error representa un fracaso. Por otro
    lado, si el llamador trata repetidamente de leer fragmentos de tamaño fijo
    hasta que el archivo se agote, el llamador debe responder de manera
    diferente a una condicion de fin de archivo que a todos los demas
    errores. Por esta razon, el paquete @c(io) garantiza que cualquier daño
    causado por una condicion de fin de archivo siempre informa de un error
    distinguida, @c(io.EOF), que se define de la siguiente manera:

#     ..src > go
#       package io
#
#       import "errors"
#
#       // EOF is the error returned by Read when no more input is available.
#       var EOF = errors.New("EOF")
#     < src..
    ..src > go
      package io

      import "errors"

      // EOF es el error devuelto por Read cuando no hay mas entrada disponible.
      var EOF = errors.New("EOF")
    < src..

#     The caller can detect this condition using a simple comparison, as in the
#     loop below, which reads runes from the standard input. (The @$(charcount)
#     program in @l(#Section 4.3) provides a more complete example.)
    El llamador puede detectar esta condicion usando una comparacion simple,
    como en el bucle siguiente, que lee runas de la entrada estandar. (El
    programa @$(charcount) en la @l(#Seccion 4.3) ofrece un ejemplo mas
    completo.)

#     ..src > go
#       in := bufio.NewReader(os.Stdin)
#       for {
#         r, _, err := in.ReadRune()
#         if err == io.EOF {
#           break // finished reading
#         }
#         if err != nil {
#           return fmt.Errorf("read failed: %v", err)
#         }
#         // ...use r...
#       }
#     < src..
    ..src > go
      in := bufio.NewReader(os.Stdin)
      for {
        r, _, err := in.ReadRune()
        if err == io.EOF {
          break // lectura terminada
        }
        if err != nil {
          return fmt.Errorf("read failed: %v", err)
        }
        // ...usar r...
      }
    < src..

#     Since in an end-of-file condition there is no information to report besides
#     the fact of it, @c(io.EOF) has a fixed error message, @c("EOF"). For other
#     errors, we may need to report both the quality and quantity of the error, so
#     to speak, so a fixed error value will not do. In @l(#Section 7.11), we’ll
#     present a more systematic way to distinguish certain error values from
#     others.
    Puesto que en una condicion de fin de archivo no existe informacion que
    informar ademas del hecho de que, @c(io.EOF) tiene un mensaje de error fijo,
    @c("EOF"). Para otros errores, es posible que tengamos que informar tanto la
    calidad como la cantidad del error, por asi decirlo, por lo que un valor de
    error fijo no lo hara. En la @l(#Seccion 7.11), vamos a presentar de manera
    mas sistematica a distinguir ciertos valores de error de los demas.

# ** Section 5.5 <> Function Values
** Seccion 5.5 <> Valores de la Funcion

#    Functions are @e(first-class values) in Go: like other values, function
#    values have types, and they may be assigned to variables or passed to or
#    returned from functions. A function value may be called like any other
#    function. For example:
   En Go las funciones son valores de primera clase: al igual que otros valores,
   los valores de funcion tienen tipos, y pueden ser asignados a variables o
   pasarse a o regresarlas de funciones. Un valor de funcion puede ser llamado
   como cualquier otra funcion. Por ejemplo:

#    ..src > go
#      func square(n int) int     { return n * n }
#      func negative(n int) int   { return -n }
#      func product(m, n int) int { return m * n }
#
#      f := square
#      fmt.Println(f(3))     // "9"
#
#      f = negative
#      fmt.Println(f(3))     // "-3"
#      fmt.Printf("%T\n", f) // "func(int) int"
#
#      f = product // compile error: can't assign f(int, int) int to f(int) int
#    < src..
   ..src > go
     func square(n int) int     { return n * n }
     func negative(n int) int   { return -n }
     func product(m, n int) int { return m * n }

     f := square
     fmt.Println(f(3))     // "9"

     f = negative
     fmt.Println(f(3))     // "-3"
     fmt.Printf("%T\n", f) // "func(int) int"

     f = product // error de compilacion: no se puede asignar f(int, int) int a f(int) int
   < src..

#    The zero value of a function type is @c(nil). Calling a nil function value
#    causes a panic:
   El valor cero para el tipo funcion es @c(nil). Llamar a un valor de funcion
   nulo produce un panico:

#    ..src > go
#      var f func(int) int
#      f(3) // panic: call of nil function
#    < src..
   ..src > go
     var f func(int) int
     f(3) // panico: llamar a funcion nil
   < src..

#    Function values may be compared with @c(nil):
   Los valores de funcion pueden compararse con @c(nil):

#    ..src > go
#      var f func(int) int
#      if f != nil {
#        f(3)
#      }
#    < src..
   ..src > go
     var f func(int) int
     if f != nil {
       f(3)
     }
   < src..

#    but they are not comparable, so they may not be compared against each other
#    or used as keys in a map.
   Pero no son comparables, por lo que no pueden comparse entre si o utilizarse
   como claves en un mapa.

#    Function values let us parameterize our functions over not just data, but
#    behavior too. The standard libraries contain many examples. For instance,
#    @c(strings.Map) applies a function to each character of a string, joining the
#    results to make another string.
   Los valores de las funciones nos permiten parametrizar nuestras funciones no
   solo sobre los datos sino tambien sobre el comportamiento. Las librerias
   estandar contienen muchos ejemplos. Por ejemplo, @c(strings.Map) aplica una
   funcion a cada caracter de una cadena, uniendo los resultados para formar
   otra cadena.

#    ..src > go
#      func add1(r rune) rune { return r + 1 }
#
#      fmt.Println(strings.Map(add1, "HAL-9000")) // "IBM.:111"
#      fmt.Println(strings.Map(add1, "VMS"))      // "WNT"
#
#      fmt.Println(strings.Map(add1, "Admix"))    // "Benjy"
#    < src..
   ..src > go
     func add1(r rune) rune { return r + 1 }

     fmt.Println(strings.Map(add1, "HAL-9000")) // "IBM.:111"
     fmt.Println(strings.Map(add1, "VMS"))      // "WNT"

     fmt.Println(strings.Map(add1, "Admix"))    // "Benjy"
   < src..

#    The @c(findLinks) function from @l(#Section 5.2) uses a helper function,
#    @c(visit), to visit all the nodes in an HTML document and apply an action to
#    each one. Using a function value, we can separate the logic for tree
#    traversal from the logic for the action to be applied to each node, letting
#    us reuse the traversal with different actions.
   La funcion @c(findLinks) de la @l(#Seccion 5.2) utiliza una funcion auxiliar,
   @c(visit), para visitar todos los nodos en un documento HTML y aplicar una
   accion a cada uno. Usando el valor de una funcion, podemos separar la logica
   del recorrido del arbol de la logica para la accion a aplicar a cada nodo,
   permitiendonos reutilizar el recorrido con diferentes acciones.

#    ..figure > @l(gopl.io/ch5/outline2/outline.go<>gopl.io/ch5/outline2)
   ..figure > @l(gopl.io/ch5/outline2/outline.go<>gopl.io/ch5/outline2)

#      ..src > go
#        // forEachNode calls the functions pre(x) and post(x) for each node
#        // x in the tree rooted at n. Both functions are optional.
#        // pre is called before the children are visited (preorder) and
#        // post is called after (postorder).
#        func forEachNode(n *html.Node, pre, post func(n *html.Node)) {
#          if pre != nil {
#            pre(n)
#          }
#
#          for c := n.FirstChild; c != nil; c = c.NextSibling {
#            forEachNode(c, pre, post)
#          }
#
#          if post != nil {
#            post(n)
#          }
#        }
#      < src..
     ..src > go
       // forEachNode llama a las funciones pre(x) y post(x) para cada nodo
       // x en el arbol originado en n. Ambas funciones son opcionales.
       // pre se llama antes de que los hijos sean visitados (preorden) y
       // post se llama despues (postorden).
       func forEachNode(n *html.Node, pre, post func(n *html.Node)) {
         if pre != nil {
           pre(n)
         }

         for c := n.FirstChild; c != nil; c = c.NextSibling {
           forEachNode(c, pre, post)
         }

         if post != nil {
           post(n)
         }
       }
     < src..


#    The @c(forEachNode) function accepts two function arguments, one to call
#    before a node’s children are visited and one to call after. This arrangement
#    gives the caller a great deal of flexibility. For example, the functions
#    @c(startElement) and @c(endElement) print the start and end tags of an HTML
#    element like @c(<b>...</b>):
   La funcion @c(forEachNode) acepta dos argumentos de funcion, una para llamar
   antes de que se visiten los hijos de un nodo y otra para llamar despues. Esta
   disposicion da a al lamador una gran flexibilidad. Por ejemplo, las funciones
   @c(startElement) y @c(endElement) imprimen las etiquetas de inicio y fin de
   un elemento HTML, como @c(<b>...</b>):

#    ..src > go
#      var depth int
#
#      func startElement(n *html.Node) {
#        if n.Type == html.ElementNode {
#          fmt.Printf("%*s<%s>\n", depth*2, "", n.Data)
#          depth++
#        }
#      }
#
#      func endElement(n *html.Node) {
#        if n.Type == html.ElementNode {
#          depth--
#          fmt.Printf("%*s</%s>\n", depth*2, "", n.Data)
#        }
#      }
#    < src..
   ..src > go
     var depth int

     func startElement(n *html.Node) {
       if n.Type == html.ElementNode {
         fmt.Printf("%*s<%s>\n", depth*2, "", n.Data)
         depth++
       }
     }

     func endElement(n *html.Node) {
       if n.Type == html.ElementNode {
         depth--
         fmt.Printf("%*s</%s>\n", depth*2, "", n.Data)
       }
     }
   < src..

#    The functions also indent the output using another @c(fmt.Printf) trick. The
#    @c(*) adverb in @c(%*s) prints a string padded with a variable number of
#    spaces. The width and the string are provided by the arguments @c(depth*2)
#    and @c("").
   Las funciones tambien indentan la salida usando otro truco de
   @c(fmt.Printf). El adverbio @c(*) en @c(%*s) imprime una cadena rellena con
   un numero variable de espacios. La anchura y la cadena se proporcionan por
   los argumentos @c(depth*2) y @c("").

#    If we call @c(forEachNode) on an HTML document, like this:
   Si llamamos a @c(forEachNode) en un documento HTML, de esta forma:

#    ..src > go
#      forEachNode(doc, startElement, endElement)
#    < src..
   ..src > go
     forEachNode(doc, startElement, endElement)
   < src..

#    we get a more elaborate variation on the output of our earlier @$(outline)
#    program:
   obtenemos una variacion mas elaborada en la salida de nuestra programa
   @$(outline) anterior:

#    ..src > sh
#      $ go build gopl.io/ch5/outline2
#      $ ./outline2 http://gopl.io
#      <html>
#        <head>
#          <meta>
#          </meta>
#          <title>
#          </title>
#          <style>
#          </style>
#        </head>
#      <body>
#        <table>
#          <tbody>
#            <tr>
#              <td>
#                <a>
#                  <img>
#                  </img>
#      ...
#    < src..
   ..src > sh
     $ go build gopl.io/ch5/outline2
     $ ./outline2 http://gopl.io
     <html>
       <head>
         <meta>
         </meta>
         <title>
         </title>
         <style>
         </style>
       </head>
     <body>
       <table>
         <tbody>
           <tr>
             <td>
               <a>
                 <img>
                 </img>
     ...
   < src..

#    @b(Exercise 5.7): Develop @c(startElement) and @c(endElement) into a general
#    HTML pretty-printer.  Print comment nodes, text nodes, and the attributes of
#    each element (@c(<a href='...'>)). Use short forms like @c(<img/>) instead of
#    @c(<img></img>) when an element has no children. Write a test to ensure that
#    the output can be parsed successfully. (See @l(#Chapter 11).)
   @b(Ejercicio 5.7): Desarrolla @c(startElement) y @c(endElement) en una
   agradable impresora HTML general. Imprime los nodos de comentarios, nodos de
   texto y los atributos de cada elemento (@c(<a href='...'>)). Utilizar formas
   cortas como @c(<img/>) en lugar de @c(<img></img>) cuando un elemento no
   tiene hijos. Escribir una prueba para asegurarse de que la salida se puede
   analizar con exito. (Vease el @l(#Capitulo 11)).

#    @b(Exercise 5.8): Modify @c(forEachNode) so that the @c(pre) and @c(post)
#    functions return a boolean result indicating whether to continue the
#    traversal. Use it to write a function @c(ElementByID) with the following
#    signature that finds the first HTML element with the specified @c(id)
#    attribute. The function should stop the traversal as soon as a match is
#    found.
   @b(Ejercicio 5.8): Modificar @c(forEachNode) para que las funciones @c(pre) y
   @c(post) devuelvan un resultado booleano que señale si se debe continuar el
   recorrido. Utilicelo para escribir una funcion @c(ElementByID) con la
   siguiente firma que se encuentra el primer elemento HTML con el atributo id
   especificado. La funcion debe detener el recorrido tan pronto como se
   encuentre una coincidencia.

#    ..src > go
#      func ElementByID(doc *html.Node, id string) *html.Node
#    < src..
   ..src > go
     func ElementByID(doc *html.Node, id string) *html.Node
   < src..

#    @b(Exercise 5.9): Write a function @c[expand(s string, f func(string) string)
#    string] that replaces each substring @"(@c($foo)) within s by the text
#    returned by @c[f("foo")].
   @b(Ejercicio 5.9): Escribir una funcion @c[expand(s string, f func(string)
   string) string] que reemplaze cada subcadena @c("$foo") dentro de @c(s) con
   el texto devuelto por @c[f("foo")].

# ** Section 5.6 <> Anonymous Functions
** Seccion 5.6 <> Funciones Anonimas

#    Named functions can be declared only at the package level, but we can use a
#    @e(function literal) to denote a function value within any expression. A
#    function literal is written like a function declaration, but without a name
#    following the @c(func) keyword. It is an expression, and its value is called
#    an @e(anonymous function).
   Funciones con nombre se pueden declarar solo a nivel de paquete, pero podemos
   utilizar un @e(literal de funcion) para denotar un valor de funcion dentro de
   cualquier expresion. Un literal funcion se escribe como una declaracion de la
   funcion, pero sin un nombre despues de la palabra clave @c(func). Es una
   expresion, y su valor se denomina @e(funcion anonima).

#    Function literals let us define a function at its point of use. As an
#    example, the earlier call to @c(strings.Map) can be rewritten as
   Los literales de la funcion definen una funcion en su punto de uso. A modo de
   ejemplo, la llamada anterior a @c(strings.Map) se puede reescribir como

#    ..src > go
#      strings.Map(func(r rune) rune { return r + 1 }, "HAL-9000")
#    < src..
   ..src > go
     strings.Map(func(r rune) rune { return r + 1 }, "HAL-9000")
   < src..

#    More importantly, functions defined in this way have access to the entire
#    lexical environment, so the inner function can refer to variables from the
#    enclosing function, as this example shows:
   Mas importante aun, las funciones definidas de esta manera tienen acceso a
   todo el entorno lexico, por lo que la funcion interna puede referirse a
   variables de la funcion de inclusion, como muestra este ejemplo:

#    ..figure > @l(gopl.io/ch5/squares/main.go<>gopl.io/ch5/squares)
   ..figure > @l(gopl.io/ch5/squares/main.go<>gopl.io/ch5/squares)

#      ..src > go
#        // squares returns a function that returns
#        // the next square number each time it is called.
#        func squares() func() int {
#          var x int
#          return func() int {
#            x++
#            return x * x
#          }
#        }
#
#        func main() {
#          f := squares()
#          fmt.Println(f()) // "1"
#          fmt.Println(f()) // "4"
#          fmt.Println(f()) // "9"
#          fmt.Println(f()) // "16"
#        }
#      < src..
     ..src > go
       // squares regresa una funcion que devuelve el siguiente
       // cuadrado del numero cada ves que se llama.
       func squares() func() int {
         var x int
         return func() int {
           x++
           return x * x
         }
       }

       func main() {
         f := squares()
         fmt.Println(f()) // "1"
         fmt.Println(f()) // "4"
         fmt.Println(f()) // "9"
         fmt.Println(f()) // "16"
       }
     < src..


#    The function @c(squares) returns another function, of type @c[func() int]. A
#    call to @c(squares) creates a local variable @c(x) and returns an anonymous
#    function that, each time it is called, increments @c(x) and returns its
#    square. A second call to @c(squares) would create a second variable @c(x) and
#    return a new anonymous function which increments that variable.
   La funcion @c(squares) devuelve otra funcion, de tipo @c[func() int]. Una
   llamada a @c(squares) crea una variable local @c(x) y devuelve una funcion
   anonima que, cada vez que se llama, incrementa @c(x) y devuelve su
   cuadrado. Una segunda llamada a @c(squares) crearia una segunda variable
   @c(x) y devolvera una nueva funcion anonima que incremente esa variable.

#    The @c(squares) example demonstrates that function values are not just code
#    but can have state.  The anonymous inner function can access and update the
#    local variables of the enclosing function @c(squares). These hidden variable
#    references are why we classify functions as reference types and why function
#    values are not comparable. Function values like these are implemented using a
#    technique called @e(closures), and Go programmers often use this term for
#    function values.
   El ejemplo @c(squares) demuestra que los valores de funcion no son solo
   codigo, sino que pueden tener estado. La funcion anonima interna puede
   acceder y actualizar las variables locales dentro de la funcion @c(squares).
   Estas referencias de variables ocultas son el por que clasificamos a las
   funciones como tipos de referencia y motivo de que los valores de las
   funciones no sean comparables. Los valores de funcion como estos se
   implementan utilizando una tecnica llamada @e(closures), y los programadores
   Go a menudo utilizan este termino para los valores de la funcion.

#    Here again we see an example where the lifetime of a variable is not
#    determined by its scope: the variable @c(x) exists after @c(squares) has
#    returned within @c(main), even though @c(x) is hidden inside @c(f).
   Aqui de nuevo vemos un ejemplo donde el tiempo de vida de una variable no
   esta determinada por su ambito de aplicacion: la variable @c(x) existe
   despues del retorno de @c(squares) dentro de @c(main), aunque @c(x) este
   oculta dentro de @c(f).

#    As a somewhat academic example of anonymous functions, consider the problem
#    of computing a sequence of computer science courses that satisfies the
#    prerequisite requirements of each one. The prerequisites are given in the
#    @c(prereqs) table below, which is a mapping from each course to the list of
#    courses that must be completed before it.
   Como un ejemplo un tanto academico de funciones anonimas, considere el
   problema de calcular una secuencia de los cursos de ciencias de la
   computacion que satisfagan los requisitos previos de cada uno. Los
   prerequisitos se dan en la tabla @c(prereqs) de abajo, que es un mapeo de
   cada curso a la lista de cursos que se deben completar antes de ella.

#    ..figure > @l(gopl.io/ch5/toposort/main.go<>gopl.io/ch5/toposort)
   ..figure > @l(gopl.io/ch5/toposort/main.go<>gopl.io/ch5/toposort)

#      ..src > go
#        // prereqs maps computer science courses to their prerequisites.
#        var prereqs = map[string][]string{
#          "algorithms": {"data structures"},
#          "calculus":   {"linear algebra"},
#
#          "compilers": {
#            "data structures",
#            "formal languages",
#            "computer organization",
#          },
#
#          "data structures":       {"discrete math"},
#          "databases":             {"data structures"},
#          "discrete math":         {"intro to programming"},
#          "formal languages":      {"discrete math"},
#          "networks":              {"operating systems"},
#          "operating systems":     {"data structures", "computer organization"},
#          "programming languages": {"data structures", "computer organization"},
#        }
#      < src..
     ..src > go
       // prereqs asigna cursos de ciencia de la computacion a sus prerequisitos.
       var prereqs = map[string][]string{
         "algoritmos": {"estructura de datos"},
         "calculo":   {"algebra lineal"},

         "compiladores": {
           "estructura de datos",
           "lenguajes formales",
           "organizacion de computadoras",
         },

         "estructura de datos":       {"matematicas discretas"},
         "bases de datos":            {"estructura de datos"},
         "matematicas discretas":     {"introduccion a la programacion"},
         "lenguajes formales":        {"matematicas discretas"},
         "redes":                     {"sitemas operativos"},
         "sistemas operativos":       {"estructura de datos", "organizacion de computadoras"},
         "lenguajes de programacion": {"estructura de datos", "organizacion de computadoras"},
       }
     < src..


#    This kind of problem is known as topological sorting. Conceptually, the
#    prerequisite information forms a directed graph with a node for each course
#    and edges from each course to the courses that it depends on. The graph is
#    acyclic: there is no path from a course that leads back to itself. We can
#    compute a valid sequence using depth-first search through the graph with the
#    code below :
   Este tipo de problema se conoce como clasificacion topologica.
   Conceptualmente, la informacion de los requisitos previos forma un grafico
   dirigido con un nodo para cada curso y los bordes de cada curso a los cursos
   de los que depende. El grafico es aciclico: no hay camino de un curso que
   vuelva a si mismo. Podemos calcular una secuencia valida usando la busqueda
   de profundidad en el grafico con el siguiente codigo:

#    ..src > go
#      func main() {
#        for i, course := range topoSort(prereqs) {
#          fmt.Printf("%d:\t%s\n", i+1, course)
#        }
#      }
#
#      func topoSort(m map[string][]string) []string {
#        var order []string
#        seen := make(map[string]bool)
#        var visitAll func(items []string)
#
#        visitAll = func(items []string) {
#          for _, item := range items {
#            if !seen[item] {
#              seen[item] = true
#              visitAll(m[item])
#              order = append(order, item)
#            }
#          }
#        }
#
#        var keys []string
#        for key := range m {
#          keys = append(keys, key)
#        }
#
#        sort.Strings(keys)
#        visitAll(keys)
#        return order
#      }
#    < src..
   ..src > go
     func main() {
       for i, course := range topoSort(prereqs) {
         fmt.Printf("%d:\t%s\n", i+1, course)
       }
     }

     func topoSort(m map[string][]string) []string {
       var order []string
       seen := make(map[string]bool)
       var visitAll func(items []string)

       visitAll = func(items []string) {
         for _, item := range items {
           if !seen[item] {
             seen[item] = true
             visitAll(m[item])
             order = append(order, item)
           }
         }
       }

       var keys []string
       for key := range m {
         keys = append(keys, key)
       }

       sort.Strings(keys)
       visitAll(keys)
       return order
     }
   < src..


#    When an anonymous function requires recursion, as in this example, we must
#    first declare a variable, and then assign the anonymous function to that
#    variable. Had these two steps been combined in the declaration, the function
#    literal would not be within the scope of the variable @c(visitAll) so it
#    would have no way to call itself recursively:
   Cuando una funcion anonima requiere recursion, como en este ejemplo, primero
   debemos declarar una variable, y luego asignar la funcion anonima a esa
   variable. Si estos dos pasos estuvieran combinados en la declaracion, la
   funcion literal no estaria dentro del alcance de la variable @c(visitAll) por
   lo que no tendria ninguna manera de llamarse a si misma de forma recursiva:

#    ..src > go
#      visitAll := func(items []string) {
#        // ...
#        visitAll(m[item]) // compile error: undefined: visitAll
#        // ...
#      }
#    < src..
   ..src > go
     visitAll := func(items []string) {
       // ...
       visitAll(m[item]) // compile error: undefined: visitAll
       // ...
     }
   < src..

#    The output of the @$(toposort) program is shown below. It is deterministic,
#    an often-desirable property that doesn’t always come for free. Here, the
#    values of the @c(prereqs) map are slices, not more maps, so their iteration
#    order is deterministic, and we sorted the keys of @c(prereqs) before making
#    the initial calls to @c(visitAll).
   La salida del programa @$(toposort) se muestra a continuacion. Es
   determinista, una propiedad a menudo deseable que no siempre viene de forma
   gratuita. En este caso, los valores del mapa @c(prereqs) son slices, no mas
   mapas, por lo que su orden de iteracion es determinista, y ordenamos las
   llaves de @c(prereqs) antes de hacer las llamadas iniciales a @c(visitAll) .

#    ..pre >
#      1:      intro to programming
#      2:      discrete math
#      3:      data structures
#      4:      algorithms
#      5:      linear algebra
#      6:      calculus
#      7:      formal languages
#      8:      computer organization
#      9:      compilers
#      10:     databases
#      11:     operating systems
#      12:     networks
#      13:     programming languages
#    < pre..
   ..pre >
     1:      introduccion a la programacion
     2:      matematicas discretas
     3:      estructura de datos
     4:      algoritmos
     5:      algebra lineal
     6:      calculo
     7:      lenguajes formales
     8:      organizacion de computadoras
     9:      compiladores
     10:     bases de datos
     11:     sistemas operativos
     12:     redes
     13:     Lenguajes de programacion
   < pre..

#    Let’s return to our @c(findLinks) example. We’ve moved the link-extraction
#    function @c(links.Extract) to its own package, since we’ll use it again in
#    @l(#Chapter 8). We replaced the @c(visit) function with an anonymous function
#    that appends to the @c(links) slice directly, and used @c(forEachNode) to
#    handle the traversal. Since @c(Extract) needs only the @c(pre) function, it
#    passes @c(nil) for the @c(post) argument.
   Volvamos a nuestro ejemplo @c(findLinks). Hemos movido la funcion de
   extraccion de enlaces @c(links.Extract) a su propio paquete, ya que la
   usaremos de nuevo en el @l(#Capitulo 8). Hemos sustituido la funcion
   @c(visit) con una funcion anonima que agrega directamente los @c(links) al
   slice, y utilizamos @c(forEachNode) para manejar el recorrido. Ya que
   @c(Extract) solo necesita la funcion @c(pre), se pasa @c(nil) para el
   argumento @c(post).

#    ..figure > @l(gopl.io/ch5/links/links.go<>gopl.io/ch5/links)
   ..figure > @l(gopl.io/ch5/links/links.go<>gopl.io/ch5/links)

#      ..src > go
#        // Package links provides a link-extraction function.
#        package links
#
#        import (
#          "fmt"
#          "net/http"
#
#          "golang.org/x/net/html"
#        )
#
#        // Extract makes an HTTP GET request to the specified URL, parses
#        // the response as HTML, and returns the links in the HTML document.
#        func Extract(url string) ([]string, error) {
#          resp, err := http.Get(url)
#          if err != nil {
#            return nil, err
#          }
#          if resp.StatusCode != http.StatusOK {
#            resp.Body.Close()
#            return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
#          }
#
#          doc, err := html.Parse(resp.Body)
#          resp.Body.Close()
#          if err != nil {
#            return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
#          }
#
#          var links []string
#          visitNode := func(n *html.Node) {
#            if n.Type == html.ElementNode && n.Data == "a" {
#              for _, a := range n.Attr {
#                if a.Key != "href" {
#                  continue
#                }
#                link, err := resp.Request.URL.Parse(a.Val)
#                if err != nil {
#                  continue // ignore bad URLs
#                }
#                links = append(links, link.String())
#              }
#            }
#          }
#          forEachNode(doc, visitNode, nil)
#          return links, nil
#        }
#      < src..
     ..src > go
       // El paquete links proporciona una funcion de extraccion de links.
       package links

       import (
         "fmt"
         "net/http"

         "golang.org/x/net/html"
       )

       // Extract hace una peticion HTTP GET a la URL especificada, analiza
       // la respuesta como HTML, y regresa el enlace en el documento HTML.
       func Extract(url string) ([]string, error) {
         resp, err := http.Get(url)
         if err != nil {
           return nil, err
         }
         if resp.StatusCode != http.StatusOK {
           resp.Body.Close()
           return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
         }

         doc, err := html.Parse(resp.Body)
         resp.Body.Close()
         if err != nil {
           return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
         }

         var links []string
         visitNode := func(n *html.Node) {
           if n.Type == html.ElementNode && n.Data == "a" {
             for _, a := range n.Attr {
               if a.Key != "href" {
                 continue
               }
               link, err := resp.Request.URL.Parse(a.Val)
               if err != nil {
                 continue // ignora URLs incorrectas
               }
               links = append(links, link.String())
             }
           }
         }
         forEachNode(doc, visitNode, nil)
         return links, nil
       }
     < src..


#    Instead of appending the raw @c(href) attribute value to the @c(links) slice,
#    this version parses it as a URL relative to the base URL of the document,
#    @c(resp.Request.URL). The resulting @c(link) is in absolute form, suitable
#    for use in a call to @c(http.Get).
   En lugar de añadir el atributo @c(href) en bruto al slice @c(links), esta
   version lo analiza como una direccion URL relativa a la URL base del
   documento, @c(resp.Request.URL). El enlace resultante esta en formato
   absoluta, adecuado para su uso en una llamada a @c(http.Get).

#    Crawling the web is, at its heart, a problem of graph traversal. The
#    @c(topoSort) example showed a depth-first traversal; for our web crawler,
#    we’ll use breadth-first traversal, at least initially. In @l(#Chapter 8),
#    we’ll explore concurrent traversal.
   El rastreador web es, en su corazon, un problema de grafico transversal. El
   ejemplo @c(topoSort) mostra un recorrido en profundidad; Para nuestro
   rastreador web, vamos a utilizar la anchura de primera transversal, al menos
   inicialmente. En el @l(#Capitulo 8), vamos a explorar el recorrido
   concurrente.

#    The function below encapsulates the essence of a breadth-first traversal. The
#    caller provides an initial list @c(worklist) of items to visit and a function
#    value @c(f) to call for each item. Each item is identified by a string. The
#    function @c(f) returns a list of new items to append to the worklist. The
#    @c(breadthFirst) function returns when all items have been visited. It
#    maintains a set of strings to ensure that no item is visited twice.
   La siguiente funcion encapsula la esencia de un recorrido de
   primer-anchura. El llamador proporciona una lista inicial @c(worklist) de
   elementos a visitar y un valor de la funcion @c(f) a llamar para cada
   elemento. Cada elemento se identifica mediante una cadena. La funcion @c(f)
   devuelve una lista de elementos nuevos a añadir a la lista de trabajo. La
   funcion @c(breadthFirst) regresa cuando todos los elementos han sido
   visitados. Mantiene un conjunto de cadenas para garantizar que ningun
   elemento se visita dos veces.

#    ..figure > @l(gopl.io/ch5/findlinks3/findlinks.go<>gopl.io/ch5/findlinks3)
   ..figure > @l(gopl.io/ch5/findlinks3/findlinks.go<>gopl.io/ch5/findlinks3)

#      ..src > go
#        // breadthFirst calls f for each item in the worklist.
#        // Any items returned by f are added to the worklist.
#        // f is called at most once for each item.
#        func breadthFirst(f func(item string) []string, worklist []string) {
#          seen := make(map[string]bool)
#          for len(worklist) > 0 {
#            items := worklist
#            worklist = nil
#            for _, item := range items {
#              if !seen[item] {
#                seen[item] = true
#                worklist = append(worklist, f(item)...)
#              }
#            }
#          }
#        }
#      < src..
     ..src > go
       // breadthFirst llama a f para cada elemento en worklist.
       // Todos los elementos devueltos por f se agregan a worklist.
       // f se llama como maximo una vez para cada elemento.
       func breadthFirst(f func(item string) []string, worklist []string) {
         seen := make(map[string]bool)
         for len(worklist) > 0 {
           items := worklist
           worklist = nil
           for _, item := range items {
             if !seen[item] {
               seen[item] = true
               worklist = append(worklist, f(item)...)
             }
           }
         }
       }
     < src..


#    As we explained in passing in @l(#Chapter 3), the argument @"{@c[f(item)...]}
#    causes all the items in the list returned by @c(f) to be appended to the
#    worklist.
   Como explicamos al pasar por el @l(#Capitulo 3), el argumento de
   @"{@c[f(item)...]}  hace que todos los elementos de la lista devuelta por f
   que se añadan a la lista de trabajo.

#    In our crawler, items are URLs. The @c(crawl) function we’ll supply to
#    @c(breadthFirst) prints the URL, extracts its links, and returns them so that
#    they too are visited.
   En nuestro rastreador, los elementos son URL. La funcion @c(crawl) que
   suministramos a @c(breadthFirst) imprime la URL, extrae sus enlaces, y los
   devuelve para que tambien se visiten..

#    ..src > go
#      func crawl(url string) []string {
#        fmt.Println(url)
#        list, err := links.Extract(url)
#        if err != nil {
#          log.Print(err)
#        }
#        return list
#      }
#    < src..
   ..src > go
     func crawl(url string) []string {
       fmt.Println(url)
       list, err := links.Extract(url)
       if err != nil {
         log.Print(err)
       }
       return list
     }
   < src..

#    To start the crawler off, we’ll use the command-line arguments as the initial
#    URLs.
   Para iniciar el rastreador, utilizaremos los argumentos de la linea de
   comandos como las URL iniciales.

#    ..src > go
#      func main() {
#        // Crawl the web breadth-first,
#        // starting from the command-line arguments.
#        breadthFirst(crawl, os.Args[1:])
#      }
#    < src..
   ..src > go
     func main() {
       // Rastrear la web la primer-anchura,
       // partiendo de los argumentos de la linea de comandos.
       breadthFirst(crawl, os.Args[1:])
     }
   < src..

#    Let’s crawl the web starting from @c(https://golang.org). Here are some of
#    the resulting links:
   Vamos a rastrear la web desde @c(https://golang.org). Estos son algunos de
   los enlaces resultantes:

#    ..src > sh
#      $ go build gopl.io/ch5/findlinks3
#      $ ./findlinks3 https://golang.org
#      https://golang.org/
#      https://golang.org/doc/
#      https://golang.org/pkg/
#      https://golang.org/project/
#      https://code.google.com/p/go-tour/
#      https://golang.org/doc/code.html
#      https://www.youtube.com/watch?v=XCsL89YtqCs
#      http://research.swtch.com/gotour
#      https://vimeo.com/53221560
#    < src..
   ..src > sh
     $ go build gopl.io/ch5/findlinks3
     $ ./findlinks3 https://golang.org
     https://golang.org/
     https://golang.org/doc/
     https://golang.org/pkg/
     https://golang.org/project/
     https://code.google.com/p/go-tour/
     https://golang.org/doc/code.html
     https://www.youtube.com/watch?v=XCsL89YtqCs
     http://research.swtch.com/gotour
     https://vimeo.com/53221560
   < src..

#    The process ends when all reachable web pages have been crawled or the memory
#    of the computer is exhausted.
   El proceso finaliza cuando todas las paginas web alcanzables se han rastreado
   o se ha agotado la memoria del equipo.

#    @b(Exercise 5.10): Rewrite @c(topoSort) to use maps instead of slices and
#    eliminate the initial sort.  Verify that the results, though
#    nondeterministic, are valid topological orderings.
   @b(Ejercicio 5.10): Vuelve a escribir @c(topoSort) para utilizar mapas en
   lugar de slices y eliminar la clasificacion inicial. Verifique que los
   resultados, aunque no deterministicos, sean ordenamientos topologicos
   validos.

#    @b(Exercise 5.11): The instructor of the linear algebra course decides that
#    calculus is now a prerequisite. Extend the @c(topoSort) function to report
#    cycles.
   @b(Ejercicio 5.11): El instructor del curso de algebra lineal decide que
   ahora es un requisito previo. Extender la funcion @c(topoSort) para reportar
   ciclos.

#    @b(Exercise 5.12): The @c(startElement) and @c(endElement) functions in
#    @c(gopl.io/ch5/outline2) (@l(#Section 5.5<>§5.5)) share a global variable,
#    @c(depth). Turn them into anonymous functions that share a variable local to
#    the @c(outline) function.
   @b(Ejercicio 5.12): Las funciones @c(startElement) y @c(endElement) en
   @c(gopl.io/ch5/outline2) (@l(#Seccion 5.5<>§5.5)) comparten una variable
   global, @c(depth). Conviertalas en funciones anonimas que compartan una
   variable local de la funcion @c(outline).

#    @b(Exercise 5.13): Modify @c(crawl) to make local copies of the pages it
#    finds, creating directories as necessary. Don’t make copies of pages that
#    come from a different domain. For example, if the original page comes from
#    @l(https://golang.org<>golang.org), save all files from there, but exclude
#    ones from @l(https://vimeo.com<>vimeo.com).
   @b(Ejercicio 5.13): Modificar @c(crawl) para hacer copias locales de las
   paginas que encuentre, la creando directorios segun sea necesario. No haga
   copias de paginas que provengan de un dominio diferente. Por ejemplo, si la
   pagina original proviene de @l(https://golang.org<>golang.org), guarda todos
   los archivos de alli, pero excluyen los de @l(https://vimeo.com<>vimeo.com).

#    @b(Exercise 5.14): Use the @c(breadthFirst) function to explore a different
#    structure. For example, you could use the course dependencies from the
#    @c(topoSort) example (a directed graph), the file system hierarchy on your
#    computer (a tree), or a list of bus or subway routes downloaded from your
#    city government’s web site (an undirected graph).
   @b(Ejercicio 5.14): Usar la funcion @c(breadthFirst) para explorar una
   estructura diferente. Por ejemplo, podria utilizar las dependencias de cursos
   del ejemplo @c(topoSort) (un grafo dirigido), la jerarquia del sistema de
   archivos en el ordenador (un arbol), o una lista de rutas de autobus o de
   metro descargados desde el sitio web de su gobierno de la ciudad (un grafo no
   dirigido).

# *** Section 5.6.1 <> Caveat: Capturing Iteration Variables
*** Seccion 5.6.1 <> Advertencia: Captura de Variables de Iteracion

#     In this section, we’ll look at a pitfall of Go’s lexical scope rules that
#     can cause surprising results.  We urge you to understand the problem before
#     proceeding, because the trap can ensnare even experienced programmers.
    En esta seccion, veremos una trampa de las reglas de alcance lexico de Go
    que pueden causar resultados sorprendentes. Le recomendamos que comprenda el
    problema antes de proceder, porque la trampa puede atrapar incluso a
    programadores experimentados.

#     Consider a program that must create a set of directories and later remove
#     them. We can use a slice of function values to hold the clean-up
#     operations. (For brevity, we have omitted all error handling in this
#     example.)
    Considere un programa que debe crear un conjunto de directorios y luego
    eliminarlos. Podemos usar una porcion de valores de funcion para mantener
    las operaciones de limpieza. (Para mayor brevedad, hemos omitido todo el
    manejo de errores en este ejemplo.)

#     ..src > go
#       var rmdirs []func()
#       for _, d := range tempDirs() {
#         dir := d               // NOTE: necessary!
#         os.MkdirAll(dir, 0755) // creates parent directories too
#         rmdirs = append(rmdirs, func() {
#           os.RemoveAll(dir)
#         })
#       }
#
#       // ...do some work...
#
#       for _, rmdir := range rmdirs {
#         rmdir() // clean up
#       }
#     < src..
    ..src > go
      var rmdirs []func()
      for _, d := range tempDirs() {
        dir := d               // NOTA: necesario!
        os.MkdirAll(dir, 0755) // tambien crea los directorios padre
        rmdirs = append(rmdirs, func() {
          os.RemoveAll(dir)
        })
      }

      // ...algo de trabajo...

      for _, rmdir := range rmdirs {
        rmdir() // clean up
      }
    < src..

#     You may be wondering why we assigned the loop variable @c(d) to a new local
#     variable @c(dir) within the loop body, instead of just naming the loop
#     variable @c(dir) as in this subtly incorrect variant:
    Es posible que se pregunte por que asignamos la variable de bucle @c(d) a
    una nueva variable local @c(dir) dentro del cuerpo del bucle, en lugar de
    simplemente nombrar a la variable de bucle @c(dir) que en esta variante
    sutil incorrectos:

#     ..src > go
#       var rmdirs []func()
#       for _, dir := range tempDirs() {
#         os.MkdirAll(dir, 0755)
#         rmdirs = append(rmdirs, func() {
#           os.RemoveAll(dir) // NOTE: incorrect!
#         })
#       }
#     < src..
    ..src > go
      var rmdirs []func()
      for _, dir := range tempDirs() {
        os.MkdirAll(dir, 0755)
        rmdirs = append(rmdirs, func() {
          os.RemoveAll(dir) // NOTA: incorrecto!
        })
      }
    < src..

#     The reason is a consequence of the scope rules for loop variables. In the
#     program immediately above, the @c(for) loop introduces a new lexical block
#     in which the variable @c(dir) is declared. All function values created by
#     this loop @"(capture) and share the same variable—an addressable storage
#     location, not its value at that particular moment. The value of @c(dir) is
#     updated in successive iterations, so by the time the cleanup functions are
#     called, the @c(dir) variable has been updated several times by the
#     now-completed @c(for) loop. Thus @c(dir) holds the value from the final
#     iteration, and consequently all calls to @c(os.RemoveAll) will attempt to
#     remove the same directory.
    La razon es una consecuencia de las reglas de alcance para variables de
    bucle. En el programa inmediatamente anterior, el bucle @c(for) introduce un
    nuevo bloque lexico en el que se declara la variable @c(dir). Todos los
    valores de la funcion creados por esta bucle @"(capturan) y comparten la
    misma variable–Un lugar de almacenamiento direccionable, no su valor en ese
    momento en particular. El valor de @c(dir) se actualiza en iteraciones
    sucesivas, de manera que cuando las funciones de limpieza son llamados, la
    variable @c(dir) ha sido actualizado varias veces por el ahora completado
    bucle @c(for). Por lo tanto @c(dir) mantiene el valor de la iteracion final,
    y por lo tanto todas las llamadas a @c(os.RemoveAll) intentaran eliminar el
    mismo directorio.

#     Frequently, the inner variable introduced to work around this
#     problem—@c(dir) in our example—is given the exact same name as the outer
#     variable of which it is a copy, leading to odd-looking but crucial variable
#     declarations like this:
    Con frecuencia, la variable interna introducido para evitar este
    problema–@c(dir) en nuestro ejemplo–se le da exactamente el mismo nombre que
    la variable externa de la que es una copia, lo que lleva a las declaraciones
    de variables de aspecto extraño pero cruciales como este:

#     ..src > go
#       for _, dir := range tempDirs() {
#         dir := dir // declares inner dir, initialized to outer dir
#         // ...
#       }
#     < src..
    ..src > go
      for _, dir := range tempDirs() {
        dir := dir // declara dir interno, inicializado a dir externo
        // ...
      }
    < src..

#     The risk is not unique to @c(range)-based @c(for) loops. The loop in the
#     example below suffers from the same problem due to unintended capture of the
#     index variable @c(i).
    El riesgo no es unica para bucles @c(for) basados en @c(range). El bucle en
    el siguiente ejemplo adolece del mismo problema debido a la captura no
    intencionada de la variable de indice @c(i).

#     ..src > go
#       var rmdirs []func()
#       dirs := tempDirs()
#       for i := 0; i < len(dirs); i++ {
#         os.MkdirAll(dirs[i], 0755) // OK
#         rmdirs = append(rmdirs, func() {
#           os.RemoveAll(dirs[i]) // NOTE: incorrect!
#         })
#       }
#     < src..
    ..src > go
      var rmdirs []func()
      dirs := tempDirs()
      for i := 0; i < len(dirs); i++ {
        os.MkdirAll(dirs[i], 0755) // OK
        rmdirs = append(rmdirs, func() {
          os.RemoveAll(dirs[i]) // NOTA: incorrecto!
        })
      }
    < src..

#     The problem of iteration variable capture is most often encountered when
#     using the @c(go) statement (@l(#Chapter 8)) or with @c(defer) (which we will
#     see in a moment) since both may delay the execution of a function value
#     until after the loop has finished. But the problem is not inherent to @c(go)
#     or @c(defer).
    El problema de la iteracion de captura variable se encuentran mas a menudo
    cuando se utiliza la sentencia @c(go) (@l(#Capitulo 8)) o con @c(defer) (que
    veremos en un momento), ya que ambos pueden retrasar la ejecucion de un
    valor de funcion hasta despues de que el bucle ha finalizado. Pero el
    problema no es inherente a @c(go) o @c(defer).

# ** Section 5.7 <> Variadic Functions
** Seccion 5.7 <> Funciones Variadic

#    A @e(variadic function) is one that can be called with varying numbers of
#    arguments. The most familiar examples are @c(fmt.Printf) and its
#    variants. @c(Printf) requires one fixed argument at the beginning, then
#    accepts any number of subsequent arguments.
   Una @e(funcion variadic) es uno que se puede llamar con un numero de
   argumentos variable. Los ejemplos mas conocidos son @c(fmt.Printf) y sus
   variantes. @c(Printf) requiere un argumento fijo al principio, luego acepta
   cualquier numero de argumentos posteriores.

#    To declare a variadic function, the type of the final parameter is preceded
#    by an ellipsis, @"(@c(...)), which indicates that the function may be called with
#    any number of arguments of this type.
   Para declarar una funcion variadic, el tipo del parametro final va precedida
   por una elipsis, @"(@c(...)), que indica que la funcion puede ser llamada con
   cualquier numero de argumentos de este tipo.

#    ..figure > @l(gopl.io/ch5/sum/main.go<>gopl.io/ch5/sum)
   ..figure > @l(gopl.io/ch5/sum/main.go<>gopl.io/ch5/sum)

#      ..src > go
#        func sum(vals ...int) int {
#          total := 0
#          for _, val := range vals {
#            total += val
#          }
#          return total
#        }
#      < src..
     ..src > go
       func sum(vals ...int) int {
         total := 0
         for _, val := range vals {
           total += val
         }
         return total
       }
     < src..


#    The @c(sum) function above returns the sum of zero or more @c(int)
#    arguments. Within the body of the function, the type of @c(vals) is an
#    @c([]int) slice. When @c(sum) is called, any number of values may be provided
#    for its @c(vals) parameter.
   La funcion @c(sum) anterior devuelve la suma de cero o mas argumentos
   @c(int). Dentro del cuerpo de la funcion, el tipo de @c(vals) es un slice
   @c([]int). Cuando llame a @c(sum), cualquier numero de valores puede ser
   proporcionado pora su parametro @c(vals).

#    ..src > go
#      fmt.Println(sum())           // "0"
#      fmt.Println(sum(3))          // "3"
#      fmt.Println(sum(1, 2, 3, 4)) // "10"
#    < src..
   ..src > go
     fmt.Println(sum())           // "0"
     fmt.Println(sum(3))          // "3"
     fmt.Println(sum(1, 2, 3, 4)) // "10"
   < src..

#    Implicitly, the caller allocates an array, copies the arguments into it, and
#    passes a slice of the entire array to the function. The last call above thus
#    behaves the same as the call below, which shows how to invoke a variadic
#    function when the arguments are already in a slice: place an ellipsis after
#    the final argument.
   Implicitamente, el llamador asigna un arreglo, copia los argumentos en ell y
   pasa un slice de toda la arreglo a la funcion. La llamada anterior se
   comporta de la misma manera que la llamada que se muestra a continuacion, que
   muestra como invocar una funcion variadica cuando los argumentos ya estan en
   un slice: coloca una elipsis despues del argumento final.

#    ..src > go
#      values := []int{1, 2, 3, 4}
#      fmt.Println(sum(values...)) // "10"
#    < src..
   ..src > go
     values := []int{1, 2, 3, 4}
     fmt.Println(sum(values...)) // "10"
   < src..

#    Although the @c(...int) parameter behaves like a slice within the function
#    body, the type of a variadic function is distinct from the type of a function
#    with an ordinary slice parameter.
   Aunque el parametro @c(...int) se comporta como una slice dentro del cuerpo
   de la funcion, el tipo de una funcion variadic es distinto del tipo de una
   funcion con un parametro slice ordinario.

#    ..src > go
#      func f(...int) {}
#      func g([]int)  {}
#
#      fmt.Printf("%T\n", f) // "func(...int)"
#      fmt.Printf("%T\n", g) // "func([]int)"
#    < src..
   ..src > go
     func f(...int) {}
     func g([]int)  {}

     fmt.Printf("%T\n", f) // "func(...int)"
     fmt.Printf("%T\n", g) // "func([]int)"
   < src..

#    Variadic functions are often used for string formatting. The @c(errorf)
#    function below constructs a formatted error message with a line number at the
#    beginning. The suffix @c(f) is a widely followed naming convention for
#    variadic functions that accept a @c(Printf)-style format string.
   Las funciones variadic se utilizan a menudo para el formato de la
   secuencia. La funcion @c(errorf) a continuacion construye un mensaje de error
   con formato con un numero de linea en el principio. El sufijo @c(f) es una
   convencion de nomenclatura ampliamente seguido para funciones variadic que
   aceptan una cadena de formato de estilo @c(Printf).

#    ..src > go
#      func errorf(linenum int, format string, args ...interface{}) {
#        fmt.Fprintf(os.Stderr, "Line %d: ", linenum)
#        fmt.Fprintf(os.Stderr, format, args...)
#        fmt.Fprintln(os.Stderr)
#      }
#
#      linenum, name := 12, "count"
#      errorf(linenum, "undefined: %s", name) // "Line 12: undefined: count"
#    < src..
   ..src > go
     func errorf(linenum int, format string, args ...interface{}) {
       fmt.Fprintf(os.Stderr, "Line %d: ", linenum)
       fmt.Fprintf(os.Stderr, format, args...)
       fmt.Fprintln(os.Stderr)
     }

     linenum, name := 12, "count"
     errorf(linenum, "undefined: %s", name) // "Linea 12: sin definir: count"
   < src..

#    The @c(interface{}) type means that this function can accept any values at
#    all for its final arguments, as we’ll explain in @l(#Chapter 7).
   El tipo @c(interface{}) significa que esta funcion puede aceptar cualquier
   valor en absoluto para sus argumentos finales, como explicaremos en el
   @l(#Capitulo 7).

#    @b(Exercise 5.15): Write variadic functions @c(max) and @c(min), analogous to
#    @c(sum). What should these functions do when called with no arguments? Write
#    variants that require at least one argument.
   @b(Ejercicio 5.15): Escribir funciones variadic @c(max) y @c(min), analoga a
   @c(sum). ¿Que deben hacer estas funciones cuando se llaman sin argumentos?
   Escribir variantes que requieren al menos un argumento.

#    @b(Exercise 5.16): Write a variadic version of @c(strings.Join).
   @b(Ejercicio 5.16): Escribir una version variadic @c(de strings.Join) .

#    @b(Exercise 5.17): Write a variadic function @c(ElementsByTagName) that,
#    given an HTML node tree and zero or more names, returns all the elements that
#    match one of those names. Here are two example calls:
   @b(Ejercicio 5.17): Escribir una funcion variadic @c(ElementsByTagName) que, dado
   un arbol de nodos HTML y cero o mas nombres, devuelve todos los elementos que
   coinciden con uno de esos nombres. Aqui hay dos ejemplos de llamadas:

#    ..src > go
#      func ElementsByTagName(doc *html.Node, name ...string) []*html.Node
#
#      images := ElementsByTagName(doc, "img")
#      headings := ElementsByTagName(doc, "h1", "h2", "h3", "h4")
#    < src..
   ..src > go
     func ElementsByTagName(doc *html.Node, name ...string) []*html.Node

     images := ElementsByTagName(doc, "img")
     headings := ElementsByTagName(doc, "h1", "h2", "h3", "h4")
   < src..

# ** Section 5.8 <> Deferred Function Calls
** Seccion 5.8 <> Llamadas de Funcion Diferida

#    Our @c(findLinks) examples used the output of @c(http.Get) as the input to
#    @c(html.Parse). This works well if the content of the requested URL is indeed
#    HTML, but many pages contain images, plain text, and other file
#    formats. Feeding such files into an HTML parser could have undesirable
#    effects.
   Nuestros ejemplos @c(findLinks) utilizan la salida de @c(http.Get) como la
   entrada de @c(html.Parse). Esto funciona bien si el contenido de la URL
   solicitada es de hecho HTML, pero muchas paginas contienen imagenes, texto
   sin formato y otros formatos de archivo. La alimentacion de estos archivos en
   un analizador HTML podria tener efectos no deseados.

#    The program below fetches an HTML document and prints its title. The
#    @c(title) function inspects the @c(Content-Type) header of the server’s
#    response and returns an error if the document is not HTML.
   El siguiente programa recupera un documento HTML e imprime su titulo. La
   funcion @c(title) inspecciona la cabecera @c(Content-Type) de la respuesta
   del servidor y devuelve un error si el documento no es HTML.

#    ..figure > @l(gopl.io/ch5/title1/title.go<>gopl.io/ch5/title1)
   ..figure > @l(gopl.io/ch5/title1/title.go<>gopl.io/ch5/title1)

#      ..src > go
#        func title(url string) error {
#          resp, err := http.Get(url)
#          if err != nil {
#            return err
#          }
#
#          // Check Content-Type is HTML (e.g., "text/html; charset=utf-8").
#          ct := resp.Header.Get("Content-Type")
#          if ct != "text/html" && !strings.HasPrefix(ct, "text/html;") {
#            resp.Body.Close()
#            return fmt.Errorf("%s has type %s, not text/html", url, ct)
#          }
#
#          doc, err := html.Parse(resp.Body)
#          resp.Body.Close()
#          if err != nil {
#            return fmt.Errorf("parsing %s as HTML: %v", url, err)
#          }
#
#          visitNode := func(n *html.Node) {
#            if n.Type == html.ElementNode && n.Data == "title" &&
#              n.FirstChild != nil {
#              fmt.Println(n.FirstChild.Data)
#            }
#          }
#          forEachNode(doc, visitNode, nil)
#          return nil
#        }
#      < src..
     ..src > go
       func title(url string) error {
         resp, err := http.Get(url)
         if err != nil {
           return err
         }

         // Comprueba que Content-Type sea HTML (e.g., "text/html; charset=utf-8").
         ct := resp.Header.Get("Content-Type")
         if ct != "text/html" && !strings.HasPrefix(ct, "text/html;") {
           resp.Body.Close()
           return fmt.Errorf("%s has type %s, not text/html", url, ct)
         }

         doc, err := html.Parse(resp.Body)
         resp.Body.Close()
         if err != nil {
           return fmt.Errorf("parsing %s as HTML: %v", url, err)
         }

         visitNode := func(n *html.Node) {
           if n.Type == html.ElementNode && n.Data == "title" &&
             n.FirstChild != nil {
             fmt.Println(n.FirstChild.Data)
           }
         }
         forEachNode(doc, visitNode, nil)
         return nil
       }
     < src..


#    Here’s a typical session, slightly edited to fit:
   Aqui esta una sesion tipica, ligeramente editada para encajar:

#    ..src > sh
#      $ go build gopl.io/ch5/title1
#      $ ./title1 http://gopl.io
#      The Go Programming Language
#      $ ./title1 https://golang.org/doc/effective_go.html
#      Effective Go - The Go Programming Language
#      $ ./title1 https://golang.org/doc/gopher/frontpage.png
#      title: https://golang.org/doc/gopher/frontpage.png
#          has type image/png, not text/html
#    < src..
   ..src > sh
     $ go build gopl.io/ch5/title1
     $ ./title1 http://gopl.io
     The Go Programming Language
     $ ./title1 https://golang.org/doc/effective_go.html
     Effective Go - The Go Programming Language
     $ ./title1 https://golang.org/doc/gopher/frontpage.png
     title: https://golang.org/doc/gopher/frontpage.png
         has type image/png, not text/html
   < src..

#    Observe the duplicated @c[resp.Body.Close()] call, which ensures that
#    @c(title) closes the network connection on all execution paths, including
#    failures. As functions grow more complex and have to handle more errors, such
#    duplication of clean-up logic may become a maintenance problem. Let’s see how
#    Go’s novel @c(defer) mechanism makes things simpler.
   Observe la llamada duplicada @c[resp.Body.Close()], que asegura que @c(title)
   se cierre la conexion de red en todas las rutas de ejecucion, incluyendo las
   fallas. A medida que las funciones se vuelven mas complejas y tienen que
   manejar mas errores, tal duplicacion de la logica de limpieza puede
   convertirse en un problema de mantenimiento. Veamos como el nuevo mecanismo
   @c(defer) de Go hace las cosas mas sencillas.

#    Syntactically, a @c(defer) statement is an ordinary function or method call
#    prefixed by the keyword @c(defer). The function and argument expressions are
#    evaluated when the statement is executed, but the actual call is @e(deferred)
#    until the function that contains the @c(defer) statement has finished,
#    whether normally, by executing a return statement or falling off the end, or
#    abnormally, by panicking. Any number of calls may be deferred; they are
#    executed in the reverse of the order in which they were deferred.
   Sintacticamente, una sentencia @c(defer) es una funcion ordinaria o una
   llamada a un metodo con la palabra clave @c(defer) como prefijo. Las
   expresiones de funcion y los argumentos se evaluan cuando se ejecuta la
   instruccion, pero la llamada real se aplaza hasta que la funcion que contiene
   la declaracion @c(defer) ha terminado, ya sea ejecutando una instruccion de
   retorno o llegando al final, o anormalmente, por un panico. Cualquier numero
   de llamadas puede ser diferido; se ejecutan en el orden inverso en que fueron
   aplazadas.

#    A @c(defer) statement is often used with paired operations like open and
#    close, connect and disconnect, or lock and unlock to ensure that resources
#    are released in all cases, no matter how complex the control flow. The right
#    place for a @c(defer) statement that releases a resource is immediately after
#    the resource has been successfully acquired. In the @c(title) function below,
#    a single deferred call replaces both previous calls to @c[resp.Body.Close()]:
   Una sentencia @c(defer) se utiliza a menudo con operaciones pareadas como
   abrir y cerrar, conectar y desconectar o bloquear y desbloquear para
   garantizar que los recursos se liberan en todos los casos, independientemente
   de la complejidad del flujo de control. El lugar adecuado para una sentencia
   @c(defer) que libera un recurso es inmediatamente despues de que el recurso
   se ha adquirido con exito. En la funcion @c(title) a continuacion, una sola
   llamada diferida sustituye a las dos llamadas anteriores de
   @c[resp.Body.Close()]:

#    ..figure > @l(gopl.io/ch5/title2/title.go<>gopl.io/ch5/title2)
   ..figure > @l(gopl.io/ch5/title2/title.go<>gopl.io/ch5/title2)

#      ..src > go
#        func title(url string) error {
#          resp, err := http.Get(url)
#          if err != nil {
#            return err
#          }
#          defer resp.Body.Close()
#
#          ct := resp.Header.Get("Content-Type")
#          if ct != "text/html" && !strings.HasPrefix(ct, "text/html;") {
#            return fmt.Errorf("%s has type %s, not text/html", url, ct)
#          }
#
#          doc, err := html.Parse(resp.Body)
#          if err != nil {
#            return fmt.Errorf("parsing %s as HTML: %v", url, err)
#          }
#
#          // ...print doc's title element...
#
#          return nil
#        }
#      < src..
     ..src > go
       func title(url string) error {
         resp, err := http.Get(url)
         if err != nil {
           return err
         }
         defer resp.Body.Close()

         ct := resp.Header.Get("Content-Type")
         if ct != "text/html" && !strings.HasPrefix(ct, "text/html;") {
           return fmt.Errorf("%s has type %s, not text/html", url, ct)
         }

         doc, err := html.Parse(resp.Body)
         if err != nil {
           return fmt.Errorf("parsing %s as HTML: %v", url, err)
         }

         // ...imprimir los elementos title del documento...

         return nil
       }
     < src..

#    The same pattern can be used for other resources beside network connections,
#    for instance to close an open file:
   El mismo patron se puede utilizar para otros recursos ademas de las
   conexiones de red, por ejemplo para cerrar un archivo abierto:

#    ..figure > @c(io/ioutil)
   ..figure > @c(io/ioutil)

#      ..src > go
#        package ioutil
#
#        func ReadFile(filename string) ([]byte, error) {
#          f, err := os.Open(filename)
#          if err != nil {
#            return nil, err
#          }
#          defer f.Close()
#          return ReadAll(f)
#        }
#      < src..
     ..src > go
       package ioutil

       func ReadFile(filename string) ([]byte, error) {
         f, err := os.Open(filename)
         if err != nil {
           return nil, err
         }
         defer f.Close()
         return ReadAll(f)
       }
     < src..


#    or to unlock a mutex (@l(#Section 9.2<>§9.2)):
   o para desbloquear un mutex (@l(#Seccion 9.2<>§9.2)):

#    ..src > go
#      var mu sync.Mutex
#      var m = make(map[string]int)
#
#      func lookup(key string) int {
#        mu.Lock()
#        defer mu.Unlock()
#        return m[key]
#      }
#    < src..
   ..src > go
     var mu sync.Mutex
     var m = make(map[string]int)

     func lookup(key string) int {
       mu.Lock()
       defer mu.Unlock()
       return m[key]
     }
   < src..

#    The @c(defer) statement can also be used to pair @"(on entry) and @"(on exit)
#    actions when debugging a complex function. The @c(bigSlowOperation) function
#    below calls @c(trace) immediately, which does the @"(on entry) action then
#    returns a function value that, when called, does the corresponding @"(on
#    exit) action. By deferring a call to the returned function in this way, we
#    can instrument the entry point and all exit points of a function in a single
#    statement and even pass values, like the @c(start) time, between the two
#    actions. But don’t forget the final parentheses in the @c(defer) statement,
#    or the @"(on entry) action will happen on exit and the on-exit action won’t
#    happen at all!
   La sentencia @c(defer) tambien se puede utilizar para emparejar acciones de
   @"(entrada) y @"(salida) al depurar una funcion compleja. A continuacion la
   funcion @c(bigSlowOperation) llama inmediatamente a @c(trace), lo que la hace
   una accion de @"(entrada) que devuelve un valor de funcion que, cuando se le
   llama, hace la accion de @"(salida).  Al diferir una llamada a la funcion
   devuelta de esta manera, podemos instrumentar el punto de entrada y todos los
   puntos de salida de una funcion en una sola declaracion, e incluso pasar
   valores, como el tiempo de inicion @c(start), entre las dos acciones. Pero no
   se olvide de los parentesis finales en el sentencia @c(defer), o la accion de
   @"(entrada) ocurrira en la salida y la accion en la salida no ocurrira en
   absoluto!

#    ..figure > @l(gopl.io/ch5/trace/main.go<>gopl.io/ch5/trace)
   ..figure > @l(gopl.io/ch5/trace/main.go<>gopl.io/ch5/trace)

#      ..src > go
#        func bigSlowOperation() {
#          defer trace("bigSlowOperation")() // don't forget the extra parentheses
#          // ...lots of work...
#          time.Sleep(10 * time.Second)      // simulate slow operation by sleeping
#        }
#
#        func trace(msg string) func() {
#          start := time.Now()
#          log.Printf("enter %s", msg)
#          return func() { log.Printf("exit %s (%s)", msg, time.Since(start)) }
#        }
#      < src..
     ..src > go
       func bigSlowOperation() {
         defer trace("bigSlowOperation")() // no olvide los parentesis adicionales
         // ...mucho trabajo...
         time.Sleep(10 * time.Second)      // simula el funcionamiento lento durmiendo
       }

       func trace(msg string) func() {
         start := time.Now()
         log.Printf("enter %s", msg)
         return func() { log.Printf("exit %s (%s)", msg, time.Since(start)) }
       }
     < src..


#    Each time @c(bigSlowOperation) is called, it logs its entry and exit and the
#    elapsed time between them. (We used @c(time.Sleep) to simulate a slow
#    operation.)
   Cada vez @c(bigSlowOperation) se llama, registra su entrada y salida y el
   tiempo transcurrido entre ellos. (Utilizamos @c(time.Sleep) para simular una
   operacion lenta.)

#    ..src > sh
#      $ go build gopl.io/ch5/trace
#      $ ./trace
#      2015/11/18 09:53:26 enter bigSlowOperation
#      2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)
#    < src..
   ..src > sh
     $ go build gopl.io/ch5/trace
     $ ./trace
     2015/11/18 09:53:26 enter bigSlowOperation
     2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)
   < src..

#    Deferred functions run @e(after) return statements have updated the function’s
#    result variables.  Because an anonymous function can access its enclosing
#    function’s variables, including named results, a deferred anonymous function
#    can observe the function’s results.
   Las funciones diferidas se ejecutan despues de las declaraciones de retorno
   han actualizado las variables de resultado de la funcion. Debido a que una
   funcion anonima puede acceder a las variables de su funcion de inclusion,
   incluidos los resultados con nombra, una funcion anonima diferida puede
   observar los resultados de la funcion.

#    Consider the function @c(double):
   Considere la funcion @c(doble):

#    ..src > go
#      func double(x int) int {
#        return x + x
#      }
#    < src..
   ..src > go
     func doble(x int) int {
       return x + x
     }
   < src..

#    By naming its result variable and adding a @c(defer) statement, we can make
#    the function print its arguments and results each time it is called.
   Al nombrar a su variable de resultado y agregar una sentecia @c(defer),
   podemos hacer que la funcion imprimir sus argumentos y resultados cada vez
   que se llame.

#    ..src > go
#      func double(x int) (result int) {
#        defer func() { fmt.Printf("double(%d) = %d\n", x, result) }()
#        return x + x
#      }
#
#      _ = double(4)
#      // Output:
#      // "double(4) = 8"
#    < src..
   ..src > go
     func doble(x int) (resultado int) {
       defer func() { fmt.Printf("doble(%d) = %d\n", x, resultado) }()
       return x + x
     }

     _ = double(4)
     // Salida:
     // "doble(4) = 8"
   < src..

#    This trick is overkill for a function as simple as @c(double) but may be useful
#    in functions with many return statements.
   Este truco es exesivo para una funcion tan simple como @c(doble), pero puede
   ser util en funciones con muchas declaraciones de retorno.

#    A deferred anonymous function can even change the values that the enclosing
#    function returns to its caller:
   Una funcion anonima diferida puede incluso cambiar los valores que la funcion
   devuelve a su interlocutor:

#    ..src > go
#      func triple(x int) (result int) {
#        defer func() { result += x }()
#        return double(x)
#      }
#
#      fmt.Println(triple(4)) // "12"
#    < src..
   ..src > go
     func triple(x int) (result int) {
       defer func() { result += x }()
       return doble(x)
     }

     fmt.Println(triple(4)) // "12"
   < src..

#    Because deferred functions aren’t executed until the very end of a function’s
#    execution, a @c(defer) statement in a loop deserves extra scrutiny. The code
#    below could run out of file descriptors since no file will be closed until
#    all files have been processed:
   Dado que las funciones diferidos no se ejecutan hasta el final de la
   ejecucion de una funcion, una declaracion @c(defer) en un bucle merece un
   escrutinio adicional. El codigo siguiente podria quedar sin los descriptores
   de archivo ya que ningun archivo se cerrara hasta que todos los archivos se
   hayan procesado:

#    ..src > go
#      for _, filename := range filenames {
#        f, err := os.Open(filename)
#        if err != nil {
#          return err
#        }
#        defer f.Close() // NOTE: risky; could run out of file descriptors
#        // ...process f...
#      }
#    < src..
   ..src > go
     for _, filename := range filenames {
       f, err := os.Open(filename)
       if err != nil {
         return err
       }
       defer f.Close() // NOTA: arriesgado; podria quedarse sin los descriptores de archivo
       // ...procesando f...
     }
   < src..

#    One solution is to move the loop body, including the @c(defer) statement,
#    into another function that is called on each iteration.
   Una solucion es mover el cuerpo del bucle, incluyendo la declaracion
   @c(defer), a otra funcion que se llame en cada iteracion.

#    ..src > go
#      for _, filename := range filenames {
#        if err := doFile(filename); err != nil {
#          return err
#        }
#      }
#
#      func doFile(filename string) error {
#        f, err := os.Open(filename)
#        if err != nil {
#          return err
#        }
#        defer f.Close()
#        // ...process f...
#      }
#    < src..
   ..src > go
     for _, filename := range filenames {
       if err := doFile(filename); err != nil {
         return err
       }
     }

     func doFile(filename string) error {
       f, err := os.Open(filename)
       if err != nil {
         return err
       }
       defer f.Close()
       // ...procesando f...
     }
   < src..

#    The example below is an improved @$(fetch) program (@l(#Section 1.5<>§1.5))
#    that writes the HTTP response to a local file instead of to the standard
#    output. It derives the file name from the last component of the URL path,
#    which it obtains using the @c(path.Base) function.
   El siguiente ejemplo es una mejora del programa @$(fetch) (@l(#Seccion
   1.5<>§1.5)) que escribe la respuesta HTTP a un archivo local en lugar de a la
   salida estandar. Deriva el nombre del archivo del el ultimo componente de la
   ruta URL, que obtiene utilizando la funcion @c(path.Base).

#    ..figure > @l(gopl.io/ch5/fetch/main.go<>gopl.io/ch5/fetch)
   ..figure > @l(gopl.io/ch5/fetch/main.go<>gopl.io/ch5/fetch)

#      ..src > go
#        // Fetch downloads the URL and returns the
#        // name and length of the local file.
#        func fetch(url string) (filename string, n int64, err error) {
#          resp, err := http.Get(url)
#          if err != nil {
#            return "", 0, err
#          }
#          defer resp.Body.Close()
#
#          local := path.Base(resp.Request.URL.Path)
#          if local == "/" {
#            local = "index.html"
#          }
#          f, err := os.Create(local)
#          if err != nil {
#            return "", 0, err
#          }
#          n, err = io.Copy(f, resp.Body)
#          // Close file, but prefer error from Copy, if any.
#          if closeErr := f.Close(); err == nil {
#            err = closeErr
#          }
#          return local, n, err
#        }
#      < src..
     ..src > go
       // Fetch descarga la URL y regresa el rombre
       // y la longitud del archivo local.
       func fetch(url string) (filename string, n int64, err error) {
         resp, err := http.Get(url)
         if err != nil {
           return "", 0, err
         }
         defer resp.Body.Close()

         local := path.Base(resp.Request.URL.Path)
         if local == "/" {
           local = "index.html"
         }
         f, err := os.Create(local)
         if err != nil {
           return "", 0, err
         }
         n, err = io.Copy(f, resp.Body)
         // Close file, but prefer error from Copy, if any.
         if closeErr := f.Close(); err == nil {
           err = closeErr
         }
         return local, n, err
       }
     < src..


#    The deferred call to @c(resp.Body.Close) should be familiar by now. It’s
#    tempting to use a second deferred call, to @c(f.Close), to close the local
#    file, but this would be subtly wrong because @c(os.Create) opens a file for
#    writing, creating it as needed. On many file systems, notably NFS, write
#    errors are not reported immediately but may be postponed until the file is
#    closed. Failure to check the result of the close operation could cause
#    serious data loss to go unnoticed.  However, if both @c(io.Copy) and
#    @c(f.Close) fail, we should prefer to report the error from @c(io.Copy) since
#    it occurred first and is more likely to tell us the root cause.
   La llamada diferida a @c(resp.Body.Close) deberia resultar familiar por
   ahora. Es tentador utilizar una segunda llamada diferida, a @c(f.Close), para
   cerrar el archivo local, pero esto seria sutilmente incorrecto porque
   @c(os.Create) abre un archivo para escribir, crear, segun sea necesario. En
   muchos sistemas de archivos, notablemente NFS, los errores de escritura no se
   informan inmediatamente pero se pueden posponer hasta que se cierre el
   archivo. Si no se comprueba el resultado de la operacion de cierre, la
   perdida de datos graves podria pasar desapercibida. Sin embargo, si ambos
   @c(io.Copy) y @c(f.Close) fallan, debemos preferir reportar el error de
   @c(io.Copy) desde que ocurre por primera vez y es mas probable que nos diga
   la causa raiz.

#    @b(Exercise 5.18): Without changing its behavior, rewrite the @c(fetch)
#    function to use @c(defer) to close the writable file.
   @b(Ejercicio 5.18): Sin cambiar su comportamiento, reescriba la funcion
   @c(fetch) utilizando @c(defer) para cerrar el archivo de escritura.

# ** Section 5.9 <> Panic
** Seccion 5.9 <> Panico

#    Go’s type system catches many mistakes at compile time, but others, like an
#    out-of-bounds array access or nil pointer dereference, require checks at run
#    time. When the Go runtime detects these mistakes, it @e(panics).
   El sistema de tipado de Go captura muchos errores en tiempo de compilacion,
   pero otros, como un acceso a un arreglo fuera de limites o una desreferencia
   de puntero nulo, requieren comprobaciones en tiempo de ejecucion. Cuando go
   detecta errores en tiempo de ejecucion, entra en @e(panico).

#    During a typical panic, normal execution stops, all deferred function calls
#    in that goroutine are executed, and the program crashes with a log
#    message. This log message includes the @e(panic value), which is usually an
#    error message of some sort, and, for each goroutine, a @e(stack Trace)
#    showing the stack of function calls that were active at the time of the
#    panic. This log message often has enough information to diagnose the root
#    cause of the problem without running the program again, so it should always
#    be included in a bug report about a panicking program.
   Durante un panico tipico, la ejecucion normal se detiene, todas las llamadas
   de funcion diferida en esa gorutina se ejecutan, y el programa se bloquea con
   un mensaje de registro. Este mensaje de registro incluye el @e(valor de
   panico), que suele ser un mensaje de error de algun tipo, y, para cada
   goroutine, un @e(seguimiento de pila) que muestra la pila de llamadas a
   funciones que estaban activas en el momento del panico. Este mensaje de
   registro a menudo tiene suficiente informacion para diagnosticar la causa
   raiz del problema sin ejecutar el programa de nuevo, por lo que siempre debe
   incluirse en un informe de error acerca de un programa de panico.

#    Not all panics come from the runtime. The built-in @c(panic) function may be
#    called directly ; it accepts any value as an argument. A panic is often the
#    best thing to do when some @"(impossible) situation happens, for instance,
#    execution reaches a case that logically can’t happen:
   No todos los panicos provienen del tiempo de ejecucion. La funcion nativa
   @c(panic) se puede llamar directamente; acepta cualquier valor como
   argumento. Un panico es a menudo lo mejor que puede hacer cuando ocurre
   alguna situacion @"(imposible), por ejemplo, la ejecucion llega a un caso que
   logicamente, no puede suceder:

#    ..src > go
#      switch s := suit(drawCard()); s {
#      case "Spades":   // ...
#      case "Hearts":   // ...
#      case "Diamonds": // ...
#      case "Clubs":    // ...
#      default:
#        panic(fmt.Sprintf("invalid suit %q", s)) // Joker?
#      }
#    < src..
   ..src > go
     switch s := suit(drawCard()); s {
     case "Spades":   // ...
     case "Hearts":   // ...
     case "Diamonds": // ...
     case "Clubs":    // ...
     default:
       panic(fmt.Sprintf("invalid suit %q", s)) // Joker?
     }
   < src..

#    It’s good practice to assert that the preconditions of a function hold, but
#    this can easily be done to excess. Unless you can provide a more informative
#    error message or detect an error sooner, there is no point asserting a
#    condition that the runtime will check for you.
   Es una buena practica afirmar que las precondiciones de una funcion se
   mantienen, pero esto puede hacerse facilmente en exceso. A menos que pueda
   proporcionar un mensaje de error mas informativo o detectar un error antes,
   no tiene sentido afirmar una condicion que el tiempo de ejecucion comprobara
   por usted.

#    ..src > go
#      func Reset(x *Buffer) {
#        if x == nil {
#          panic("x is nil") // unnecessary!
#        }
#        x.elements = nil
#      }
#    < src..
   ..src > go
     func Reset(x *Buffer) {
       if x == nil {
         panic("x is nil") // innecesario!
       }
       x.elements = nil
     }
   < src..

#    Although Go’s panic mechanism resembles exceptions in other languages, the
#    situations in which panic is used are quite different. Since a panic causes
#    the program to crash, it is generally used for grave errors, such as a
#    logical inconsistency in the program; diligent programmers consider any crash
#    to be proof of a bug in their code. In a robust program, @"(expected) errors,
#    the kind that arise from incorrect input, misconfiguration, or failing I/O,
#    should be handled gracefully; they are best dealt with using @c(error)
#    values.
   Aunque el mecanismo de panico de Go se parece a las excepciones de otros
   lenguajes, las situaciones en las que se utiliza el panico son muy
   diferentes. Puesto que un panico hace que el programa se bloquee,
   generalmente se usa para errores graves, como una inconsistencia logica en el
   programa; Los programadores diligentes consideran cualquier accidente como
   prueba de un error en su codigo. En un programa robusto, los errores
   @"(esperados), el tipo que surgen de una entrada incorrecta, mala
   configuracion, o un defecto de E/S, deben manejarse con gracia; se tratan
   mejor con el uso de valores de @c(error).

#    Consider the function @c(regexp.Compile), which compiles a regular expression
#    into an efficient form for matching. It returns an @c(error) if called with
#    an ill-formed pattern, but checking this error is unnecessary and burdensome
#    if the caller knows that a particular call cannot fail. In such cases, it’s
#    reasonable for the caller to handle an error by panicking, since it is
#    believed to be impossible.
   Considere la funcion @c(regexp.Compile), que compila una expresion regular en
   una forma eficiente para la coincidencia. Se devuelve un @c(error) si se
   llama con un patron mal formado, pero la comprobacion de este error es
   innecesaria y onerosa si la persona que llama sabe que una llamada en
   particular no puede fallar. En tales casos, es razonable que el llamador
   maneje un error con un panico, ya que se cree que es imposible.

#    Since most regular expressions are literals in the program source code, the
#    @c(regexp) package provides a wrapper function @c(regexp.MustCompile) that
#    does this check:
   Como la mayoria de las expresiones regulares son literales en el codigo
   fuente del programa, la paquete @c(regexp) proporciona una funcion de
   envoltura @c(regexp.MustCompile) que hace esta comprobacion:

#    ..src > go
#      package regexp
#
#      func Compile(expr string) (*Regexp, error) { /* ... */ }
#
#      func MustCompile(expr string) *Regexp {
#        re, err := Compile(expr)
#        if err != nil {
#          panic(err)
#        }
#        return re
#      }
#    < src..
   ..src > go
     package regexp

     func Compile(expr string) (*Regexp, error) { /* ... */ }

     func MustCompile(expr string) *Regexp {
       re, err := Compile(expr)
       if err != nil {
         panic(err)
       }
       return re
     }
   < src..

#    The wrapper function makes it convenient for clients to initialize a
#    package-level variable with a compiled regular expression, like this:
   La funcion de envoltura hace que sea conveniente para los clientes
   inicializar una variable de nivel de paquete con una expresion regular
   compilada, como esta:

#    ..src > go
#      var httpSchemeRE = regexp.MustCompile(`^https?:`) // "http:" or "https:"
#    < src..
   ..src > go
     var httpSchemeRE = regexp.MustCompile(`^https?:`) // "http:" or "https:"
   < src..

#    Of course, @c(MustCompile) should not be called with untrusted input
#    values. The @c(Must) prefix is a common naming convention for functions of
#    this kind, like @c(template.Must) in @l(#Section 4.6).
   Por supuesto, @c(MustCompile) no debe ser llamada con valores de entrada no
   confiables. El prefijo @c(Must) es una convencion de nomenclatura comun para
   este tipo de funciones, como @c(template.Must) en la @l(#Seccion 4.6).

#    When a panic occurs, all deferred functions are run in reverse order,
#    starting with those of the topmost function on the stack and proceeding up to
#    @c(main), as the program below demonstrates:
   Cuando se produce una situacion de panico, todas las funciones diferidas se
   ejecutan en orden inverso, comenzando con las funciones en lo mas alto de la
   pila y procediendo hasta @c(main), como muestra el siguiente programa:

#    ..figure > @l(gopl.io/ch5/defer1/defer.go<>gopl.io/ch5/defer1)
   ..figure > @l(gopl.io/ch5/defer1/defer.go<>gopl.io/ch5/defer1)

#      ..src > go
#        func main() {
#          f(3)
#        }
#
#        func f(x int) {
#          fmt.Printf("f(%d)\n", x+0/x) // panics if x == 0
#          defer fmt.Printf("defer %d\n", x)
#          f(x - 1)
#        }
#      < src..
     ..src > go
       func main() {
         f(3)
       }

       func f(x int) {
         fmt.Printf("f(%d)\n", x+0/x) // panics if x == 0
         defer fmt.Printf("defer %d\n", x)
         f(x - 1)
       }
     < src..

#    When run, the program prints the following to the standard output:
   Cuando se ejecuta, el programa imprime lo siguiente en la salida estandar:

#    ..pre >
#      f(3)
#      f(2)
#      f(1)
#      defer 1
#      defer 2
#      defer 3
   ..pre >
     f(3)
     f(2)
     f(1)
     defer 1
     defer 2
     defer 3

#    A panic occurs during the call to @c[f(0)], causing the three deferred calls
#    to @c(fmt.Printf) to run.  Then the runtime terminates the program, printing
#    the panic message and a stack dump to the standard error stream (simplified
#    for clarity):
   Un panico se produce durante la llamada a @c[f(0)], provocando que se
   ejecuten las tres llamadas diferidas a @c(fmt.Printf). A continuacion, el
   tiempo de ejecucion finaliza el programa, imprimiendo el mensaje de panico y
   un volcado de pila en el flujo de error estandar (simplificado para mayor
   claridad):

#    ..pre >
#       panic: runtime error: integer divide by zero
#       main.f(0)
#               src/gopl.io/ch5/defer1/defer.go:14
#       main.f(1)
#               src/gopl.io/ch5/defer1/defer.go:16
#       main.f(2)
#               src/gopl.io/ch5/defer1/defer.go:16
#
#       main.f(3)
#               src/gopl.io/ch5/defer1/defer.go:16
#       main.main()
#               src/gopl.io/ch5/defer1/defer.go:10
#    < pre..
   ..pre >
      panic: runtime error: integer divide by zero
      main.f(0)
              src/gopl.io/ch5/defer1/defer.go:14
      main.f(1)
              src/gopl.io/ch5/defer1/defer.go:16
      main.f(2)
              src/gopl.io/ch5/defer1/defer.go:16

      main.f(3)
              src/gopl.io/ch5/defer1/defer.go:16
      main.main()
              src/gopl.io/ch5/defer1/defer.go:10
   < pre..

#    As we will see soon, it is possible for a function to recover from a panic so
#    that it does not terminate the program.
   Como veremos mas adelante, es posible que una funcion se recupere de un
   panico para que no termine el programa.

#    For diagnostic purposes, the @c(runtime) package lets the programmer dump the
#    stack using the same machinery. By deferring a call to @c(printStack) in
#    @c(main),
   Por propositod de diagnostico, el paquete @c(runtime) permite al programador
   volcar la pila utilizando la misma maquinaria. Al diferir una llamada a
   @c(printStack) en @c(main),

#    ..figure > @l(gopl.io/ch5/defer2/defer.go<>gopl.io/ch5/defer2)
   ..figure > @l(gopl.io/ch5/defer2/defer.go<>gopl.io/ch5/defer2)

#      ..src > go
#        func main() {
#          defer printStack()
#          f(3)
#        }
#
#        func printStack() {
#          var buf [4096]byte
#          n := runtime.Stack(buf[:], false)
#          os.Stdout.Write(buf[:n])
#        }
#      < src..
     ..src > go
       func main() {
         defer printStack()
         f(3)
       }

       func printStack() {
         var buf [4096]byte
         n := runtime.Stack(buf[:], false)
         os.Stdout.Write(buf[:n])
       }
     < src..


#    the following additional text (again simplified for clarity) is printed to
#    the standard output:
   El siguiente texto adicional (simplificado de nuevo para mayor claridad) se
   imprime a la salida estandar:

#    ..pre >
#       goroutine 1 [running]:
#       main.printStack()
#         src/gopl.io/ch5/defer2/defer.go:20
#       main.f(0)
#         src/gopl.io/ch5/defer2/defer.go:27
#       main.f(1)
#         src/gopl.io/ch5/defer2/defer.go:29
#       main.f(2)
#         src/gopl.io/ch5/defer2/defer.go:29
#       main.f(3)
#         src/gopl.io/ch5/defer2/defer.go:29
#       main.main()
#         src/gopl.io/ch5/defer2/defer.go:15
#    < pre..
   ..pre >
      goroutine 1 [running]:
      main.printStack()
        src/gopl.io/ch5/defer2/defer.go:20
      main.f(0)
        src/gopl.io/ch5/defer2/defer.go:27
      main.f(1)
        src/gopl.io/ch5/defer2/defer.go:29
      main.f(2)
        src/gopl.io/ch5/defer2/defer.go:29
      main.f(3)
        src/gopl.io/ch5/defer2/defer.go:29
      main.main()
        src/gopl.io/ch5/defer2/defer.go:15
   < pre..


#    Readers familiar with exceptions in other languages may be surprised that
#    @c(runtime.Stack) can print information about functions that seem to have
#    already been @"(unwound.) Go’s panic mechanism runs the deferred functions
#    @c(before) it unwinds the stack.
   Los lectores familiarizados con excepciones en otros lenguajes pueden
   sorprenderse de que @c(runtime.Stack) pueda imprimir informacion sobre
   funciones que parecen haber sido @"(desenrolladas). El Mecanismo de panico de
   Go ejecuta las funciones diferidos antes de desenrollar la pila.

# ** Section 5.10 <> Recover
** Seccion 5.10 <> Recover

#    Giving up is usually the right response to a panic, but not always. It might
#    be possible to recover in some way, or at least clean up the mess before
#    quitting. For example, a web server that encounters an unexpected problem
#    could close the connection rather than leave the client hanging, and during
#    development, it might report the error to the client too.
   Desistir es generalmente la respuesta correcta a un panico, pero no
   siempre. Podria ser posible recuperarse de alguna manera, o al menos limpiar
   el lio antes de marcharse. Por ejemplo, un servidor web que encuentra un
   problema inesperado podria cerrar la conexion en lugar de dejar al cliente
   colgado y, durante el desarrollo, podria informar el error al cliente
   tambien.

#    If the built-in @c(recover) function is called within a deferred function and
#    the function containing the @c(defer) statement is panicking, @c(recover)
#    ends the current state of panic and returns the panic value. The function
#    that was panicking does not continue where it left off but returns
#    normally. If @c(recover) is called at any other time, it has no effect and
#    returns @c(nil).
   Si la funcion nativa @c(recover) se llama dentro de una funcion diferida y la
   funcion que contiene la sentencia @c(defer) es presa del panico, @c(recover)
   termina el actual estado de panico y devuelve el valor de panico. La funcion
   que estaba en panico no continua donde lo dejo pero devuelve normalmente. Si
   @c(recover) se llama en cualquier otro momento, no tiene ningun efecto y
   devuelve @c(nil).

#    To illustrate, consider the development of a parser for a language. Even when
#    it appears to be working well, given the complexity of its job, bugs may
#    still lurk in obscure corner cases. We might prefer that, instead of
#    crashing, the parser turns these panics into ordinary parse errors, perhaps
#    with an extra message exhorting the user to file a bug report.
   Para ilustrar, considere el desarrollo de un analizador para un
   lenguaje. Incluso cuando parece estar funcionando bien, dada la complejidad
   de su trabajo, los bichos todavia pueden acechar en esquinas
   oscuras. Podriamos preferir que, en lugar de fallar, el analizador convierta
   estos panicos en errores comunes de analisis, quizas con un mensaje extra
   exhortando al usuario a presentar un informe de error.

#    ..src > go
#      func Parse(input string) (s *Syntax, err error) {
#        defer func() {
#          if p := recover(); p != nil {
#            err = fmt.Errorf("internal error: %v", p)
#          }
#        }()
#        // ...parser...
#      }
#    < src..
   ..src > go
     func Parse(input string) (s *Syntax, err error) {
       defer func() {
         if p := recover(); p != nil {
           err = fmt.Errorf("internal error: %v", p)
         }
       }()
       // ...analizador...
     }
   < src..

#    The deferred function in @c(Parse) recovers from a panic, using the panic
#    value to construct an error message; a fancier version might include the
#    entire call stack using @c(runtime.Stack). The deferred function then assigns
#    to the @c(err) result, which is returned to the caller.
   La funcion diferida en @c(Parse) se recupera de una situacion de panico,
   utilizando el valor de panico para construir un mensaje de error; una version
   mas elegante podria incluir toda la pila de llamadas usando @c(runtime.Stack).
   Luego la funcion diferida, asigna @c(err) al resultado, que se devuelve al
   llamador.

#    Recovering indiscriminately from panics is a dubious practice because the
#    state of a package’s variables after a panic is rarely well defined or
#    documented. Perhaps a critical update to a data structure was incomplete, a
#    file or network connection was opened but not closed, or a lock was acquired
#    but not released. Furthermore, by replacing a crash with, say, a line in a
#    log file, indiscriminate recovery may cause bugs to go unnoticed.
   La recuperacion indiscriminada de los panicos es una practica dudosa porque
   el estado de las variables de un paquete despues de un panico raramente esta
   bien definido o documentado. Quizas una actualizacion critica de una
   estructura de datos estaba incompleta, se abrio una conexion de archivo o de
   red pero no se cerro o se obtuvo un bloqueo pero no se libero. Ademas, al
   reemplazar un bloqueo con, por ejemplo, una linea en un archivo de registro,
   la recuperacion indiscriminada puede hacer que los errores pasen
   desapercibidos.

#    Recovering from a panic within the same package can help simplify the
#    handling of complex or unexpected errors, but as a general rule, you should
#    not attempt to recover from another package’s panic. Public APIs should
#    report failures as @c(errors). Similarly, you should not recover from a panic
#    that may pass through a function you do not maintain, such as a
#    caller-provided callback, since you cannot reason about its safety.
   La recuperacion de un panico dentro del mismo paquete puede ayudar a
   simplificar el manejo de errores complejos o inesperados, pero como regla
   general, no debe intentar recuperarse del panico de otro paquete. Las APIs
   publicas deben informar de fallos como @c(errores). Del mismo modo, no debe
   recuperarse de un panico que puede pasar a traves de una funcion que no
   mantiene, como una llamador de devolucion de lllamada, ya que no puede
   razonar sobre su seguridad.

#    For example, the @c(net/http) package provides a web server that dispatches
#    incoming requests to user-provided handler functions. Rather than let a panic
#    in one of these handlers kill the process, the server calls @c(recover),
#    prints a stack trace, and continues serving. This is convenient in practice,
#    but it does risk leaking resources or leaving the failed handler in an
#    unspecified state that could lead to other problems.
   Por ejemplo, el paquete @c(net/http) proporciona un servidor web que envia
   las solicitudes entrantes a funciones de controlador proporcionados por el
   usuario. En lugar de permitir que un panico en uno de estos controladores
   elimine el proceso, el servidor llama a @c(recover), imprime un seguimiento
   de la pila, y sigue atendiendo. Esto es conveniente en la practica, pero se
   corre el riesgo de perder recursos o dejar al manejador fallido en un estado
   no especificado que podria conducir a otros problemas.

#    For all the above reasons, it’s safest to recover selectively if at all. In
#    other words, recover only from panics that were intended to be recovered
#    from, which should be rare. This intention can be encoded by using a
#    distinct, unexported type for the panic value and testing whether the value
#    returned by @c(recover) has that type. (We’ll see one way to do this in the
#    next example.) If so, we report the panic as an ordinary @c(error); if not,
#    we call @c(panic) with the same value to resume the state of panic.
   Por todas las razones anteriores, es mas seguro recuperarse selectivamente si
   es necesario. En otras palabras, recuperar solo de los panicos que estaban
   destinados a ser recuperados, lo que deberia ser raro. Esta intencion puede
   ser codificado mediante el uso de un tipo distinto, sin exportar para el
   valor de panico y probar si el valor devuelto por @c(recover) tiene ese
   tipo. (Veremos una manera de hacer esto en el siguiente ejemplo.) Si es asi,
   el informamos el panico como un error ordinario; si no, que llamamos a
   @c(panic) con el mismo valor para reanudar el estado de panico.

#    The example below is a variation on the @$(title) program that reports an
#    error if the HTML document contains multiple @c(<title>) elements. If so, it
#    aborts the recursion by calling @c(panic) with a value of the special type
#    @c(bailout).
   El ejemplo siguiente es una variacion sobre el programa @$(title) que informa
   de un error si el documento HTML contiene multiples elementos @c(<title>). Si
   es asi, se aborta la recursividad llamando a @c(panic) con un valor del tipo
   especial @c(bailout).

#    ..figure > @l(gopl.io/ch5/title3/title.go<>gopl.io/ch5/title3)
   ..figure > @l(gopl.io/ch5/title3/title.go<>gopl.io/ch5/title3)

#      ..src > go
#        // soleTitle returns the text of the first non-empty title element
#        // in doc, and an error if there was not exactly one.
#        func soleTitle(doc *html.Node) (title string, err error) {
#          type bailout struct{}
#
#          defer func() {
#            switch p := recover(); p {
#            case nil:
#              // no panic
#            case bailout{}:
#              // "expected" panic
#              err = fmt.Errorf("multiple title elements")
#            default:
#              panic(p) // unexpected panic; carry on panicking
#            }
#          }()
#
#          // Bail out of recursion if we find more than one non-empty title.
#          forEachNode(doc, func(n *html.Node) {
#            if n.Type == html.ElementNode && n.Data == "title" &&
#              n.FirstChild != nil {
#              if title != "" {
#                panic(bailout{}) // multiple title elements
#              }
#              title = n.FirstChild.Data
#            }
#          }, nil)
#          if title == "" {
#            return "", fmt.Errorf("no title element")
#          }
#          return title, nil
#        }
#      < src..
     ..src > go
       // soleTitle regresa el siguiente texto del primer elemento title no vacio
       // en doc, y un error si no existiera exactamente uno.
       func soleTitle(doc *html.Node) (title string, err error) {
         type bailout struct{}

         defer func() {
           switch p := recover(); p {
           case nil:
             // sin panico
           case bailout{}:
             // panico "esperado"
             err = fmt.Errorf("multiple title elements")
           default:
             panic(p) // panico inersperado; continuar el panico
           }
         }()

         // Bail out de recursion si encontramos mas de un titulo no vacio.
         forEachNode(doc, func(n *html.Node) {
           if n.Type == html.ElementNode && n.Data == "title" &&
             n.FirstChild != nil {
             if title != "" {
               panic(bailout{}) // multiples elementos titulo
             }
             title = n.FirstChild.Data
           }
         }, nil)
         if title == "" {
           return "", fmt.Errorf("no title element")
         }
         return title, nil
       }
     < src..


#    The deferred handler function calls @c(recover), checks the panic value, and
#    reports an ordinary error if the value was @c(bailout{}). All other non-nil
#    values indicate an unexpected panic, in which case the handler calls
#    @c(panic) with that value, undoing the effect of @c(recover) and resuming the
#    original state of panic. (This example does somewhat violate our advice about
#    not using panics for @"(expected) errors, but it provides a compact
#    illustration of the mechanics.)
   La funcion diferida que llama a @c(recover), comprueba el valor de panico, e
   informa de un error ordinario si el valor era @c(bailout{}). Todos los demas
   valores no nulos indican un panico inesperados, en cuyo caso el controlador
   llama a @c(panic) con ese valor, deshace el efecto de @c(recover) y reanuda
   el estado original de panico. (Este ejemplo viola algo nuestro consejo acerca
   de no usar panicos para errores @"(esperados), pero proporciona una
   ilustracion compacta de la mecanica).

#    From some conditions there is no recovery. Running out of memory, for
#    example, causes the Go runtime to terminate the program with a fatal error.
   De algunas condiciones no hay recuperacion. La falta de memoria, por ejemplo,
   provoca en tiempo de ejecucion que el programa termine con un error grave.

#    @b(Exercise 5.19): Use @c(panic) and @c(recover) to write a function that
#    contains no @c(return) statement yet returns a non-zero value.
   @b(Ejercicio 5.19): Utilice @c(panic) y @c(recover) para escribir una funcion
   que no contenga ninguna sentencia @c(return) y devuelva un valor distinto de
   cero.

# * Chapter 6 <> Methods
* Capitulo 6 <> Metodos

#   Since the early 1990s, object-oriented programming (OOP) has been the dominant
#   programming paradigm in industry and education, and nearly all widely used
#   languages developed since then have included support for it. Go is no
#   exception.
  Desde principios de los noventa, la programacion orientada a objetos (OOP) ha
  sido el paradigma de programacion dominante en la industria y la educacion, y
  casi todos las lenguajes ampliamente utilizadas desarrolladas desde entonces
  han incluido el soporte para ello. Go no es una excepcion.

#   Although there is no universally accepted definition of object-oriented
#   programming, for our purposes, an @e(object) is simply a value or variable
#   that has methods, and a @e(method) is a function associated with a particular
#   type. An object-oriented program is one that uses methods to express the
#   properties and operations of each data structure so that clients need not
#   access the object’s representation directly.
  Aunque no existe una definicion universalmente aceptada de la programacion
  orientada a objetos, para nuestros propositos, un @e(objeto) es simplemente un
  valor o variable que tiene metodos, y un metodo es una funcion asociada a un
  tipo particular. Un programa orientado a objetos es aquel que utiliza metodos
  para expresar las propiedades y operaciones de cada estructura de datos de
  modo que los clientes no necesitan acceder directamente a la representacion
  del objeto.

#   In earlier chapters, we have made regular use of methods from the standard
#   library, like the @c(Seconds) method of type @c(time.Duration):
  En los capitulos anteriores, hemos hecho uso regular de metodos de la libreria
  estandar, como el metodo @c(Seconds) del tipo @c(time.Duration):

#   ..src > go
#     const day = 24 * time.Hour
#     fmt.Println(day.Seconds()) // "86400"
#   < src..
  ..src > go
    const day = 24 * time.Hour
    fmt.Println(day.Seconds()) // "86400"
  < src..

#   and we defined a method of our own in @l(#Section 2.5), a @c(String) method
#   for the @c(Celsius) type:
  y definimos un metodo de propia en la @l(#Seccion 2.5), una metodo @c(String)
  para el Tipo @c(Celsius):

#   ..src > go
#     func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
#   < src..
  ..src > go
    func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
  < src..

#   In this chapter, the first of two on object-oriented programming, we’ll show
#   how to define and use methods effectively. We’ll also cover two key principles
#   of object-oriented programming, @e(encapsulation) and @e(composition).
  En este capitulo, el primero de dos en la programacion orientada a objetos,
  mostraremos como definir y utilizar metodos de manera eficaz. Tambien vamos a
  cubrir dos principios fundamentales de la programacion orientada a objetos,
  encapsulacion y composicion.

# ** Section 6.1 <> Method Declarations
** Seccion 6.1 <> Declaracion de Metodos

#    A method is declared with a variant of the ordinary function declaration in
#    which an extra parameter appears before the function name. The parameter
#    attaches the function to the type of that parameter.
   Se declara un metodo con una variante de la declaracion de funcion ordinaria
   en la que aparece un parametro extra antes del nombre de la funcion. El
   parametro asigna la funcion al tipo de ese parametro.

#    Let’s write our first method in a simple package for plane geometry:
   Vamos a escribir nuestro primer metodo en un simple paquete de geometria
   plana:

#    ..figure > @l(gopl.io/ch6/geometry/geometry.go<>gopl.io/ch6/geometry)
   ..figure > @l(gopl.io/ch6/geometry/geometry.go<>gopl.io/ch6/geometry)

#      ..src > go
#        package geometry
#
#        import "math"
#
#        type Point struct{ X, Y float64 }
#
#        // traditional function
#        func Distance(p, q Point) float64 {
#          return math.Hypot(q.X-p.X, q.Y-p.Y)
#        }
#
#        // same thing, but as a method of the Point type
#        func (p Point) Distance(q Point) float64 {
#          return math.Hypot(q.X-p.X, q.Y-p.Y)
#        }
#      < src..
     ..src > go
       package geometria

       import "math"

       type Punto struct{ X, Y float64 }

       // funcion tradicional
       func Distancia(p, q Punto) float64 {
         return math.Hypot(q.X-p.X, q.Y-p.Y)
       }

       // lo mismo, pero como un metodo del tipo Punto
       func (p Punto) Distancia(q Punto) float64 {
         return math.Hypot(q.X-p.X, q.Y-p.Y)
       }
     < src..

#    The extra parameter @c(p) is called the method’s @e(receiver), a legacy from
#    early object-oriented languages that described calling a method as @"(sending
#    a message to an object.)
   El parametro extra @c(p) se denomina el @e(receptor) del metodo, un legado de
   los primeros lenguajes orientados a objetos que describen la llamada a un
   metodo como @"(el envio de un mensaje a un objeto).

#    In Go, we don’t use a special name like @c(this) or @c(self) for the
#    receiver; we choose receiver names just as we would for any other
#    parameter. Since the receiver name will be frequently used, it’s a good idea
#    to choose something short and to be consistent across methods. A common
#    choice is the first letter of the type name, like @c(p) For @c(Point).
   En Go, no utilizamos un nombre especial como @c(this) o @c(self) para el
   receptor; Elegimos los nombres de los receptores tal como lo hariamos para
   cualquier otro parametro. Pusto que el nombre del receptor se utilizara con
   frecuencia, es una buena idea elegir algo corto y ser coherente entre los
   metodos. Una opcion comun es la primer letra del nombre del tipo, como @c(p)
   por @c(Point).

#    In a method call, the receiver argument appears before the method name. This
#    parallels the declaration, in which the receiver parameter appears before the
#    method name.
   En una llamada al metodo, el argumento del receptor aparece antes del nombre
   del metodo. Esto es paralelo a la declaracion, en la que el parametro del
   receptor aparece antes del nombre del metodo.

#    ..src > go
#      p := Point{1, 2}
#      q := Point{4, 6}
#      fmt.Println(Distance(p, q)) // "5", function call
#      fmt.Println(p.Distance(q))  // "5", method call
#    < src..
   ..src > go
     p := Punto{1, 2}
     q := Punto{4, 6}
     fmt.Println(Distancia(p, q)) // "5", llamada a funcion
     fmt.Println(p.Distancia(q))  // "5", llamada a metodo
   < src..

#    There’s no conflict between the two declarations of functions called
#    @c(Distance) above. The first declares a package-level function called
#    @c(geometry.Distance). The second declares a method of the type @c(Point), so
#    its name is @c(Point.Distance).
   No hay conflicto entre las dos declaraciones de funcion llamadas @c(Distancia)
   anteriores. La primera declara una funcion de nivel paquete llamada
   @c(geometria.Distancia). La segunda declara un procedimiento del tipo @c(Punto), por
   lo que su nombre es @c(Punto.Distancia).

#    The expression @c(p.Distance) is called a @e(selector), because it selects
#    the appropriate @c(Distance) method for the receiver @c(p) of type
#    @c(Point). Selectors are also used to select fields of struct types, as in
#    @c(p.X). Since methods and fields inhabit the same name space, declaring a
#    method @c(X) on the struct type @c(Point) would be ambiguous and the compiler
#    will reject it.
   La expresion @c(p.Distancia) se denomina un @e(selector), porque selecciona
   el metodo apropiado @c(Distancia) para el receptor @c(p) de tipo @c(Punto).
   Los selectores tambien se utilizan para seleccionar los campos de un tipo
   estructura, como en @c(p.X). Dado que los metodos y campos habitan el mismo
   espacio de nombres, si declara un metodo @c(X) para el tipo de estructura
   @c(Punto) seria ambiguo y el compilador lo rechazara.

#    Since each type has its own name space for methods, we can use the name
#    @c(Distance) for other methods so long as they belong to different
#    types. Let’s define a type @c(Path) that represents a sequence of line
#    segments and give it a @c(Distance) method too.
   Debido a que cada tipo tiene su propio espacio de nombres para los metodos,
   podemos usar el nombre @c(Distancia) para otros metodos, siempre y cuando
   pertenecen a diferentes tipos. Vamos a definir un tipo @c(Ruta) que
   representa una secuencia de segmentos de linea y a darle un metodo
   @c(Distancia) tambien.

#    ..src > go
#      // A Path is a journey connecting the points with straight lines.
#      type Path []Point
#
#      // Distance returns the distance traveled along the path.
#      func (path Path) Distance() float64 {
#        sum := 0.0
#        for i := range path {
#          if i > 0 {
#            sum += path[i-1].Distance(path[i])
#          }
#        }
#        return sum
#      }
#    < src..
   ..src > go
     // Una Ruta es un caminoA que conecta los puntos con lineas reactas.
     type Ruta []Punto

     // Distancia devuelve la distancia recorrida a lo largo de la Ruta.
     func (ruta Ruta) Distancia() float64 {
       sum := 0.0
       for i := range ruta {
         if i > 0 {
           sum += ruta[i-1].Distancia(ruta[i])
         }
       }
       return sum
     }
   < src..

#    @c(Path) is a named slice type, not a struct type like @c(Point), yet we can
#    still define methods for it.  In allowing methods to be associated with any
#    type, Go is unlike many other object-oriented languages. It is often
#    convenient to define additional behaviors for simple types such as numbers,
#    strings, slices, maps, and sometimes even functions. Methods may be declared
#    on any named type defined in the same package, so long as its underlying type
#    is neither a pointer nor an interface.
   @c(Ruta) es un tipo de slice con nombre, no un tipo de estructura como
   @c(Punto), sin embargo, podemos definir metodos para el. Al permitir que los
   metodos se asocien con cualquier tipo, Go es diferente de muchos otros
   lenguajes orientados a objetos. A menudo es conveniente definir
   comportamientos adicionales para tipos simples como numeros, cadenas, slices,
   mapas, y a veces, incluso funciones. Los metodos pueden ser declarados en
   cualquier tipo con nombre definido en el mismo paquete, siempre y cuando su
   tipo subyacente no sea un puntero ni una interfaz.

#    The two @c(Distance) methods have different types. They’re not related to
#    each other at all, though @c(Path.Distance) uses @c(Point.Distance)
#    internally to compute the length of each segment that connects adjacent
#    points.
   Las dos metodos @c(Distancia) tienen diferentes tipos. No estan relacionados
   entre si en absoluto, aunque @c(Ruta.Distancia) utiliza a @c(Punto.Distancia)
   internamente para calcular la longitud de cada segmento que une los puntos
   adyacentes.

#    Let’s call the new method to compute the perimeter of a right triangle:
   Vamos a llamar al nuevo metodo para calcular el perimetro de un triangulo
   rectangulo:

#    ..cols >
   ..cols >

#      ..src > go
#        perim := Path{
#          {1, 1},
#          {5, 1},
#          {5, 4},
#          {1, 1},
#        }
#        fmt.Println(perim.Distance()) // "12"
#      < src..
     ..src > go
       perim := Ruta{
         {1, 1},
         {5, 1},
         {5, 4},
         {1, 1},
       }
       fmt.Println(perim.Distancia()) // "12"
     < src..

#      ::
     ::

#      ..img > img/perim.Distance.jpg
     ..img > img/perim.Distance.jpg


#    In the two calls above to methods named @c(Distance), the compiler determines
#    which function to call based on both the method name and the type of the
#    receiver. In the first, @c(path[i-1]) has type @c(Point) so
#    @c(Point.Distance) is called; in the second, @c(perim) has type @c(Path), so
#    @c(Path.Distance) is called.
   En las dos llamadas anterior a metodos con nombre @c(Distancia), el
   compilador determina que funcion debe llamar basandose tanto en el nombre del
   metodo y el tipo de receptor. En el primero, @c(ruta[i-1]) tiene tipo
   @c(Punto), asi que se llama a @c(Punto.Distancia); en el segundo, @c(perim)
   tiene el tipo Ruta, por lo que se llama a @c(Ruta.Distancia).

#    All methods of a given type must have unique names, but different types can
#    use the same name for a method, like the @c(Distance) methods for @c(Point)
#    and @c(Path); there’s no need to qualify function names (for example,
#    @c(PathDistance)) to disambiguate. Here we see the first benefit to using
#    methods over ordinary functions: method names can be shorter. The benefit is
#    magnified for calls originating outside the package, since they can use the
#    shorter name @e(and) omit the package name:
   Todos los metodos de un tipo dado deben tener nombres unicos, pero diferentes
   tipos pueden utilizar el mismo nombre para un metodo, al igual que los
   metodos @c(Distancia) para @c(Punto) y @c(Ruta); no hay necesidad de
   calificar los nombres de funcion (por ejemplo, @c(RutaDistancia)) para
   eliminar la ambigüedad. Aqui vemos el primer beneficio al usar metodos sobre
   funciones ordinarias: los nombres de metodos pueden ser mas cortos. El
   beneficio se magnifica para las llamadas que se originan fuera del paquete,
   ya que pueden utilizar el nombre mas corto y omitir el nombre del paquete:

#    ..src > go
#      import "gopl.io/ch6/geometry"
#
#      perim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}
#      fmt.Println(geometry.PathDistance(perim)) // "12", standalone function
#      fmt.Println(perim.Distance())             // "12", method of geometry.Path
#    < src..
   ..src > go
     import "gopl.io/ch6/geometry"

     perim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}
     fmt.Println(geometry.PathDistance(perim)) // "12", funcion independiente
     fmt.Println(perim.Distance())             // "12", metodo de geometry.Path
   < src..

# ** Section 6.2 <> Methods with a Pointer Receiver
** Seccion 6.2 <> Metodos con un Receptor de Puntero

#    Because calling a function makes a copy of each argument value, if a function
#    needs to update a variable, or if an argument is so large that we wish to
#    avoid copying it, we must pass the address of the variable using a
#    pointer. The same goes for methods that need to update the receiver variable:
#    we attach them to the pointer type, such as @c(*Point).
   Ya que llamar a una funcion crea una copia de cada valor de argumento, si una
   funcion necesita actualizar una variable, o si un argumento es tan grande que
   queremos evitar copiarlo, debemos pasar la direccion de la variable usando un
   puntero. Lo mismo ocurre con los metodos que necesitan actualizar la variable
   del receptor: los adjudicamos al tipo como puntero, como @c(*Point).

#    ..src > go
#      func (p *Point) ScaleBy(factor float64) {
#        p.X *= factor
#        p.Y *= factor
#      }
#    < src..
   ..src > go
     func (p *Point) ScaleBy(factor float64) {
       p.X *= factor
       p.Y *= factor
     }
   < src..

#    The name of this method is @c[(*Point).ScaleBy]. The parentheses are
#    necessary ; without them, the expression would be parsed as
#    @c[*(Point.ScaleBy)].
   El nombre de este metodo es @c[(*Point).ScaleBy]. Los parentesis son necesarios;
   sin ellos, la expresion se analiza como @c[*(Point.ScaleBy)].

#    In a realistic program, convention dictates that if any method of @c(Point)
#    has a pointer receiver, then @e(all) methods of @c(Point) should have a
#    pointer receiver, even ones that don’t strictly need it.  We’ve broken this
#    rule for @c(Point) so that we can show both kinds of method.
   En un programa realista, la convencion dicta que si cualquier metodo de
   @c(Point) tiene un receptor puntero, entonces todos los metodos de @c(Point)
   deben tener un receptor puntero, incluso los que no lo necesitan
   estrictamente. Hemos roto esta regla para @c(Point) de modo que podamos
   mostrar ambos tipos de metodo.

#    Named types (@c(Point)) and pointers to them @c[(*Point)] are the only types
#    that may appear in a receiver declaration. Furthermore, to avoid ambiguities,
#    method declarations are not permitted on named types that are themselves
#    pointer types:
   Tipos con nombre (@c(Point)) y punteros a ellos @c[(*Point)] son los unicos
   tipos que pueden aparecer en una declaracion receptor. Ademas, para evitar
   ambigüedades, las declaraciones de metodos no estan permitidas en tipos con
   nombre que son ellos mismos tipos de puntero:

#    ..src > go
#      type P *int
#      func (P) f() { /* ... */ } // compile error: invalid receiver type
#    < src..
   ..src > go
     type P *int
     func (P) f() { /* ... */ } // error de compilacion: tipo de receptor invalido
   < src..

#    The @c[(*Point).ScaleBy] method can be called by providing a @c(*Point)
#    receiver, like this:
   El metodo @c[(*Point).ScaleBy] se puede llamar al proporcionar un receptor
   @c(*Point), asi:

#    ..src > go
#      r := &Point{1, 2}
#      r.ScaleBy(2)
#      fmt.Println(*r) // "{2, 4}"
#    < src..
   ..src > go
     r := &Point{1, 2}
     r.ScaleBy(2)
     fmt.Println(*r) // "{2, 4}"
   < src..

#    or this:
   o asi:

#    ..src > go
#      p := Point{1, 2}
#      pptr := &p
#      pptr.ScaleBy(2)
#      fmt.Println(p) // "{2, 4}"
#    < src..
   ..src > go
     p := Point{1, 2}
     pptr := &p
     pptr.ScaleBy(2)
     fmt.Println(p) // "{2, 4}"
   < src..

#    or this:
   o asi:

#    ..src > go
#      p := Point{1, 2}
#      (&p).ScaleBy(2)
#      fmt.Println(p) // "{2, 4}"
#    < src..
   ..src > go
     p := Point{1, 2}
     (&p).ScaleBy(2)
     fmt.Println(p) // "{2, 4}"
   < src..

#    But the last two cases are ungainly. Fortunately, the language helps us
#    here. If the receiver @c(p) is a @e(variable) of type @c(Point) but the
#    method requires a @c(*Point) receiver, we can use this shorthand:
   Pero los dos ultimos casos son desagradables. Afortunadamente, el lenguaje
   nos ayuda aqui. Si el receptor @c(p) es una variable de tipo @c(Point), pero
   el metodo requiere un receptor @c(*Point), podemos emplear esta abreviatura:

#    ..src > go
#      p.ScaleBy(2)
#    < src..
   ..src > go
     p.ScaleBy(2)
   < src..

#    and the compiler will perform an implicit @c(&p) on the variable. This works
#    only for variables, including struct fields like @c(p.X) and array or slice
#    elements like @c(perim[0]). We cannot call a @c(*Point) method on a
#    non-addressable @c(Point) receiver, because there’s no way to obtain the
#    address of a temporary value.
   y el compilador realizara un @c(&p) implicito sobre la variable. Esto solo
   funciona para las variables, incluyendo los campos de la estructura como
   @c(p.X) y elementos de la arreglo o slice como @c(perim[0]). No podemos
   llamar a un metodo @c(*Point) en un receptor @c(Point) no direccionable,
   porque no hay manera de obtener la direccion de un valor temporal.

#    ..src > go
#      Point{1, 2}.ScaleBy(2) // compile error: can't take address of Point literal
#    < src..
   ..src > go
     Point{1, 2}.ScaleBy(2) // compile error: can't take address of Point literal
   < src..

#    But we @e(can) call a @c(Point) method like @c(Point.Distance) with a
#    @c(*Point) receiver, because there is a way to obtain the value from the
#    address: just load the value pointed to by the receiver. The compiler inserts
#    an implicit @c(*) operation for us. These two function calls are equivalent:
   Sin embargo, podemos llamar a un metodo @c(Point) como @c(Point.Distance) con
   un receptor @c(*Point), porque hay una manera de obtener el valor de la
   direccion: solo tiene que cargar el valor apuntado por el receptor. El
   compilador inserta una operacion @c(*) implicita por nosotros. Estas dos
   llamadas de funcion son equivalentes:

#    ..src > go
#      pptr.Distance(q)
#      (*pptr).Distance(q)
#    < src..
   ..src > go
     pptr.Distance(q)
     (*pptr).Distance(q)
   < src..

#    Let’s summarize these three cases again, since they are a frequent point of
#    confusion. In every valid method call expression, exactly one of these three
#    statements is true.
   Vamos a resumir estos tres casos de nuevo, ya que son un punto frecuente de
   confusion. En cada expresion de llamada de metodo valida, exactamente una de
   estas tres sentencias es verdadera.

#    Either the receiver argument has the same type as the receiver parameter, for
#    example both have type @c(T) or both have type @c(*T):
   O bien el argumento receptor tiene el mismo tipo que el parametro del
   receptor, por ejemplo ambos tienen tipo @c(T) o ambos tienen tipo @c(*T):

#    ..src > go
#      Point{1, 2}.Distance(q) //  Point
#      pptr.ScaleBy(2)         // *Point
#    < src..
   ..src > go
     Point{1, 2}.Distance(q) //  Point
     pptr.ScaleBy(2)         // *Point
   < src..

#    Or the receiver argument is a @e(variable) of type @c(T) and the receiver
#    parameter has type @c(*T). The compiler implicitly takes the address of the
#    variable:
   O el argumento de receptor es una variable de tipo @c(T) y el parametro receptor
   tiene tipo @c(*T). El compilador toma implicitamente la direccion de la
   variable:

#    ..src > go
#      p.ScaleBy(2) // implicit (&p)
#    < src..
   ..src > go
     p.ScaleBy(2) // implicit (&p)
   < src..

#    Or the receiver argument has type @c(*T) and the receiver parameter has type
#    @c(T). The compiler implicitly dereferences the receiver, in other words,
#    loads the value:
   O el argumento receptor tiene tipo @c(*T) y el parametro receptor tiene tipo
   @c(T). El compilador dereferencia implicitamente al receptor, en otras
   palabras, carga el valor:

#    ..src > go
#      pptr.Distance(q) // implicit (*pptr)
#    < src..
   ..src > go
     pptr.Distance(q) // implicit (*pptr)
   < src..

#    If all the methods of a named type @c(T) have a receiver type of @c(T) itself
#    (not @c(*T)), it is safe to copy instances of that type; calling any of its
#    methods necessarily makes a copy. For example, @c(time.Duration) values are
#    liberally copied, including as arguments to functions. But if any method has
#    a pointer receiver, you should avoid copying instances of @c(T) because doing
#    so may violate internal invariants. For example, copying an instance of
#    @c(bytes.Buffer) would cause the original and the copy to alias (@l(#Section
#    2.3.2<>§2.3.2)) the same underlying array of bytes. Subsequent method calls
#    would have unpredictable effects.
   Si todos los metodos de un tipo con nombre @c(T) tienen un tipo de receptor
   @c(T) en si (no @c(*T)), es seguro copiar las instancias de ese tipo; Llamar
   a cualquiera de sus metodos necesariamente hace una copia. Por ejemplo, los
   valores @c(time.Duration) se copian liberalmente, incluyendo como argumentos
   a las funciones. Pero si cualquier metodo tiene un receptor de puntero, se
   debe evitar copiar instancas de @c(T), ya que hacerlo puede violar
   invariantes internos. Por ejemplo, copiar una instancia de @c(bytes.Buffer)
   haria que el original y la copia como alias (@l(#Seccion 2.3.2<>§2.3.2))
   tubieran el mismo arreglo subyacente de bytes. Las llamadas de metodo
   subsiguientes tendrian efectos impredecibles.

# *** Section 6.2.1 <> Nil Is a Valid Receiver Value
*** Seccion 6.2.1 <> Nil es un Valor de Receptor Valido

#     Just as some functions allow nil pointers as arguments, so do some methods
#     for their receiver, especially if @c(nil) is a meaningful zero value of the
#     type, as with maps and slices. In this simple linked list of integers,
#     @c(nil) represents the empty list:
    Al igual que algunas funciones permiten punteros nulos como argumentos,
    tambien lo hacen algunos metodos para su receptor, especialmente si @c(nil)
    es un valor cero significativo del tipo, al igual que con los mapas y los
    slices. En esta sencilla lista enlazada de numeros enteros, @c(nil)
    representa la lista vacia:

#     ..src > go
#       // An IntList is a linked list of integers.
#       // A nil *IntList represents the empty list.
#       type IntList struct {
#         Value int
#         Tail *IntList
#       }
#
#       // Sum returns the sum of the list elements.
#       func (list *IntList) Sum() int {
#         if list == nil {
#           return 0
#         }
#         return list.Value + list.Tail.Sum()
#       }
#     < src..
    ..src > go
      // Un IntList es una lista enlazada de enteros.
      // Un nil *IntList representa la lista vacia.
      type IntList struct {
        Value int
        Tail *IntList
      }

      // Sum regresa la suma de la lista de elementos.
      func (list *IntList) Sum() int {
        if list == nil {
          return 0
        }
        return list.Value + list.Tail.Sum()
      }
    < src..

#     When you define a type whose methods allow @c(nil) as a receiver value, it’s
#     worth pointing this out explicitly in its documentation comment, as we did
#     above.
    Cuando se define un tipo cuyos metodos permiten @c(nil) como valor receptor,
    vale la pena señalar esto explicitamente en su comentario de documentacion,
    como lo hicimos arriba.

#     Here’s part of the definition of the @c(Values) type from the @c(net/url)
#     package:
    Aqui esta parte de la definicion del tipo @c(Values) del paquete @c(net/url):

#     ..figure > @c(net/url)
    ..figure > @c(net/url)

#       ..src > go
#         package url
#
#         // Values maps a string key to a list of values.
#         type Values map[string][]string
#
#         // Get returns the first value associated with the given key,
#         // or "" if there are none.
#         func (v Values) Get(key string) string {
#           if vs := v[key]; len(vs) > 0 {
#             return vs[0]
#           }
#           return ""
#         }
#
#         // Add adds the value to key.
#         // It appends to any existing values associated with key.
#         func (v Values) Add(key, value string) {
#           v[key] = append(v[key], value)
#         }
#       < src..
      ..src > go
        package url

        // Values map asigna clave de cadena a una lista de valores.
        type Values map[string][]string

        // Get devuelve el primer valor asociado con la clave dada,
        // o "" si no hay nada.
        func (v Values) Get(key string) string {
          if vs := v[key]; len(vs) > 0 {
            return vs[0]
          }
          return ""
        }

        // Add agrega el valor a la clave.
        // Se añade a cualquier valor existente asociado con la clave.
        func (v Values) Add(key, value string) {
          v[key] = append(v[key], value)
        }
      < src..


#     It exposes its representation as a map but also provides methods to simplify
#     access to the map, whose values are slices of strings—it’s a @e(multimap).
#     Its clients can use its intrinsic operators (@c(make), slice literals,
#     @c(m[key]), and so on), or its methods, or both, as they prefer:
    Expone su representacion como un mapa, pero tambien proporciona metodos para
    simplificar el acceso al mapa, cuyos valores son slices de cadenas–es un
    @e(mapa multiple). Sus clientes pueden utilizar sus operadores intrinsecos
    (@c(make), slice literales, @c(m[key]), etc.), o sus metodos, o ambos, como
    prefiera:

#     ..figure > @l(gopl.io/ch6/urlvalues/main.go<>gopl.io/ch6/urlvalues)
    ..figure > @l(gopl.io/ch6/urlvalues/main.go<>gopl.io/ch6/urlvalues)

#       ..src > go
#         m := url.Values{"lang": {"en"}} // direct construction
#         m.Add("item", "1")
#         m.Add("item", "2")
#
#         fmt.Println(m.Get("lang")) // "en"
#         fmt.Println(m.Get("q"))    // ""
#         fmt.Println(m.Get("item")) // "1"      (first value)
#         fmt.Println(m["item"])     // "[1 2]"  (direct map access)
#
#         m = nil
#         fmt.Println(m.Get("item")) // ""
#         m.Add("item", "3")         // panic: assignment to entry in nil map
#       < src..
      ..src > go
        m := url.Values{"lang": {"en"}} // construccion directa
        m.Add("item", "1")
        m.Add("item", "2")

        fmt.Println(m.Get("lang")) // "en"
        fmt.Println(m.Get("q"))    // ""
        fmt.Println(m.Get("item")) // "1"      (primer valor)
        fmt.Println(m["item"])     // "[1 2]"  (acceso directo al mapa)

        m = nil
        fmt.Println(m.Get("item")) // ""
        m.Add("item", "3")         // panico: asignacion a ingresar en un mapa nil
      < src..


#     In the final call to @c(Get), the @c(nil) receiver behaves like an empty map. We
#     could equivalently have written it as @c[Values(nil).Get("item"))], but
#     @c[nil.Get("item")] will not compile because the type of @c(nil) has not
#     been determined. By contrast, the final call to @c(Add) panics as it tries
#     to update a nil map.
    En la llamada final a @c(Get), el receptor @c(nil) se comporta como un mapa
    vacio. Podriamos haberlo escrito como @c[Values(nil).Get("item")], pero
    @c[nil.Get("item")] no se compilara porque el tipo @c(nil) no se ha
    determinado. Por el contrario, la llamada final a @c(Add) proboca un panico,
    ya que trata de actualizar un mapa nil.

#     Because @c(url.Values) is a map type and a map refers to its key/value pairs
#     indirectly, any updates and deletions that @c(url.Values.Add) makes to the
#     map elements are visible to the caller. However, as with ordinary functions,
#     any changes a method makes to the reference itself, like setting it to
#     @c(nil) or making it refer to a different map data structure, will not be
#     reflected in the caller.
    Debido a que @c(url.Values) es un tipo de mapa y un mapa se refiere a sus
    pares clave/valor indirectamente, las actualizaciones y supresiones que
    @c(url.Values.Add) hace a los elementos del mapa son visibles para el
    llamador. Sin embargo, al igual que con las funciones ordinarias, los
    cambios que un metodo hace a la propia referencia, como establecerlo en
    @c(nil) o hacer que se refiera a una estructura de mapa de datos diferente,
    no se reflejaran en el llamador.

# ** Section 6.3 <> Composing Types by Struct Embedding
** Seccion 6.3 <> Composicion de Tipos por Estructuras Enbebidas

#    Consider the type @c(ColoredPoint):
   Considere el tipo @c(ColoredPoint):

#    ..figure > @l(gopl.io/ch6/coloredpoint/main.go<>gopl.io/ch6/coloredpoint)
   ..figure > @l(gopl.io/ch6/coloredpoint/main.go<>gopl.io/ch6/coloredpoint)

#      ..src > go
#        import "image/color"
#
#        type Point struct{ X, Y float64 }
#
#        type ColoredPoint struct {
#          Point
#          Color color.RGBA
#        }
#      < src..
     ..src > go
       import "image/color"

       type Point struct{ X, Y float64 }

       type ColoredPoint struct {
         Point
         Color color.RGBA
       }
     < src..


#    We could have defined @c(ColoredPoint) as a struct of three fields, but
#    instead we @e(embedded) a @c(Point) to provide the @c(X) and @c(Y) fields. As
#    we saw in @l(#Section 4.4.3), embedding lets us take a syntactic shortcut to
#    defining a @c(ColoredPoint) that contains all the fields of @c(Point), plus
#    some more. If we want, we can select the fields of @c(ColoredPoint) that were
#    contributed by the embedded @c(Point) without mentioning @c(Point):
   Podriamos haber definido @c(ColoredPoint) como una estructura de tres campos,
   pero en su lugar, @e(enbebimos) un @c(Point) para proporcionar los campos
   @c(X) e @c(Y). Como vimos en la @l(#Seccion 4.4.3), la incrustacion nos
   permite tomar un atajo sintactico para definir un tipo @c(ColoredPoint) que
   contiene todos los campos de @c(Point), ademas de un poco mas. Si queremos,
   podemos seleccionar los campos de @c(ColoredPoint) que fueron aportados por
   el @c(Point) embebido sin mencionar a @c(Point):

#    ..src > go
#      var cp ColoredPoint
#      cp.X = 1
#      fmt.Println(cp.Point.X) // "1"
#      cp.Point.Y = 2
#      fmt.Println(cp.Y)       // "2"
#    < src..
   ..src > go
     var cp ColoredPoint
     cp.X = 1
     fmt.Println(cp.Point.X) // "1"
     cp.Point.Y = 2
     fmt.Println(cp.Y)       // "2"
   < src..

#    A similar mechanism applies to the @e(methods) of @c(Point). We can call
#    methods of the embedded @c(Point) field using a receiver of type
#    @c(ColoredPoint), even though @c(ColoredPoint) has no declared methods:
   Un mecanismo similar se aplica a los @e(metodos) de @c(Point). Podemos llamar
   a los metodos del enbebido @c(Point) utilizando un receptor de tipo
   @c(ColoredPoint), a pesar de que @c(ColoredPoint) no tiene metodos
   declarados:

#    ..src > go
#      red := color.RGBA{255, 0, 0, 255}
#      blue := color.RGBA{0, 0, 255, 255}
#      var p = ColoredPoint{Point{1, 1}, red}
#      var q = ColoredPoint{Point{5, 4}, blue}
#      fmt.Println(p.Distance(q.Point)) // "5"
#      p.ScaleBy(2)
#      q.ScaleBy(2)
#      fmt.Println(p.Distance(q.Point)) // "10"
#    < src..
   ..src > go
     red := color.RGBA{255, 0, 0, 255}
     blue := color.RGBA{0, 0, 255, 255}
     var p = ColoredPoint{Point{1, 1}, red}
     var q = ColoredPoint{Point{5, 4}, blue}
     fmt.Println(p.Distance(q.Point)) // "5"
     p.ScaleBy(2)
     q.ScaleBy(2)
     fmt.Println(p.Distance(q.Point)) // "10"
   < src..

#    The methods of @c(Point) have been @e(promoted) to @c(ColoredPoint). In this
#    way, embedding allows complex types with many methods to be built up by the
#    @e(composition) of several fields, each providing a few methods.
   Los metodos de @c(Point) han sido @e(promovidos) a @c(ColoredPoint). De esta
   manera, la incrustacion permite tipos complejos con muchos metodos que se
   construiran por la composicion de varios campos, cada uno proporcionando unos
   pocos metodos.

#    Readers familiar with class-based object-oriented languages may be tempted to
#    view @c(Point) as a base class and @c(ColoredPoint) as a subclass or derived
#    class, or to interpret the relationship between these types as if a
#    @c(ColoredPoint) @"(is a) @c(Point). But that would be a mistake. Notice the
#    calls to @c(Distance) above. @c(Distance) has a parameter of type @c(Point),
#    and @c(q) is not a @c(Point), so although @c(q) does have an embedded field of
#    that type, we must explicitly select it. Attempting to pass @c(q) would be an
#    error:
   Los lectores familiarizados con lenguajes orientados a objetos basados en
   clases pueden ser tentados a ver @c(Point) como una clase base y
   @c(ColoredPoint) como una subclase o clase derivada, o a interpretar la
   relacion entre estos tipos como si @c(ColoredPoint) @"(es un) @c(Point). Pero
   eso seria un error. Observe las llamadas a @c(Distance) arriba. @c(Distance)
   tiene un parametro de tipo @c(Point), ya que @c(q) no es un @c(Point), asi
   que aunque @c(q) tiene un campo enbebido de ese tipo, debemos seleccionarlo
   explicitamente. Si intenta pasar @c(q) seria un error:

#    ..src > go
#      p.Distance(q) // compile error: cannot use q (ColoredPoint) as Point
#    < src..
   ..src > go
     p.Distance(q) // error de compilacion: no se puede utilizar q (ColoredPoint) como Point
   < src..

#    A @c(ColoredPoint) is not a @c(Point), but it @"(has a) @c(Point), and it has
#    two additional methods @c(Distance) and @c(ScaleBy) promoted from @c(Point).
#    If you prefer to think in terms of implementation, the embedded field
#    instructs the compiler to generate additional wrapper methods that delegate
#    to the declared methods, equivalent to these:
   Un @c(ColoredPoint) no es un @c(Point), pero @"(tiene un) @c(Point), y tiene
   dos metodos adicionales @c(Distance) y @c(ScaleBy) promocionados desde
   @c(Point). Si prefiere pensar en terminos de implementacion, el campo
   enbebido instruye al compilador a generar metodos de envoltura adicionales
   que delegan en los metodos declarados, equivalentes a los siguientes:

#    ..src > go
#      func (p ColoredPoint) Distance(q Point) float64 {
#        return p.Point.Distance(q)
#      }
#
#      func (p *ColoredPoint) ScaleBy(factor float64) {
#        p.Point.ScaleBy(factor)
#      }
#    < src..
   ..src > go
     func (p ColoredPoint) Distance(q Point) float64 {
       return p.Point.Distance(q)
     }

     func (p *ColoredPoint) ScaleBy(factor float64) {
       p.Point.ScaleBy(factor)
     }
   < src..

#    When @c(Point.Distance) is called by the first of these wrapper methods, its
#    receiver value is @c(p.Point), not @c(p), and there is no way for the method
#    to access the @c(ColoredPoint) in which the @c(Point) is embedded.
   Cuando @c(Point.Distance) es llamado por el primero de estos metodos de
   envoltura, su valor receptor es @c(p.Point), no @c(p), y no hay manera de que
   el metodo accededa a @c(ColoredPoint) en el que @c(Point) esta enbebido.

#    The type of an anonymous field may be a @e(pointer) to a named type, in which
#    case fields and methods are promoted indirectly from the pointed-to
#    object. Adding another level of indirection lets us share common structures
#    and vary the relationships between objects dynamically. The declaration of
#    @c(ColoredPoint) below embeds a @c(*Point):
   El tipo de un campo anonimo puede ser un @e(puntero) a un tipo con nombre, en
   cuyo caso los campos y metodos se promueven indirectamente del puntero al
   objeto. Agregar otro nivel de indireccion nos permite compartir estructuras
   comunes y variar las relaciones entre los objetos dinamicamente. La
   declaracion de @c(ColoredPoint) a continuacion incorpora un @c(*Point):

#    ..src > go
#      type ColoredPoint struct {
#        *Point
#        Color color.RGBA
#      }
#
#      p := ColoredPoint{&Point{1, 1}, red}
#      q := ColoredPoint{&Point{5, 4}, blue}
#      fmt.Println(p.Distance(*q.Point)) // "5"
#      q.Point = p.Point                 // p and q now share the same Point
#      p.ScaleBy(2)
#      fmt.Println(*p.Point, *q.Point)   // "{2 2} {2 2}"
#    < src..
   ..src > go
     type ColoredPoint struct {
       *Point
       Color color.RGBA
     }

     p := ColoredPoint{&Point{1, 1}, red}
     q := ColoredPoint{&Point{5, 4}, blue}
     fmt.Println(p.Distance(*q.Point)) // "5"
     q.Point = p.Point                 // ahora p y q comparten el mismo Point
     p.ScaleBy(2)
     fmt.Println(*p.Point, *q.Point)   // "{2 2} {2 2}"
   < src..

#    A struct type may have more than one anonymous field. Had we declared
#    @c(ColoredPoint) as
   Un tipo de estructura puede tener mas de un campo anonimo. Si hubieramos
   declarado @c(ColoredPoint) como

#    ..src > go
#      type ColoredPoint struct {
#        Point
#        color.RGBA
#      }
#    < src..
   ..src > go
     type ColoredPoint struct {
       Point
       color.RGBA
     }
   < src..

#    then a value of this type would have all the methods of @c(Point), all the
#    methods of @c(RGBA), and any additional methods declared on @c(ColoredPoint)
#    directly. When the compiler resolves a selector such as @c(p.ScaleBy) to a
#    method, it first looks for a directly declared method named @c(ScaleBy), then
#    for methods promoted once from @c(ColoredPoint)’s embedded fields, then for
#    methods promoted twice from embedded fields within @c(Point) and @c(RGBA),
#    and so on. The compiler reports an error if the selector was ambiguous
#    because two methods were promoted from the same rank.
   entonces un valor de este tipo tendria todos los metodos de @c(Point), todos
   los metodos de @c(RGBA), y cualesquiera otros metodos declarados en
   @c(ColoredPoint) directamente. Cuando el compilador resuelve un selector como
   @c(p.ScaleBy) a un metodo, primero se busca un metodo llamado directamente
   declarada @c(ScaleBy), luego, para los metodos promovidos de campos
   incrustados en @c(ColoredPoint), luego, para los metodos promovidos dos veces
   de campos incrustados dentro @c(Point) y @c(RGBA), y asi sucesivamente. El
   compilador informa de un error si el selector es ambiguo porque se
   promocionaron dos metodos desde el mismo rango.

#    Methods can be declared only on named types (like @c(Point)) and pointers to
#    them (@c[*Point]), but thanks to embedding, it’s possible and sometimes
#    useful for @e(unnamed) struct types to have methods too.
   Los metodos pueden ser declaradas solo en tipos con nombre (como @c(Point)) y
   punteros a ellos (@c(*Point)), pero gracias al embedido, es posible y, a
   veces util que los tipos de estructura @e(sin nombre) tambien tengan metodos.

#    Here’s a nice trick to illustrate. This example shows part of a simple cache
#    implemented using two package-level variables, a mutex (@l(#Section
#    9.2<>§9.2)) and the map that it guards:
   Aqui hay un buen truco para ilustrarlo. Este ejemplo muestra parte de una
   cache simple implementada usando dos variables a nivel de paquete, un mutex
   (@l(#Seccion 9.2<>§9.2)) y el mapa que lo protege:

#    ..src > go
#      var (
#        mu sync.Mutex // guards mapping
#        mapping = make(map[string]string)
#      )
#
#      func Lookup(key string) string {
#        mu.Lock()
#        v := mapping[key]
#        mu.Unlock()
#        return v
#      }
#    < src..
   ..src > go
     var (
       mu sync.Mutex // protege a mapping
       mapping = make(map[string]string)
     )

     func Lookup(key string) string {
       mu.Lock()
       v := mapping[key]
       mu.Unlock()
       return v
     }
   < src..

#    The version below is functionally equivalent but groups together the two
#    related variables in a single package-level variable, @c(cache):
   La version de abajo es funcionalmente equivalente pero agrupa a las dos
   variables relacionadas en una unica variable de nivel de paquete, @c(cache):

#    ..src > go
#      var cache = struct {
#        sync.Mutex
#        mapping map[string]string
#      } {
#        mapping: make(map[string]string),
#      }
#
#      func Lookup(key string) string {
#        cache.Lock()
#        v := cache.mapping[key]
#        cache.Unlock()
#        return v
#      }
#    < src..
   ..src > go
     var cache = struct {
       sync.Mutex
       mapping map[string]string
     } {
       mapping: make(map[string]string),
     }

     func Lookup(key string) string {
       cache.Lock()
       v := cache.mapping[key]
       cache.Unlock()
       return v
     }
   < src..

#    The new variable gives more expressive names to the variables related to the
#    cache, and because the @c(sync.Mutex) field is embedded within it, its
#    @c(Lock) and @c(Unlock) methods are promoted to the unnamed struct type,
#    allowing us to lock the @c(cache) with a self-explanatory syntax.
   La nueva variable da nombres mas expresivos a las variables relacionadas con
   la @c(cache), y debido a que el campo @c(sync.Mutex) esta enbebido dentro de
   ella, su metodos @c(Lock) y @c(Unlock) se promueven al tipo de estructura sin
   nombre, lo que nos permite bloquear la @c(cache) con una sintaxis auto
   explicativa.

# ** Section 6.4 <> Method Values and Expressions
** Seccion 6.4 <> Valores y Expresiones de los Metodos

#    Usually we select and call a method in the same expression, as in
#    @c[p.Distance()], but it’s possible to separate these two operations. The
#    selector @c(p.Distance) yields a @e(method value), a function that binds a
#    method (@c[Point.Distance]) to a specific receiver value @c(p). This function
#    can then be invoked without a receiver value; it needs only the non-receiver
#    arguments.
   Normalmente seleccionamos y llamamos a un metodo en la misma expresion, como
   en @c[p.Distance()], pero es posible separar estas dos operaciones. El
   selector @c(p.Distance) produce un @e(valor de metodo), una funcion une un
   metodo (@c[Point.Distance]) a un valor de receptor especifico @c(p). Esta
   funcion puede entonces ser invocada sin un valor de receptor; Solo necesita
   los argumentos del no receptor.

#    ..src > go
#      p := Point{1, 2}
#      q := Point{4, 6}
#
#      distanceFromP := p.Distance        // method value
#      fmt.Println(distanceFromP(q))      // "5"
#      var origin Point                   // {0, 0}
#      fmt.Println(distanceFromP(origin)) // "2.23606797749979", √5
#
#      scaleP := p.ScaleBy // method value
#      scaleP(2)           // p becomes (2, 4)
#      scaleP(3)           //      then (6, 12)
#      scaleP(10)          //      then (60, 120)
#    < src..
   ..src > go
     p := Point{1, 2}
     q := Point{4, 6}

     distanceFromP := p.Distance        // volor del metodo
     fmt.Println(distanceFromP(q))      // "5"
     var origin Point                   // {0, 0}
     fmt.Println(distanceFromP(origin)) // "2.23606797749979", √5

     scaleP := p.ScaleBy // valor del metodo
     scaleP(2)           // p se vuelve (2, 4)
     scaleP(3)           //       luego (6, 12)
     scaleP(10)          //       luego (60, 120)
   < src..

#    Method values are useful when a package’s API calls for a function value, and
#    the client’s desired behavior for that function is to call a method on a
#    specific receiver. For example, the function @c(time.AfterFunc) calls a
#    function value after a specified delay. This program uses it to launch the
#    rocket @c(r) after 10 seconds:
   Los valores de metodo son utiles cuando la API de un paquete solicita un
   valor de funcion y el comportamiento deseado del cliente para esa funcion es
   llamar a un metodo en un receptor especifico. Por ejemplo, la funcion
   @c(time.AfterFunc) llama a un valor de funcion despues de un retardo
   especificado. Este programa lo utiliza para lanzar el cohete @c(r) despues de
   10 segundos:

#    ..src > go
#      type Rocket struct { /* ... */ }
#      func (r *Rocket) Launch() { /* ... */ }
#
#      r := new(Rocket)
#      time.AfterFunc(10 * time.Second, func() { r.Launch() })
#    < src..
   ..src > go
     type Rocket struct { /* ... */ }
     func (r *Rocket) Launch() { /* ... */ }

     r := new(Rocket)
     time.AfterFunc(10 * time.Second, func() { r.Launch() })
   < src..

#    The method value syntax is shorter:
   La sintaxis del valor del metodo es mas corta:

#    ..src > go
#      time.AfterFunc(10 * time.Second, r.Launch)
#    < src..
   ..src > go
     time.AfterFunc(10 * time.Second, r.Launch)
   < src..

#    Related to the method value is the @e(method expression). When calling a
#    method, as opposed to an ordinary function, we must supply the receiver in a
#    special way using the selector syntax. A method expression, written @c(T.f)
#    or @c[(*T).f] where @c(T) is a type, yields a function value with a regular
#    first parameter taking the place of the receiver, so it can be called in the
#    usual way.
   En relacion con el valor del metodo es la @e(expresion del metodo). Al llamar
   a un metodo, a diferencia de una funcion ordinaria, debemos suministrar al
   receptor de una manera especial usando la sintaxis del selector. Una
   expresion de metodo, escrita @c(T.f) o @c[(*T).f] donde @c(T) es un tipo,
   produce un valor de funcion con un primer parametro tomando el lugar del
   receptor, por lo que puede ser llamado de la manera habitual.

#    ..src > go
#      p := Point{1, 2}
#      q := Point{4, 6}
#
#      distance := Point.Distance   // method expression
#      fmt.Println(distance(p, q))  // "5"
#      fmt.Printf("%T\n", distance) // "func(Point, Point) float64"
#
#      scale := (*Point).ScaleBy
#      scale(&p, 2)
#      fmt.Println(p)            // "{2 4}"
#      fmt.Printf("%T\n", scale) // "func(*Point, float64)"
#    < src..
   ..src > go
     p := Point{1, 2}
     q := Point{4, 6}

     distance := Point.Distance   // expresion del metodo
     fmt.Println(distance(p, q))  // "5"
     fmt.Printf("%T\n", distance) // "func(Point, Point) float64"

     scale := (*Point).ScaleBy
     scale(&p, 2)
     fmt.Println(p)            // "{2 4}"
     fmt.Printf("%T\n", scale) // "func(*Point, float64)"
   < src..

#    Method expressions can be helpful when you need a value to represent a choice
#    among several methods belonging to the same type so that you can call the
#    chosen method with many different receivers. In the following example, the
#    variable @c(op) represents either the addition or the subtraction method of
#    type @c(Point), and @c(Path.TranslateBy) calls it for each point in the
#    @c(Path):
   Las expresiones de metodo pueden ser utiles cuando se necesita un valor para
   representar una eleccion entre varios metodos pertenecientes al mismo tipo
   para que pueda llamar al metodo elegido con muchos receptores diferentes. En
   el siguiente ejemplo, la variable @c(op) representa el metodo de suma o resta
   del tipo @c(Point), y @c(Path.TranslateBy) lo llama para cada punto en
   @c(Path):

#    ..src > go
#      type Point struct{ X, Y float64 }
#
#      func (p Point) Add(q Point) Point { return Point{p.X + q.X, p.Y + q.Y} }
#      func (p Point) Sub(q Point) Point { return Point{p.X - q.X, p.Y - q.Y} }
#
#      type Path []Point
#
#      func (path Path) TranslateBy(offset Point, add bool) {
#        var op func(p, q Point) Point
#        if add {
#          op = Point.Add
#        } else {
#          op = Point.Sub
#        }
#        for i := range path {
#          // Call either path[i].Add(offset) or path[i].Sub(offset).
#          path[i] = op(path[i], offset)
#        }
#      }
#    < src..
   ..src > go
     type Point struct{ X, Y float64 }

     func (p Point) Add(q Point) Point { return Point{p.X + q.X, p.Y + q.Y} }
     func (p Point) Sub(q Point) Point { return Point{p.X - q.X, p.Y - q.Y} }

     type Path []Point

     func (path Path) TranslateBy(offset Point, add bool) {
       var op func(p, q Point) Point
       if add {
         op = Point.Add
       } else {
         op = Point.Sub
       }
       for i := range path {
         // llama en cada path[i].Add(offset) o path[i].Sub(offset).
         path[i] = op(path[i], offset)
       }
     }
   < src..

# ** Section 6.5 <> Example: Bit Vector Type
** Seccion 6.5 <> Ejemplo: Tipo de Vector de Bits

#    Sets in Go are usually implemented as a @c(map[T]bool), where @c(T) is the
#    element type. A set represented by a map is very flexible but, for certain
#    problems, a specialized representation may outperform it. For example, in
#    domains such as dataflow analysis where set elements are small non-negative
#    integers, sets have many elements, and set operations like union and
#    intersection are common, a @e(bit vector) is ideal.
   Los conjuntos en Go se implementan generalmente como un @c(map[T]bool), donde
   @c(T) es el tipo del elemento. Un conjunto representado por un mapa es muy
   flexible pero, para ciertos problemas, una representacion especializada puede
   superarla. Por ejemplo, en dominios tales como el analisis de flujo de datos
   donde los elementos del conjunto son pequeños numeros enteros no negativos,
   los conjuntos tienen muchos elementos, y las operaciones de conjunto como
   union e interseccion son comunes, un vector de bits es ideal.

#    A bit vector uses a slice of unsigned integer values or @"(words,) each bit
#    of which represents a possible element of the set. The set contains @m(i) if
#    the @m(i)-th bit is set. The following program demonstrates a simple bit
#    vector type with three methods:
   Un vector de bits utiliza una slice de valores o @"(palabras) de enteros sin
   signo, cada bit de los cuales representa un posible elemento del conjunto. El
   conjunto contiene @c(i) si se establece el enesimo bit. El siguiente programa
   muestra un tipo de vector de bits simple con tres metodos:

#    ..figure > @l(gopl.io/ch6/intset/intset.go<>gopl.io/ch6/intset)
   ..figure > @l(gopl.io/ch6/intset/intset.go<>gopl.io/ch6/intset)

#      ..src > go
#        // An IntSet is a set of small non-negative integers.
#        // Its zero value represents the empty set.
#        type IntSet struct {
#          words []uint64
#        }
#
#        // Has reports whether the set contains the non-negative value x.
#        func (s *IntSet) Has(x int) bool {
#          word, bit := x/64, uint(x%64)
#          return word < len(s.words) && s.words[word]&(1<<bit) != 0
#        }
#
#        // Add adds the non-negative value x to the set.
#        func (s *IntSet) Add(x int) {
#          word, bit := x/64, uint(x%64)
#          for word >= len(s.words) {
#            s.words = append(s.words, 0)
#          }
#          s.words[word] |= 1 << bit
#        }
#
#        // UnionWith sets s to the union of s and t.
#        func (s *IntSet) UnionWith(t *IntSet) {
#          for i, tword := range t.words {
#            if i < len(s.words) {
#              s.words[i] |= tword
#            } else {
#              s.words = append(s.words, tword)
#            }
#          }
#        }
#      < src..
     ..src > go
       // un IntSet es us conjunto pequeño de enteros no negativos.
       // El valor cero representa un conjunto vacio.
       type IntSet struct {
         words []uint64
       }

       // Has Informa cuando el conjunto contiene valores x no negativos.
       func (s *IntSet) Has(x int) bool {
         word, bit := x/64, uint(x%64)
         return word < len(s.words) && s.words[word]&(1<<bit) != 0
       }

       // Add agrega el valor x no negativo al conjunto.
       func (s *IntSet) Add(x int) {
         word, bit := x/64, uint(x%64)
         for word >= len(s.words) {
           s.words = append(s.words, 0)
         }
         s.words[word] |= 1 << bit
       }

       // UnionWith establece s a la union de s y t.
       func (s *IntSet) UnionWith(t *IntSet) {
         for i, tword := range t.words {
           if i < len(s.words) {
             s.words[i] |= tword
           } else {
             s.words = append(s.words, tword)
           }
         }
       }
     < src..


#    Since each word has 64 bits, to locate the bit for @c(x), we use the quotient
#    @c(x/64) as the word index and the remainder @c(x%64) as the bit index within
#    that word. The @c(UnionWith) operation uses the bitwise OR operator @c(|) to
#    compute the union 64 elements at a time. (We’ll revisit the choice of 64-bit
#    words in Exercise 6.5.)
   Ya que cada palabra tiene 64 bits, para localizar el bit para @c(x), se
   utiliza el cociente @c(x/64) como el indice de la palabra y el resto @c(x%64)
   como el indice de bit dentro de esa palabra. La operacion @c(UnionWith)
   utiliza el operador binario OR @c(|) Para calcular la union de 64 elementos a
   la vez. (Vamos a revisar la eleccion de palabras de 64 bits en el Ejercicio
   6.5.)

#    This implementation lacks many desirable features, some of which are posed as
#    exercises below, but one is hard to live without: way to print an @c(IntSet)
#    as a string. Let’s give it a @c(String) method as we did with @c(Celsius) in
#    @l(#Section 2.5):
   Esta aplicacion carece de muchas caracteristicas deseables, algunas de las
   cuales se plantean como ejercicios, pero es dificil vivir sin : una forma de
   imprimir un @c(IntSet) como una cadena. Vamos a darle una String metodo como
   lo hicimos con @c(Celsius) en la @l(#Seccion 2.5):

#    ..src > go
#      // String returns the set as a string of the form "{1 2 3}".
#      func (s *IntSet) String() string {
#        var buf bytes.Buffer
#        buf.WriteByte('{')
#        for i, word := range s.words {
#          if word == 0 {
#            continue
#          }
#          for j := 0; j < 64; j++ {
#            if word&(1<<uint(j)) != 0 {
#              if buf.Len() > len("{") {
#                buf.WriteByte(' ')
#              }
#              fmt.Fprintf(&buf, "%d", 64*i+j)
#            }
#          }
#        }
#        buf.WriteByte('}')
#        return buf.String()
#      }
#    < src..
   ..src > go
     // String regresa el conjunto como una cadena de la forma "{1 2 3}".
     func (s *IntSet) String() string {
       var buf bytes.Buffer
       buf.WriteByte('{')
       for i, word := range s.words {
         if word == 0 {
           continue
         }
         for j := 0; j < 64; j++ {
           if word&(1<<uint(j)) != 0 {
             if buf.Len() > len("{") {
               buf.WriteByte(' ')
             }
             fmt.Fprintf(&buf, "%d", 64*i+j)
           }
         }
       }
       buf.WriteByte('}')
       return buf.String()
     }
   < src..

#    Notice the similarity of the @c(String) method above with @c(intsToString) in
#    @l(#Section 3.5.4); @c(bytes.Buffer) is often used this way in @c(String)
#    methods. The @c(fmt) package treats types with a @c(String) method specially
#    so that values of complicated types can display themselves in a userfriendly
#    manner. Instead of printing the raw representation of the value (a struct in
#    this case), @c(fmt) calls the @c(String) method. The mechanism relies on
#    interfaces and type assertions, which we’ll explain in @l(#Chapter 7).
   Note la similitud del metodo anterior @c(String) con @c(intsToString) en la
   @l(#Seccion 3.5.4); @c(bytes.Buffer) se utiliza a menudo de esta manera en
   metodos @c(String). El paquete @c(fmt) maneja tipos con un metodo @c(String)
   especialmente para que los valores de los tipos complicados se puedan mostrar
   de una manera amigable para el usuario. En lugar de imprimir la
   representacion del valor en bruto (una estructura en este caso), @c(fmt)
   llama al metodo @c(String). El mecanismo se basa en interfaces y tipo de
   afirmaciones, que vamos a explicar en el @l(#Capitulo 7).

#    We can now demonstrate @c(IntSet) in action:
   Ahora podemos demostrar @c(IntSet) en accion:

#    ..src > go
#      var x, y IntSet
#      x.Add(1)
#      x.Add(144)
#      x.Add(9)
#      fmt.Println(x.String()) // "{1 9 144}"
#
#      y.Add(9)
#      y.Add(42)
#      fmt.Println(y.String()) // "{9 42}"
#
#      x.UnionWith(&y)
#      fmt.Println(x.String()) // "{1 9 42 144}"
#
#      fmt.Println(x.Has(9), x.Has(123)) // "true false"
#    < src..
   ..src > go
     var x, y IntSet
     x.Add(1)
     x.Add(144)
     x.Add(9)
     fmt.Println(x.String()) // "{1 9 144}"

     y.Add(9)
     y.Add(42)
     fmt.Println(y.String()) // "{9 42}"

     x.UnionWith(&y)
     fmt.Println(x.String()) // "{1 9 42 144}"

     fmt.Println(x.Has(9), x.Has(123)) // "true false"
   < src..

#    A word of caution: we declared @c(String) and @c(Has) as methods of the
#    pointer type @c(*IntSet) not out of necessity, but for consistency with the
#    other two methods, which need a pointer receiver because they assign to
#    @c(s.words). Consequently, an @c(IntSet) @e(value) does not have a @c(String)
#    method, occasionally leading to surprises like this:
   Una palabra de precaucion: declaramos @c(String) y @c(Has) como metodos del
   tipo de puntero @c(*IntSet) no por necesidad, sino por coherencia con los
   otros dos metodos, los cuales necesitan un receptor puntero porque asignan a
   @c(s.words). En consecuencia, un valor @c(IntSet) no tiene una metodo
   @c(String), en ocasiones, conduce a sorpresas como esta:

#    ..src > go
#      fmt.Println(&x)         // "{1 9 42 144}"
#      fmt.Println(x.String()) // "{1 9 42 144}"
#      fmt.Println(x)          // "{[4398046511618 0 65536]}"
#    < src..
   ..src > go
     fmt.Println(&x)         // "{1 9 42 144}"
     fmt.Println(x.String()) // "{1 9 42 144}"
     fmt.Println(x)          // "{[4398046511618 0 65536]}"
   < src..

#    In the first case, we print an @c(*IntSet) pointer, which does have a
#    @c(String) method. In the second case, we call @c[String()] on an @c(IntSet)
#    variable; the compiler inserts the implicit @c(&) operation, giving us a
#    pointer, which has the @c(String) method. But in the third case, because the
#    @c(IntSet) value does not have a @c(String) method, @c(fmt.Println) prints
#    the representation of the struct instead. It’s important not to forget the
#    @c(&) operator. Making @c(String) a method of @c(IntSet), not @c(*IntSet),
#    might be a good idea, but this is a case-by-case judgment.
   En el primer caso, Imprimimos un puntero @c(*IntSet), que tiene un metodo
   @c(String). En el segundo caso, que llamamos a @c[String()] en una variable
   @c(IntSet); el compilador inserta la operacion @c(&) implicita, que nos da un
   puntero, que tiene el metodo @c(String). Sin embargo, en el tercer caso,
   debido a que el valor @c(IntSet) no tiene un metodo @c(String), fmt.Println
   imprime la representacion de la estructura en su lugar. Es importante no
   olvidar el operador @c(&). Hacer @c(String) un metodo de @c(IntSet), no
   @c(*IntSet), podria ser una buena idea, pero esto es un juicio caso por caso.

#    @b(Exercise 6.1): Implement these additional methods:
   @b(Ejercicio 6.1): Implementar estos metodos adicionales:

#    ..src > go
#      func (*IntSet) Len() int      // return the number of elements
#      func (*IntSet) Remove(x int)  // remove x from the set
#      func (*IntSet) Clear()        // remove all elements from the set
#      func (*IntSet) Copy() *IntSet // return a copy of the set
#    < src..
   ..src > go
     func (*IntSet) Len() int      // regresa el numero de elementos
     func (*IntSet) Remove(x int)  // elimina x del conjunto
     func (*IntSet) Clear()        // elimina todos los elementos del conjunto
     func (*IntSet) Copy() *IntSet // regresa una copia del conjunto
   < src..

#    @b(Exercise 6.2): Define a variadic @c[(*IntSet).AddAll(...int)] method that
#    allows a list of values to be added, such as @c[s.AddAll(1, 2, 3)].
   @b(Ejercicio 6.2): Definir una metodo variadic @c[(*IntSet).AddAll(...int)]
   que permita añadir una lista de valores, como @c[s.AddAll(1, 2, 3)].

#    @b(Exercise 6.3): @c[(*IntSet).UnionWith] computes the union of two sets
#    using @c(|), the word-parallel bitwise OR operator. Implement methods for
#    @c(IntersectWith), @c(DifferenceWith), and @c(SymmetricDifference) for the
#    corresponding set operations. (The symmetric difference of two sets contains
#    the elements present in one set or the other but not both.)
   @b(Ejercicio 6.3): @c[(*IntSet).UnionWith] calcula la union de dos conjuntos
   utilizando @c(|), el operador OR binario. Implementar metodos para
   @c(IntersectWith), @c(DifferenceWith), y @c(SymmetricDifference) para las
   operaciones de conjuntos correspondientes. (La diferencia simetrica de dos
   conjuntos contiene los elementos presentes en un conjunto o el otro, pero no
   ambos.)

#    @b(Exercise 6.4): Add a method @c(Elems) that returns a slice containing the
#    elements of the set, suitable for iterating over with a @c(range) loop.
   @b(Ejercicio 6.4): añadir un metodo @c(Elems) que devuelve una slice que
   contiene los elementos del conjunto, apto para iterar sobre el con una bucle
   @c(range).

#    @b(Exercise 6.5): The type of each word used by @c(IntSet) is @c(uint64), but
#    64-bit arithmetic may be inefficient on a 32-bit platform. Modify the program
#    to use the @c(uint) type, which is the most efficient unsigned integer type
#    for the platform. Instead of dividing by 64, define a constant holding the
#    effective size of @c(uint) in bits, 32 or 64. You can use the perhaps
#    too-clever expression @c[32 << (^uint(0) >> 63)] for this purpose.
   @b(Ejercicio 6.5): El tipo de cada palabra usada por @c(IntSet) es
   @c(uint64), pero la aritmetica de 64 bits puede ser ineficiente en una
   plataforma de 32 bits. Modificar el programa para usar el tipo @c(uint), que
   es el tipo entero sin signo mas eficiente para la plataforma. En lugar de
   dividir por 64, definir una constante que almacene el tamaño efectivo de
   @c(uint) en bits, 32 o 64. Se puede utilizar la expresion tal vez demasiado
   inteligente @c[32 << (^uint(0) >> 63)] para este proposito.

# ** Section 6.6 <> Encapsulation
** Seccion 6.6 <> Encapsulacion

#    A variable or method of an object is said to be @e(encapsulated) if it is
#    inaccessible to clients of the object. Encapsulation, sometimes called
#    @e(information hiding), is a key aspect of object-oriented programming.
   Se dice que una variable o metodo de un objeto esta encapsulado si es
   inaccesible para los clientes del objeto. La encapsulacion, a veces llamado
   ocultacion de la informacion, es un aspecto clave de la programacion
   orientada a objetos.

#    Go has only one mechanism to control the visibility of names: capitalized
#    identifiers are exported from the package in which they are defined, and
#    uncapitalized names are not. The same mechanism that limits access to members
#    of a package also limits access to the fields of a struct or the methods of a
#    type. As a consequence, to encapsulate an object, we must make it a struct.
   Go solo tiene un mecanismo para controlar la visibilidad de los nombres: los
   identificadores en mayusculas se exportan desde el paquete en el que estan
   definidos y los nombres no capitalizados no. El mismo mecanismo que limita el
   acceso a los miembros de un paquete tambien limita el acceso a los campos de
   una estructura o los metodos de un tipo. Como consecuencia, para encapsular
   un objeto, debemos hacer que sea una estructura.

#    That’s the reason the @c(IntSet) type from the previous section was declared as a
#    struct type even though it has only a single field:
   Esa es la razon por la que el tipo @c(IntSet) de la seccion anterior fue
   declarado como un tipo de estructura a pesar de que solo tiene un unico
   campo:

#    ..src > go
#      type IntSet struct {
#        words []uint64
#      }
#    < src..
   ..src > go
     type IntSet struct {
       words []uint64
     }
   < src..

#    We could instead define @c(IntSet) as a slice type as follows, though of
#    course we’d have to replace each occurrence of @c(s.words) by @c(*s) in its
#    methods:
   En cambio podriamos definir @c(IntSet) como un tipo de slice de la siguiente
   manera, aunque por supuesto tendriamos que sustituir cada ocurrencia de
   @c(s.words) por @c(*s) en sus metodos:

#    ..src > go
#      type IntSet []uint64
#    < src..
   ..src > go
     type IntSet []uint64
   < src..

#    Although this version of @c(IntSet) would be essentially equivalent, it would
#    allow clients from other packages to read and modify the slice directly. Put
#    another way, whereas the expression @c(*s) could be used in any package,
#    @c(s.words) may appear only in the package that defines @c(IntSet).
   Aunque esta version de @c(IntSet) esencialmente seria equivalente, permitiria
   a clientes de otros paquetes leer y modificar el slice directamente. Dicho de
   otra manera, mientras que la expresion @c(*s) se podrian utilizar en
   cualquier paquete, @c(s.words) solo puede aparecer en el paquete que define
   @c(IntSet).

#    Another consequence of this name-based mechanism is that the unit of
#    encapsulation is the package, not the type as in many other languages. The
#    fields of a struct type are visible to all code within the same
#    package. Whether the code appears in a function or a method makes no
#    difference.
   Otra consecuencia de este mecanismo basado en el nombre es que la unidad de
   encapsulacion es el paquete, no el tipo como en muchos otros lenguajes. Los
   campos de un tipo de estructura son visibles para todo el codigo dentro del
   mismo paquete. Si el codigo aparece en una funcion o un metodo no hace
   ninguna diferencia.

#    Encapsulation provides three benefits. First, because clients cannot directly
#    modify the object’s variables, one need inspect fewer statements to
#    understand the possible values of those variables.
   La encapsulacion proporciona tres beneficios. En primer lugar, debido a que
   los clientes no pueden modificar directamente las variables del objeto, es
   necesario inspeccionar menos enunciados para comprender los valores posibles
   de esas variables.

#    Second, hiding implementation details prevents clients from depending on
#    things that might change, which gives the designer greater freedom to evolve
#    the implementation without breaking API compatibility.
   En segundo lugar, ocultar los detalles de la implementacion impide que los
   clientes dependan de las cosas que podrian cambiar, lo que le da al diseñador
   mayor libertad para evolucionar la implementacion sin romper la
   compatibilidad de la API.

#    As an example, consider the @c(bytes.Buffer) type. It is frequently used to
#    accumulate very short strings, so it is a profitable optimization to reserve
#    a little extra space in the object to avoid memory allocation in this common
#    case. Since @c(Buffer) is a struct type, this space takes the form of an
#    extra field of type @c([64]byte) with an uncapitalized name. When this field
#    was added, because it was not exported, clients of @c(Buffer) outside the
#    @c(bytes) package were unaware of any change except improved
#    performance. @c(Buffer) and its @c(Grow) method are shown below, simplified
#    for clarity :
   Como ejemplo, considere el tipo @c(bytes.Buffer) tipo. Se utiliza con
   frecuencia para acumular cadenas muy cortas, por lo que es una optimizacion
   rentable para reservar un poco mas de espacio en el objeto para evitar la
   asignacion de memoria en este caso comun. Ya que @c(Buffer) es un tipo
   @c(struct), este espacio tiene la forma de un campo adicional de tipo
   @c([64]byte) con un nombre en minusculas. Cuando se añadio este campo, ya que
   no se exporto, los clientes de @c(Buffer) fuera del paquete @c(bytes) no eran
   conscientes de ningun cambio, excepto un rendimiento mejorado. @c(Buffer) y
   su metodo @c(Grow) se muestran a continuacion, simplificado para mayor
   claridad:

#    ..src > go
#      type Buffer struct {
#        buf     []byte
#        initial [64]byte
#        /* ... */
#      }
#
#      // Grow expands the buffer's capacity, if necessary,
#      // to guarantee space for another n bytes. [...]
#      func (b *Buffer) Grow(n int) {
#        if b.buf == nil {
#          b.buf = b.initial[:0] // use preallocated space initially
#        }
#        if len(b.buf)+n > cap(b.buf) {
#          buf := make([]byte, b.Len(), 2*cap(b.buf) + n)
#          copy(buf, b.buf)
#          b.buf = buf
#        }
#      }
#    < src..
   ..src > go
     type Buffer struct {
       buf     []byte
       initial [64]byte
       /* ... */
     }

     // Grow apmlia la capacidad del buffer, si es necesario,
     // para garantizar espacio por otron n bytes. [...]
     func (b *Buffer) Grow(n int) {
       if b.buf == nil {
         b.buf = b.initial[:0] // use preallocated space initially
       }
       if len(b.buf)+n > cap(b.buf) {
         buf := make([]byte, b.Len(), 2*cap(b.buf) + n)
         copy(buf, b.buf)
         b.buf = buf
       }
     }
   < src..

#    The third benefit of encapsulation, and in many cases the most important, is
#    that it prevents clients from setting an object’s variables
#    arbitrarily. Because the object’s variables can be set only by functions in
#    the same package, the author of that package can ensure that all those
#    functions maintain the object’s internal invariants. For example, the
#    @c(Counter) type below permits clients to increment the counter or to reset
#    it to zero, but not to set it to some arbitrary value:
   El tercer beneficio de la encapsulacion, y en muchos casos el mas importante,
   es que impide que los clientes establezcan arbitrariamente las variables de
   un objeto. Debido a que las variables del objeto solo pueden ser definidas
   por funciones en el mismo paquete, el autor de ese paquete puede garantizar
   que todas esas funciones mantengan las invariantes internas del objeto. Por
   ejemplo, el tipo @c(Counter) continuacion permite a los clientes incrementar
   el contador o reestablecerlo a cero, pero no ponerlo en un valor arbitrario:

#    ..src > go
#      type Counter struct { n int }
#
#      func (c *Counter) N() int     { return c.n }
#      func (c *Counter) Increment() { c.n++ }
#      func (c *Counter) Reset()     { c.n = 0 }
#    < src..
   ..src > go
     type Counter struct { n int }

     func (c *Counter) N() int     { return c.n }
     func (c *Counter) Increment() { c.n++ }
     func (c *Counter) Reset()     { c.n = 0 }
   < src..

#    Functions that merely access or modify internal values of a type, such as the
#    methods of the @c(Logger) type from @c(log) package, below, are called
#    @e(getters) and @e(setters). However, when naming a getter method, we usually
#    omit the @c(Get) prefix. This preference for brevity extends to all methods,
#    not just field accessors, and to other redundant prefixes as well, such as
#    @c(Fetch), @c(Find), and @c(Lookup).
   Las Funciones que simplemente acceso o modifican los valores internos de un
   tipo, como los metodos del tipo @c(Logger) del paquete @c(log), a
   continuacion, se denominan @e(getters) (optenedores) y @e(setters)
   (definidores). Sin embargo, al nombrar a un metodo getter, por lo general
   omitimos el prefijo @c(Get). Esta preferencia por razones de brevedad se
   extiende a todos los metodos, no solo a los accesores de campo, y para otros
   prefijos redundantes, asi como @c(Fetch), @c(Find), y @c(Lookup).

#    ..src > go
#      package log
#
#      type Logger struct {
#        flags  int
#        prefix string
#        // ...
#      }
#
#      func (l *Logger) Flags() int
#      func (l *Logger) SetFlags(flag int)
#      func (l *Logger) Prefix() string
#      func (l *Logger) SetPrefix(prefix string)
#    < src..
   ..src > go
     package log

     type Logger struct {
       flags  int
       prefix string
       // ...
     }

     func (l *Logger) Flags() int
     func (l *Logger) SetFlags(flag int)
     func (l *Logger) Prefix() string
     func (l *Logger) SetPrefix(prefix string)
   < src..

#    Go style does not forbid exported fields. Of course, once exported, a field
#    cannot be unexported without an incompatible change to the API, so the
#    initial choice should be deliberate and should consider the complexity of the
#    invariants that must be maintained, the likelihood of future changes, and the
#    quantity of client code that would be affected by a change.
   El stilo de Go no prohibe exportar los campos. Por supuesto, una vez
   exportado, un campo no puede ser exportado sin un cambio incompatible a la
   API, por lo que la eleccion inicial debe ser deliberada y debe considerar la
   complejidad de los invariantes que deben mantenerse, la probabilidad de
   cambios futuros y la cantidad del codigo cliente que se veria afectado por un
   cambio.

#    Encapsulation is not always desirable. By revealing its representation as an
#    @c(int64) number of nanoseconds, @c(time.Duration) lets us use all the usual
#    arithmetic and comparison operations with durations, and even to define
#    constants of this type:
   La encapsulacion no siempre es deseable. Al revelar su representacion como un
   numero @c(int64) de nanosegundos, @c(time.Duration) nos permite usar todas
   las operaciones aritmeticas y de comparacion con duraciones habituales, e
   incluso para definir constantes de este tipo:

#    ..src > go
#      const day = 24 * time.Hour
#      fmt.Println(day.Seconds()) // "86400"
#    < src..
   ..src > go
     const day = 24 * time.Hour
     fmt.Println(day.Seconds()) // "86400"
   < src..

#    As another example, contrast @c(IntSet) with the @c(geometry.Path) type from
#    the beginning of this chapter. @c(Path) was defined as a slice type, allowing
#    its clients to construct instances using the slice literal syntax, to iterate
#    over its points using a range loop, and so on, whereas these operations are
#    denied to clients of @c(IntSet).
   Como otro ejemplo, contraste @c(IntSet) con el tipo @c(geometry.Path) al
   principio de este capitulo. @c(Path) se definio como un tipo de slice,
   permitiendo a sus clientes construir instancias utilizando la sintaxis
   literal de slice, para iterar sobre sus puntos usando un bucle de rango, y
   asi sucesivamente, mientras que estas operaciones se le niegan a los clientes
   de @c(IntSet).

#    Here’s the crucial difference: @c(geometry.Path) is intrinsically a sequence
#    of points, no more and no less, and we don’t foresee adding new fields to it,
#    so it makes sense for the @c(geometry) package to reveal that @c(Path) is a
#    slice. In contrast, an @c(IntSet) merely happens to be represented as a
#    @c([]uint64) slice. It could have been represented using @c([]uint), or
#    something completely different for sets that are sparse or very small, and it
#    might perhaps benefit from additional features like an extra field to record
#    the number of elements in the set. For these reasons, it makes sense for
#    @c(IntSet) to be opaque.
   Esta es la diferencia fundamental: @c(geometry.Path) es intrinsecamente una
   secuencia de puntos, ni mas ni menos, y no prevemos la adicion de nuevos
   campos a la misma, asi que tiene sentido para el paquete @c(geometry) revelar
   que @c(Path) es un slice. En contraste, un @c(IntSet) simplemente pasa a ser
   representado como un slice @c([]uint64). Podria haber sido representado
   mediante @c([]uint), o algo completamente diferente para los conjuntos que
   son escasos o muy pequeños, y que tal vez podrian beneficiarse de
   caracteristicas adicionales como un campo adicional para registrar el numero
   de elementos en el conjunto. Por estas razones, tiene sentido que @c(IntSet)
   sea opaco.

#    In this chapter, we learned how to associate methods with named types, and
#    how to call those methods. Although methods are crucial to object-oriented
#    programming, they’re only half the picture. To complete it, we need
#    @e(interfaces), the subject of the next chapter.
   En este capitulo, aprendimos como asociar metodos con tipos con nombre y como
   llamar a esos metodos. Aunque los metodos son cruciales para la programacion
   orientada a objetos, son solo la mitad de la imagen. Para completarla,
   necesitamos @e(interfaces), el tema del proximo capitulo.

# * Chapter 7 <> Interfaces
* Capitulo 7 <> Interfaces

#   Interface types express generalizations or abstractions about the behaviors of
#   other types. By generalizing, interfaces let us write functions that are more
#   flexible and adaptable because they are not tied to the details of one
#   particular implementation.
  Los tipos de interfaz expresan generalizaciones o abstracciones sobre los
  comportamientos de otros tipos. Al generalizar, las interfaces nos permiten
  escribir funciones que son mas flexibles y adaptables porque no estan
  vinculadas a los detalles de una implementacion en particular.

#   Many object-oriented languages have some notion of interfaces, but what makes
#   Go’s interfaces so distinctive is that they are @e(satisfied implicitly). In
#   other words, there’s no need to declare all the interfaces that a given
#   concrete type satisfies; simply possessing the necessary methods is
#   enough. This design lets you create new interfaces that are satisfied by
#   existing concrete types without changing the existing types, which is
#   particularly useful for types defined in packages that you don’t control.
  Muchos lenguajes orientados a objetos tienen alguna nocion de interfaces, pero
  lo que hace las interfaces de Go sean tan distintivas es que se @e(satisfacen
  de manera implicita). En otras palabras, no hay necesidad de declarar todas
  las interfaces que satisface un tipo determinado en concreto; Basta con poseer
  los metodos necesarios. Este diseño le permite crear nuevas interfaces que
  sean satisfechas por tipos concretos existentes sin cambiar los tipos
  existentes, lo cual es particularmente util para tipos definidos en paquetes
  que no controla.

#   In this chapter, we’ll start by looking at the basic mechanics of interface
#   types and their values.  Along the way, we’ll study several important
#   interfaces from the standard library. Many Go programs make as much use of
#   standard interfaces as they do of their own ones. Finally, we’ll look at
#   @e(type assertions) (@l(#Section 7.10<>§7.10)) and @e(type switches)
#   (@l(#Section 7.13<>§7.13)) and see how they enable a different kind of
#   generality.
  En este capitulo, comenzaremos examinando la mecanica basica de los tipos de
  interfaz y sus valores. En el camino, estudiaremos varias interfaces
  importantes de la libreria estandar. Muchos programas Go hacen uso intensivo
  de interfaces estandar como lo hacen con sus propios. Por ultimo, examinaremos
  los @e(tipos de aserciones) (@l(#Seccion 7.10<>§7.10)) y @e(switches de tipo)
  (@l(#Seccion 7.13<>§7.13)) y veremos como permiten un tipo diferente de
  generalidad.

# ** Section 7.1 <> Interfaces as Contracts
** Seccion 7.1 <> Interfaces como Contratos

#    All the types we’ve looked at so far have been @e(concrete types). A concrete
#    type specifies the exact representation of its values and exposes the
#    intrinsic operations of that representation, such as arithmetic for numbers,
#    or indexing, @c(append), and @c(range) for slices. A concrete type may also
#    provide additional behaviors through its methods. When you have a value of a
#    concrete type, you know exactly what it @e(is) and what you can @e(do) with
#    it.
   Todos los tipos que hemos visto hasta ahora han sido @e(tipos concretos). Un
   tipo concreto especifica la representacion exacta de sus valores y expone las
   operaciones intrinsecas de esa representacion, como la aritmetica para
   numeros, o indexacion, @c(append), y @c(range) para slices. Un tipo concreto
   tambien puede proporcionar comportamientos adicionales a traves de sus
   metodos. Cuando se tiene un valor de un tipo concreto, usted sabe exactamente
   lo que es y lo que puede hacer con el.

#    There is another kind of type in Go called an @e(interface type). An
#    interface is an @e(abstract type). It doesn’t expose the representation or
#    internal structure of its values, or the set of basic operations they
#    support; it reveals only some of their methods. When you have a value of an
#    interface type, you know nothing about what it @e(is); you know only what it
#    can @e(do), or more precisely, what behaviors are provided by its methods.
   Hay otro tipo en Go llama un @e(tipo de interfaz). Una interfaz es un tipo
   abstracto. No expone la representacion o estructura interna de sus valores,
   ni el conjunto de operaciones basicas que soporta; Revela solo algunos de sus
   metodos. Cuando se tiene un valor de un tipo interfaz, que no saben nada de
   lo que es; solo se sabe lo que puede hacer, o mas exactamente, que
   comportamientos son proporcionados por sus metodos.

#    Throughout the book, we’ve been using two similar functions for string
#    formatting: @c(fmt.Printf), which writes the result to the standard output (a
#    file), and @c(fmt.Sprintf), which returns the result as a @c(string). It
#    would be unfortunate if the hard part, formatting the result, had to be
#    duplicated because of these superficial differences in how the result is
#    used. Thanks to interfaces, it does not. Both of these functions are, in
#    effect, wrappers around a third function, @c(fmt.Fprintf), that is agnostic
#    about what happens to the result it computes:
   A lo largo del libro, hemos estado utilizando dos funciones similares para el
   formateo de cadenas: @c(fmt.Printf), que escribe el resultado a la salida
   estandar (un archivo), y @c(fmt.Sprintf), que devuelve el resultado como un
   @c(string). Seria lamentable que la parte dificil, el formato del resultado,
   tuviera que ser duplicado debido a estas diferencias superficiales en la
   forma en que el resultado se utiliza. Gracias a las interfaces, no lo
   hace. Ambas funciones son, en efecto, envolturas alrededor de una tercer
   funcion, @c(fmt.Fprintf), que es agnostico acerca de lo que ocurre con el
   resultado que calcula:

#    ..src > go
#      package fmt
#
#      func Fprintf(w io.Writer, format string, args ...interface{}) (int, error)
#
#      func Printf(format string, args ...interface{}) (int, error) {
#        return Fprintf(os.Stdout, format, args...)
#      }
#
#      func Sprintf(format string, args ...interface{}) string {
#        var buf bytes.Buffer
#        Fprintf(&buf, format, args...)
#        return buf.String()
#      }
#    < src..
   ..src > go
     package fmt

     func Fprintf(w io.Writer, format string, args ...interface{}) (int, error)

     func Printf(format string, args ...interface{}) (int, error) {
       return Fprintf(os.Stdout, format, args...)
     }

     func Sprintf(format string, args ...interface{}) string {
       var buf bytes.Buffer
       Fprintf(&buf, format, args...)
       return buf.String()
     }
   < src..

#    The @c(F) prefix of @c(Fprintf) stands for @e(file) and indicates that the
#    formatted output should be written to the file provided as the first
#    argument. In the @c(Printf) case, the argument, @c(os.Stdout), is an
#    @c(*os.File). In the @c(Sprintf) case, however, the argument is not a file,
#    though it superficially resembles one: @c(&buf) is a pointer to a memory
#    buffer to which bytes can be written.
   El prefijo @c(F) de @c(Fprintf) significa @e(file) (archivo) e indica que la
   salida formateada se debe escribir en el fichero proporcionado como primer
   argumento. En el caso de @c(Printf), el argumento, @c(os.Stdout), es un
   @c(*os.File). En el caso @c(Sprintf), sin embargo, el argumento no es un
   archivo, aunque se asemeja superficialmente a uno: @c(&buf) es un puntero a
   un bufer de memoria a la que se pueden escribir bytes.

#    The first parameter of @c(Fprintf) is not a file either. It’s an
#    @c(io.Writer), which is an interface type with the following declaration:
   El primer parametro de @c(Fprintf) no es un archivo cualquiera. Es un
   @c(io.Writer), que es un tipo de interfaz con la siguiente declaracion:

#    ..src > go
#      package io
#
#      // Writer is the interface that wraps the basic Write method.
#      type Writer interface {
#        // Write writes len(p) bytes from p to the underlying data stream.
#        // It returns the number of bytes written from p (0 <= n <= len(p))
#        // and any error encountered that caused the write to stop early.
#        // Write must return a non-nil error if it returns n < len(p).
#        // Write must not modify the slice data, even temporarily.
#        //
#        // Implementations must not retain p.
#        Write(p []byte) (n int, err error)
#      }
#    < src..
   ..src > go
     package io

     // Writer es la interfaz que envuelve el metodo de escritura basico.
     type Writer interface {
       // Write escribe len(p) bytes de p en el flujo de datos subyacentes.
       // Devuelve el numero de bytes escritos de p (0 <= n <= len(p))
       // y cualquier error encontrado que causo un paro temprano en la escritura.
       // Write debe regresar un error no-nil si devulve n < len(p).
       // Write no debe modificar los datol del slice, ni siquier temporalmente.
       //
       // Las imprementaciones no deben retener a p.
       Write(p []byte) (n int, err error)
     }
   < src..

#    The @c(io.Writer) interface defines the contract between @c(Fprintf) and its
#    callers. On the one hand, the contract requires that the caller provide a
#    value of a concrete type like @c(*os.File) or @c(*bytes.Buffer) that has a
#    method called @c(Write) with the appropriate signature and behavior.  On the
#    other hand, the contract guarantees that @c(Fprintf) will do its job given
#    any value that satisfies the @c(io.Writer) interface. @c(Fprintf) may not
#    assume that it is writing to a file or to memory, only that it can call
#    @c(Write).
   La interfaz @c(io.Writer) define el contrato entre @c(Fprintf) y sus
   interlocutores. Por un lado, el contrato requiere que el llamador proporcione
   un valor de un tipo concreto como @c(*os.File) o @c(*bytes.Buffer) que tiene
   un metodo denominado @c(Write) con la firma y el comportamiento apropiado.
   Por otra parte, el contrato garantiza que @c(Fprintf) hara su trabajo dando
   cualquier valor que satisfaga la interfaz @c(io.Writer). @c(Fprintf) no puede
   asumir que se esta escribiendo en un archivo o en la memoria, solo que se
   puede llamar a @c(Write).

#    Because @c(fmt.Fprintf) assumes nothing about the representation of the value
#    and relies only on the behaviors guaranteed by the @c(io.Writer) contract, we
#    can safely pass a value of any concrete type that satisfies @c(io.Writer) as
#    the first argument to @c(fmt.Fprintf). This freedom to substitute one type
#    for another that satisfies the same interface is called @e(substitutability),
#    and is a hallmark of object-oriented programming.
   Ya que @c(fmt.Fprintf) no asume nada acerca de la representacion del valor y
   se basa unicamente en los comportamientos garantizados por el contrato
   @c(io.Writer), podemos pasar con seguridad un valor concreto de cualquier
   tipo que satisfaga @c(io.Writer) como primer argumento de
   @c(fmt.Fprintf). Esta libertad para sustituir un tipo por otro que satisface
   la misma interfaz se denomina @e(sustituibilidad), y es una caracteristica de
   la programacion orientada a objetos.

#    Let’s test this out using a new type. The @c(Write) method of the
#    @c(*ByteCounter) type below merely counts the bytes written to it before
#    discarding them. (The conversion is required to make the types of @c[len(p)]
#    and @c(*c) match in the @c(+=) assignment statement.)
   Vamos a probar esto usando un nuevo tipo. A continuacion el metodo @c(Write)
   del tipo @c(*ByteCounter) simplemente cuenta los bytes escritos antes de
   descartarlos. (La conversion se requiere para hacer que los tipos de
   @c[len(p)] y @c(*c) coincidan en la sentencia de asignacion @c(+=).)

#    ..figure > @l(gopl.io/ch7/bytecounter/main.go<>gopl.io/ch7/bytecounter)
   ..figure > @l(gopl.io/ch7/bytecounter/main.go<>gopl.io/ch7/bytecounter)

#      ..src > go
#        type ByteCounter int
#
#        func (c *ByteCounter) Write(p []byte) (int, error) {
#          *c += ByteCounter(len(p)) // convert int to ByteCounter
#          return len(p), nil
#        }
#      < src..
     ..src > go
       type ByteCounter int

       func (c *ByteCounter) Write(p []byte) (int, error) {
         *c += ByteCounter(len(p)) // convert int to ByteCounter
         return len(p), nil
       }
     < src..


#    Since @c(*ByteCounter) satisfies the @c(io.Writer) contract, we can pass it
#    to @c(Fprintf), which does its string formatting oblivious to this change;
#    the @c(ByteCounter) correctly accumulates the length of the result.
   Puesto que @c(*ByteCounter) satisface el contrato @c(io.Writer), podemos
   pasarlo a @c(Fprintf), que hace su formato de cadenas ajeno a este cambio;
   @c(ByteCounter) acumula correctamente la longitud del resultado.

#    ..src > go
#      var c ByteCounter
#      c.Write([]byte("hello"))
#      fmt.Println(c) // "5", = len("hello")
#
#      c = 0 // reset the counter
#      var name = "Dolly"
#      fmt.Fprintf(&c, "hello, %s", name)
#      fmt.Println(c) // "12", = len("hello, Dolly")
#    < src..
   ..src > go
     var c ByteCounter
     c.Write([]byte("hello"))
     fmt.Println(c) // "5", = len("hello")

     c = 0          // reinicia el contador
     var name = "Dolly"
     fmt.Fprintf(&c, "hello, %s", name)
     fmt.Println(c) // "12", = len("hello, Dolly")
   < src..

#    Besides @c(io.Writer), there is another interface of great importance to the
#    @c(fmt) package. @c(Fprintf) and @c(Fprintln) provide a way for types to
#    control how their values are printed. In @l(#Section 2.5), we defined a
#    @c(String) method for the @c(Celsius) type so that temperatures would print
#    as @c("100°C"), and in @l(#Section 6.5) we equipped @c(*IntSet) with a
#    @c(String) method so that sets would be rendered using traditional set
#    notation like @c("{1 2 3}"). Declaring a @c(String) method makes a type
#    satisfy one of the most widely used interfaces of all, @c(fmt.Stringer):
   Ademas de @c(io.Writer), hay otra interfaz de gran importancia para el
   paquete @c(fmt). @c(Fprintf) y @c(Fprintln) proporcionan una forma para que
   los tipos controles como se imprimen sus valores. En la @l(#Seccion 2.5),
   definimos un metodo @c(String) para el tipo @c(Celsius) de modo que las
   temperaturas se impriman como @c("100°C"), y en la @l(#Seccion 6.5) hemos
   equipado a @c(*IntSet) con un metodo @c(String) de modo que los conjuntos
   fueran renderizados utilizando la notacion de conjuntos tradicional como
   @c("{1 2 3}"). La declaracion de un metodo @c(String) hace que un tipo
   satisfaga una de las interfaces mas utilizados de todas, @c(fmt.Stringer):

#    ..src > go
#      package fmt
#
#      // The String method is used to print values passed
#      // as an operand to any format that accepts a string
#      // or to an unformatted printer such as Print.
#      type Stringer interface {
#        String() string
#      }
#    < src..
   ..src > go
     package fmt

     // El metodo String se utiliza para imprimr los valores recividos
     // como un operando de cualquier formato que acepte una cadena
     // o una impresion sin formato como Print.
     type Stringer interface {
       String() string
     }
   < src..

#    We’ll explain how the @c(fmt) package discovers which values satisfy this
#    interface in @l(#Section 7.10).
   Vamos a explicar como el paquete @c(fmt) descubre que valores satisfacen esta
   interfaz en la @l(#Seccion 7.10).

#    @b(Exercise 7.1): Using the ideas from @c(ByteCounter), implement counters
#    for words and for lines.  You will find @c(bufio.ScanWords) useful.
   @b(Ejercicio 7.1): Haciendo uso de las ideas de @c(ByteCounter), implementar
   contadores para lineas y palabras. Puedes encontrar util @c(bufio.ScanWords).

#    @b(Exercise 7.2): Write a function @c(CountingWriter) with the signature
#    below that, given an @c(io.Writer), returns a new @c(Writer) that wraps the
#    original, and a pointer to an @c(int64) variable that at any moment contains
#    the number of bytes written to the new @c(Writer).
   @b(Ejercicio 7.2): Escribir una funcion @c(CountingWriter) con la firma de
   abajo que, pasando un @c(io.Writer), devuelva un nuevo @c(Writer) que
   envuelva el original, y un puntero a una variable @c(int64) que contenga en
   cualquier momento el numero de bytes escritos en el nuevo @c(Writer) .

#    ..src > go
#      func CountingWriter(w io.Writer) (io.Writer, *int64)
#    < src..
   ..src > go
     func CountingWriter(w io.Writer) (io.Writer, *int64)
   < src..

#    @b(Exercise 7.3): Write a @c(String) method for the @c(*tree) type in
#    @c(gopl.io/ch4/treesort) (@l(#Section 4.4<>§4.4)) that reveals the sequence
#    of values in the tree.
   @b(Ejercicio 7.3): Escribir un metodo @c(String) para el tipo @c(*tree) de
   @c(gopl.io/ch4/treesort) (@l(#Seccion 4.4<>§4.4)) que revela la secuencia de
   valores en el arbol.

# ** Section 7.2 <> Interface Types
** Seccion 7.2 <> Tipos de Interfaz

#    An interface type specifies a set of methods that a concrete type must
#    possess to be considered an instance of that interface.
   Un tipo de interfaz especifica un conjunto de metodos que un tipo de concreto
   debe poseer para ser considerado una instancia de esa interfaz.

#    The @c(io.Writer) type is one of the most widely used interfaces because it
#    provides an abstraction of all the types to which bytes can be written, which
#    includes files, memory buffers, network connections, HTTP clients, archivers,
#    hashers, and so on. The @c(io) package defines many other useful interfaces.
#    A @c(Reader) represents any type from which you can read bytes, and a
#    @c(Closer) is any value that you can close, such as a file or a network
#    connection. (By now you’ve probably noticed the naming convention for many of
#    Go’s single-method interfaces.)
   El tipo @c(io.Writer) es una de las interfaces mas utilizados, ya que
   proporciona una abstraccion de todos los tipos a los que se pueden escribir
   bytes, que incluye archivos, buffers de memoria, conexiones de red, clientes
   HTTP, archivadores, hashers, etc. El paquete @c(io) define muchas otras
   interfaces utiles. Un @c(Reader) representa cualquier tipo del que se puede
   leer bytes, y un @c(Closer) es cualquier valor que se puede cerrar, como un
   archivo o una conexion de red. (Por ahora probablemente has notado la
   convencion de nomenclatura para muchas de las interfaces de metodo unico de
   Go).

#    ..src > go
#      package io
#
#      type Reader interface {
#        Read(p []byte) (n int, err error)
#      }
#
#      type Closer interface {
#        Close() error
#      }
#    < src..
   ..src > go
     package io

     type Reader interface {
       Read(p []byte) (n int, err error)
     }

     type Closer interface {
       Close() error
     }
   < src..

#    Looking farther, we find declarations of new interface types as combinations
#    of existing ones.  Here are two examples:
   Mirando mas lejos, encontramos declaraciones de nuevos tipos de interfaz como
   combinaciones de los ya existentes. He aqui dos ejemplos:

#    ..src > go
#      type ReadWriter interface {
#        Reader
#        Writer
#      }
#
#      type ReadWriteCloser interface {
#        Reader
#        Writer
#        Closer
#      }
#    < src..
   ..src > go
     type ReadWriter interface {
       Reader
       Writer
     }

     type ReadWriteCloser interface {
       Reader
       Writer
       Closer
     }
   < src..

#    The syntax used above, which resembles struct embedding, lets us name another
#    interface as a shorthand for writing out all of its methods. This is called
#    @e(embedding) an interface. We could have written @c(io.ReadWriter) without
#    embedding, albeit less succinctly, like this:
   La sintaxis utilizada, se asemeja al enbebido de estructuras, nos permite
   nombrar otra interfaz como una abreviatura para escribir todos sus
   metodos. Esto se conoce denomina como @e(embeber) una interfaz. Podriamos
   haber escrito @c(io.ReadWriter) sin enbeberla, aunque de manera menos
   sucinta, como aqui:

#    ..src > go
#      type ReadWriter interface {
#        Read(p []byte) (n int, err error)
#        Write(p []byte) (n int, err error)
#      }
#    < src..
   ..src > go
     type ReadWriter interface {
       Read(p []byte) (n int, err error)
       Write(p []byte) (n int, err error)
     }
   < src..

#    or even using a mixture of the two styles:
   o incluso utilizando una mezcla de los dos estilos:

#    ..src > go
#      type ReadWriter interface {
#        Read(p []byte) (n int, err error)
#        Writer
#      }
#    < src..
   ..src > go
     type ReadWriter interface {
       Read(p []byte) (n int, err error)
       Writer
     }
   < src..

#    All three declarations have the same effect. The order in which the methods
#    appear is immaterial. All that matters is the set of methods.
   Las tres declaraciones tienen el mismo efecto. El orden en que aparecen los
   metodos es irrelevante. Todo lo que importa es el conjunto de metodos.

#    @b(Exercise 7.4): The @c(strings.NewReader) function returns a value that
#    satisfies the @c(io.Reader) interface (and others) by reading from its
#    argument, a string. Implement a simple version of @c(NewReader) yourself, and
#    use it to make the HTML parser (@l(#Section 5.2<>§5.2)) take input from a
#    string.
   @b(Ejercicio 7.4): La funcion @c(strings.NewReader) devuelve un valor que
   satisface la interfaz @c(io.Reader) (y otras) mediante la lectura de su
   argumento, una cadena. Implementa tu mismo una version simple de
   @c(NewReader), y utilizala para hacer que el analizador de HTML (@l(#Seccion
   5.2<>§5.2)) tome la entrada de una cadena.

#    @b(Exercise 7.5): The @c(LimitReader) function in the @c(io) package accepts
#    an @c(io.Reader) @c(r) and a number of bytes @c(n), and returns another
#    @c(Reader) that reads from @c(r) but reports an end-of-file condition after
#    @c(n) bytes. Implement it.
   @b(Ejercicio 7.5): La funcion @c(LimitReader) en el paquete @c(io) acepta un
   @c(io.Reader) @c(r) y un numero de bytes @c(n), y devuelve otro @c(Reader)
   que lee desde @c(r) pero reporta una condicion de fin de archivo despues de
   @c(n) bytes. Implementalo.

#    ..src > go
#      func LimitReader(r io.Reader, n int64) io.Reader
#    < src..
   ..src > go
     func LimitReader(r io.Reader, n int64) io.Reader
   < src..

# ** Section 7.3 <> Interface Satisfaction
** Seccion 7.3 <> Satisfaccion de la Interfaz

#    A type @e(satisfies) an interface if it possesses all the methods the
#    interface requires. For example, an @c(*os.File) satisfies @c(io.Reader),
#    @c(Writer), @c(Closer), and @c(ReadWriter). A @c( *bytes.Buffer) satisfies
#    @c(Reader), @c(Writer), and @c(ReadWriter), but does not satisfy @c(Closer)
#    because it does not have a @c(Close) method. As a shorthand, Go programmers
#    often say that a concrete type @"(is a) particular interface type, meaning
#    that it satisfies the interface. For example, a @c(*bytes.Buffer) is an
#    @c(io.Writer); an @c(*os.File) is an @c(io.ReadWriter).
   Un tipo satisface una interfaz si posee todos los metodos que la interfaz
   requiere. Por ejemplo, un @c(*os.File) satisface @c(io.Reader), @c(Writer),
   @c(Closer), y @c(ReadWriter). Un @c(*bytes.Buffer) satisface @c(Reader),
   @c(Writer), y @c(ReadWriter), pero no satisfacer @c(Closer), ya que no tiene
   un metodo @c(Close). Como una abreviatura, los programadores de Go a menudo
   dicen que un tipo concreto @"(es un) tipo de interfaz en particular, lo que
   significa que satisface la interfaz. Por ejemplo, un @c(*bytes.Buffer) es un
   @c(io.Writer); un @c(*os.File) es un @c(io.ReadWriter).

#    The assignability rule (@l(#Section 2.4.2<>§2.4.2)) for interfaces is very
#    simple: an expression may be assigned to an interface only if its type
#    satisfies the interface. So:
   La regla de asignabilidad (@l(#Seccion 2.4.2<>§2.4.2)) para interfaces es muy
   simple: una expresion puede ser asignada a una interfaz solo si su tipo se
   ajusta a la interfaz. Asi que:

#    ..src > go
#      var w io.Writer
#      w = os.Stdout           // OK: *os.File has Write method
#      w = new(bytes.Buffer)   // OK: *bytes.Buffer has Write method
#      w = time.Second         // compile error: time.Duration lacks Write method
#
#      var rwc io.ReadWriteCloser
#      rwc = os.Stdout         // OK: *os.File has Read, Write, Close methods
#      rwc = new(bytes.Buffer) // compile error: *bytes.Buffer lacks Close method
#    < src..
   ..src > go
     var w io.Writer
     w = os.Stdout           // OK: *os.File tiene metodo Write
     w = new(bytes.Buffer)   // OK: *bytes.Buffer tiene metodo Write
     w = time.Second         // error de compilacion: time.Duration carece de metodo Write

     var rwc io.ReadWriteCloser
     rwc = os.Stdout         // OK: *os.File tiene metodos Read, Write, Close
     rwc = new(bytes.Buffer) // error de compilacion: *bytes.Buffer carece de metodo Close
   < src..

#    This rule applies even when the right-hand side is itself an interface:
   Esta regla se aplica incluso cuando el lado derecho es en si mismo una
   interfaz:

#    ..src > go
#      w = rwc                 // OK: io.ReadWriteCloser has Write method
#      rwc = w                 // compile error: io.Writer lacks Close method
#    < src..
   ..src > go
     w = rwc                 // OK: io.ReadWriteCloser tiene metodo Write
     rwc = w                 // error de compilacion: io.Writer carece de metodo Close
   < src..

#    Because @c(ReadWriter) and @c(ReadWriteCloser) include all the methods of
#    @c(Writer), any type that satisfies @c(ReadWriter) or @c(ReadWriteCloser)
#    necessarily satisfies @c(Writer).
   Como @c(ReadWriter) y @c(ReadWriteCloser) incluyen todos los metodos de
   @c(Writer), cualquier tipo que satisface @c(ReadWriter) o @c(ReadWriteCloser)
   satisface @c(Writer) necesariamente.

#    Before we go further, we should explain one subtlety in what it means for a
#    type to have a method. Recall from @l(#Section 6.2) that for each named
#    concrete type @c(T), some of its methods have a receiver of type @c(T) itself
#    whereas others require a @c(*T) pointer. Recall also that it is legal to call
#    a @c(*T) method on an argument of type @c(T) so long as the argument is a
#    @e(variable); the compiler implicitly takes its address. But this is mere
#    syntactic sugar: a value of type @c(T) does not possess all the methods that
#    a @c(*T) pointer does, and as a result it might satisfy fewer interfaces.
   Antes de ir mas lejos, debemos explicar una sutileza en lo que significa para
   un tipo tener un metodo. Recuerde de la @l(#Seccion 6.2) que para cada tipo
   concreto llamado @c(T), algunos de sus metodos tienen un receptor de tipo
   @c(T), mientras que otros requieren un puntero @c(*T). Recordemos tambien que
   es legal para llamar a un metodo @c(*T) en un argumento de tipo @c(T),
   siempre y cuando el argumento sea una variable; El compilador toma
   implicitamente su direccion. Pero esto es mero azucar sintactico: un valor de
   tipo @c(T) no posee todos los metodos que tiene un puntero @c(*T), y como
   resultado podria satisfacer menos interfaces.

#    An example will make this clear. The @c(String) method of the @c(IntSet) type
#    from @l(#Section 6.5) requires a pointer receiver, so we cannot call that
#    method on a non-addressable @c(IntSet) value:
   Un ejemplo lo hara claro. El metodo @c(String) del tipo @c(IntSet) de la
   @l(#Seccion 6.5) requiere un receptor puntero, asi que no podemos llamar a
   ese metodo en un valor @c(IntSet) no direccionable:

#    ..src > go
#      type IntSet struct { /* ... */ }
#      func (*IntSet) String() string
#
#      var _ = IntSet{}.String() // compile error: String requires *IntSet receiver
#    < src..
   ..src > go
     type IntSet struct { /* ... */ }
     func (*IntSet) String() string

     var _ = IntSet{}.String() // error de compilacion: String requiere un receptor *intSet
   < src..

#    but we can call it on an @c(IntSet) variable:
   pero podemos decir que es una variables @c(IntSet):

#    ..src > go
#      var s IntSet
#      var _ = s.String() // OK: s is a variable and &s has a String method
#    < src..
   ..src > go
     var s IntSet
     var _ = s.String() // OK: s es una variable y &s tiene el metodo String
   < src..

#    However, since only @c(*IntSet) has a @c(String) method, only @c(*IntSet)
#    satisfies the @c(fmt.Stringer) interface:
   Sin embargo, puesto que solamente @c(*IntSet) tiene un metodo @c(String),
   solamente @c(*IntSet) satisface la interfaz @c(fmt.Stringer):

#    ..src > go
#      var _ fmt.Stringer = &s // OK
#      var _ fmt.Stringer = s  // compile error: IntSet lacks String method
#    < src..
   ..src > go
     var _ fmt.Stringer = &s // OK
     var _ fmt.Stringer = s  // error de compilacion: IntSet carece de metodo String
   < src..

#    @l(#Section 12.8) includes a program that prints the methods of an arbitrary
#    value, and the @$(godoc -analysis=type) tool (@l(#Section 10.7.4<>§10.7.4))
#    displays the methods of each type and the relationship between interfaces and
#    concrete types.
   La @l(#Seccion 12.8) incluye un programa que imprime los metodos de un valor
   arbitrario, y la herramienta @$(godoc -analysis=type) (@l(#Seccion
   10.7.4<>§10.7.4)) muestra los metodos de cada tipo y la relacion entre las
   interfaces y tipos concretos.

#    Like an envelope that wraps and conceals the letter it holds, an interface
#    wraps and conceals the concrete type and value that it holds. Only the
#    methods revealed by the interface type may be called, even if the concrete
#    type has others:
   Como un sobre que envuelve y oculta la carta que contiene, una interfaz
   envuelve y oculta el tipo concreto y el valor que contiene. Solo los metodos
   revelados por el tipo de interfaz pueden ser llamados, incluso si el tipo
   concreto tiene otros:

#    ..src > go
#      os.Stdout.Write([]byte("hello")) // OK: *os.File has Write method
#      os.Stdout.Close()                // OK: *os.File has Close method
#
#      var w io.Writer
#      w = os.Stdout
#      w.Write([]byte("hello")) // OK: io.Writer has Write method
#      w.Close()                // compile error: io.Writer lacks Close method
#    < src..
   ..src > go
     os.Stdout.Write([]byte("hello")) // OK: *os.File tiene el metodo Write
     os.Stdout.Close()                // OK: *os.File tiene el metodo Close

     var w io.Writer
     w = os.Stdout
     w.Write([]byte("hello")) // OK: io.Writer tiene el metodo Write
     w.Close()                // compile error: io.Writer carece del metodo Close
   < src..

#    An interface with more methods, such as @c(io.ReadWriter), tells us more
#    about the values it contains, and places greater demands on the types that
#    implement it, than does an interface with fewer methods such as
#    @c(io.Reader). So what does the type @c(interface{}), which has no methods at
#    all, tell us about the concrete types that satisfy it?
   Una interfaz con mas metodos, como @c(io.ReadWriter), nos dice mas acerca de
   los valores que contiene, y coloca mayores demandas sobre los tipos que la
   implementan, que un interfaz con un menos metodos como @c(io.Reader).
   Entonces, que hace el tipo @c(interface{}), que no tiene ningun metodo en
   absoluto, nos cuenta sobre los tipos concretos que lo satisfacen?

#    That’s right: nothing. This may seem useless, but in fact the type
#    @c(interface{}), which is called the @e(empty interface) type, is
#    indispensable. Because the empty interface type places no demands on the
#    types that satisfy it, we can assign @e(any) value to the empty interface.
   Eso es correcto: nada. Esto puede parecer inutil, pero en realidad el tipo
   @c(interface{}), que se denomina el tipo de @e(interfaz vacia), es
   indispensable. Debido a que el tipo de interfaz vacia no impone exigencias a
   los tipos que lo satisfacen, podemos asignar @e(cualquier) valor a la
   interfaz vacia.

#    ..src > go
#      var any interface{}
#      any = true
#      any = 12.34
#      any = "hello"
#      any = map[string]int{"one": 1}
#      any = new(bytes.Buffer)
#    < src..
   ..src > go
     var any interface{}
     any = true
     any = 12.34
     any = "hello"
     any = map[string]int{"one": 1}
     any = new(bytes.Buffer)
   < src..

#    Although it wasn’t obvious, we’ve been using the empty interface type since
#    the very first example in this book, because it is what allows functions like
#    @c(fmt.Println), or @c(errorf) in @l(#Section 5.7), to accept arguments of
#    any type.
   A pesar de que no ser obvio, hemos utilizando el tipo de interfaz vacia desde
   el primer ejemplo en este libro, porque es lo que permite que funciones como
   @c(fmt.Println), o @c(errorf) en la @l(#Seccion 5.7), acepten argumentos de
   cualquier tipo.

#    Of course, having created an @c(interface{}) value containing a boolean,
#    float, string, map, pointer, or any other type, we can do nothing directly to
#    the value it holds since the interface has no methods. We need a way to get
#    the value back out again. We’ll see how to do that using a @e(type assertion)
#    in @l(#Section 7.10).
   Por supuesto, despues de crear un valor @c(interface{}) que contiene un valor
   booleano, float, string, mapa, puntero, o de cualquier otro tipo, no podemos
   hacer nada directamente con el valor que posee ya que la interfaz no tiene
   metodos. Necesitamos una forma de recuperar el valor nuevamente. Veremos como
   hacerlo utilizando un @e(tipo de asercion) en la @l(#Seccion 7.10).

#    Since interface satisfaction depends only on the methods of the two types
#    involved, there is no need to declare the relationship between a concrete
#    type and the interfaces it satisfies. That said, it is occasionally useful to
#    document and assert the relationship when it is intended but not otherwise
#    enforced by the program. The declaration below asserts at compile time that a
#    value of type @c(*bytes.Buffer) satisfies @c(io.Writer):
   Dado que la satisfaccion de la interfaz depende solo de los metodos de los
   dos tipos implicados, no hay necesidad de declarar la relacion entre un tipo
   concreto y las interfaces que satisface. Dicho esto, ocasionalmente es util
   documentar y afirmar la relacion cuando se pretende, pero no se aplica de
   otro modo por el programa. La declaracion a continuacion afirma en tiempo de
   compilacion que un valor de tipo @c(*bytes.Buffer) satisface @c(io.Writer):

#    ..src > go
#      // *bytes.Buffer must satisfy io.Writer
#      var w io.Writer = new(bytes.Buffer)
#    < src..
   ..src > go
     // *bytes.Buffer debe satirfacer io.Writer
     var w io.Writer = new(bytes.Buffer)
   < src..

#    We needn’t allocate a new variable since any value of type @c(*bytes.Buffer)
#    will do, even @c(nil), which we write as @c[(*bytes.Buffer)(nil)] using an
#    explicit conversion. And since we never intend to refer to @c(w), we can
#    replace it with the blank identifier. Together, these changes give us this
#    more frugal variant:
   No tenemos que asignar una nueva variable, ya que cualquier valor de tipo
   @c(*bytes.Buffer) lo hara, incluso @c(nil), que escribimos como
   @c[(*bytes.Buffer)(nil)] mediante una conversion explicita. Y ya que nunca
   intentamos referirnos a @c(w), podemos sustituirlo por el identificador en
   blanco. Juntos, estos cambios nos dan esta variante mas frugal:

#    ..src > go
#      // *bytes.Buffer must satisfy io.Writer
#      var _ io.Writer = (*bytes.Buffer)(nil)
#    < src..
   ..src > go
     // *bytes.Buffer debe satisfacer io.Writer
     var _ io.Writer = (*bytes.Buffer)(nil)
   < src..

#    Non-empty interface types such as @c(io.Writer) are most often satisfied by a
#    pointer type, particularly when one or more of the interface methods implies
#    some kind of mutation to the receiver, as the @c(Write) method does. A
#    pointer to a struct is an especially common methodbearing type.
   Los tipos de interfaces no-vacios como io.Writer suelen ser satisfechos por
   un tipo de puntero, sobre todo cuando uno o mas de los metodos de interfaz
   implica algun tipo de mutacion en el receptor, como la hace el metodo
   @c(Write). Un puntero a una estructura es un tipo de metodo especialmente comun.

#    But pointer types are by no means the only types that satisfy interfaces, and
#    even interfaces with mutator methods may be satisfied by one of Go’s other
#    reference types. We’ve seen examples of slice types with methods
#    (@c(geometry.Path), @l(#Section 6.1<>§6.1)) and map types with methods
#    (@c(url.Values), @l(#Section 6.2.1<>§6.2.1)), and later we’ll see a function
#    type with methods (@c(http.HandlerFunc), @l(#Section 7.7<>§7.7)). Even basic
#    types may satisfy interfaces; as we saw in @l(#Section 7.4),
#    @c(time.Duration) satisfies @c(fmt.Stringer).
   Pero los tipos de puntero no son de ninguna manera los unicos tipos que
   satisfacen las interfaces, e incluso las interfaces con los metodos mutator
   pueden ser satisfechas por uno de los otros tipos de referencia de Go. Hemos
   visto ejemplos de tipos de slice con metodos (@c(geometry.Path), @l(#Seccion
   6.1<>§6.1)) y tipos de mapas con metodos (@c(url.Values), @l(#Seccion
   6.2.1<>§6.2.1)), y mas adelante veremos un tipo de funcion con metodos
   (@c(http.HandlerFunc), @l(#Seccion 7.7<>§7.7)). Incluso los tipos basicos
   pueden satisfacer interfaces; como vimos en la @l(#Seccion 7.4), @c(time.Duration)
   satisface @c(fmt.Stringer).

#    A concrete type may satisfy many unrelated interfaces. Consider a program
#    that organizes or sells digitized cultural artifacts like music, films, and
#    books. It might define the following set of concrete types:
   Un tipo concreto puede satisfacer muchas interfaces no relacionadas.
   Considere un programa que organiza o vende artefactos culturales
   digitalizados como musica, peliculas y libros. Podria definir el siguiente
   conjunto de tipos concretos:

#    ..pre >
#      Album
#      Book
#      Movie
#      Magazine
#      Podcast
#      TVEpisode
#      Track
   ..pre >
     Album
     Book
     Movie
     Magazine
     Podcast
     TVEpisode
     Track

#    We can express each abstraction of interest as an interface. Some properties
#    are common to all artifacts, such as a title, a creation date, and a list of
#    creators (authors or artists).
   Podemos expresar cada abstraccion de interes como una interfaz. Algunas
   propiedades son comunes a todos los artefactos, como un titulo, una fecha de
   creacion y una lista de creadores (autores o artistas).

#    ..src > go
#      type Artifact interface {
#        Title() string
#        Creators() []string
#        Created() time.Time
#      }
#    < src..
   ..src > go
     type Artifact interface {
       Title() string
       Creators() []string
       Created() time.Time
     }
   < src..

#    Other properties are restricted to certain types of artifacts. Properties of
#    the printed word are relevant only to books and magazines, whereas only
#    movies and TV episodes have a screen resolution.
   Otras propiedades estan restringidas a ciertos tipos de artefactos. Las
   propiedades de @c(printed_word) solo son relevantes para libros y revistas,
   mientras que solo las peliculas y episodios de television tienen una
   resolucion de pantalla.

#    ..src > go
#      type Text interface {
#        Pages() int
#        Words() int
#        PageSize() int
#      }
#
#      type Audio interface {
#        Stream() (io.ReadCloser, error)
#        RunningTime() time.Duration
#        Format() string // e.g., "MP3", "WAV"
#      }
#
#      type Video interface {
#        Stream() (io.ReadCloser, error)
#        RunningTime() time.Duration
#        Format() string // e.g., "MP4", "WMV"
#        Resolution() (x, y int)
#      }
#    < src..
   ..src > go
     type Text interface {
       Pages() int
       Words() int
       PageSize() int
     }

     type Audio interface {
       Stream() (io.ReadCloser, error)
       RunningTime() time.Duration
       Format() string // e.g., "MP3", "WAV"
     }

     type Video interface {
       Stream() (io.ReadCloser, error)
       RunningTime() time.Duration
       Format() string // e.g., "MP4", "WMV"
       Resolution() (x, y int)
     }
   < src..

#    These interfaces are but one useful way to group related concrete types
#    together and express the facets they share in common. We may discover other
#    groupings later. For example, if we find we need to handle @c(Audio) and
#    @c(Video) items in the same way, we can define a @c(Streamer) interface to
#    represent their common aspects without changing any existing type
#    declarations.
   Estas interfaces no son sino una forma util de agrupar tipos concretos
   relacionados y expresar las facetas que comparten en comun. Podemos descubrir
   otras agrupaciones mas tarde. Por ejemplo, si descubrimos que necesitamos
   manejar elementos de @c(Audio) y @c(Video) de la misma manera, podemos
   definir una interfaz @c(Streamer) para representar sus aspectos comunes sin
   cambiar ninguna declaracion de tipos existentes.

#    ..src > go
#      type Streamer interface {
#        Stream() (io.ReadCloser, error)
#        RunningTime() time.Duration
#        Format() string
#      }
#    < src..
   ..src > go
     type Streamer interface {
       Stream() (io.ReadCloser, error)
       RunningTime() time.Duration
       Format() string
     }
   < src..

#    Each grouping of concrete types based on their shared behaviors can be
#    expressed as an interface type. Unlike class-based languages, in which the
#    set of interfaces satisfied by a class is explicit, in Go we can define new
#    abstractions or groupings of interest when we need them, without modifying
#    the declaration of the concrete type. This is particularly useful when the
#    concrete type comes from a package written by a different author. Of course,
#    there do need to be underlying commonalities in the concrete types.
   Cada agrupacion de tipos concretos basados ​​en sus comportamientos compartidos
   puede expresarse como un tipo de interfaz. A diferencia de los lenguajes
   basados ​​en clases, en los que el conjunto de interfaces satisfecho por una
   clase es explicito, en Go podemos definir nuevas abstracciones o agrupaciones
   de interes cuando las necesitamos, sin modificar la declaracion del tipo
   concreto. Esto es particularmente util cuando el tipo concreto proviene de un
   paquete escrito por un autor diferente. Por supuesto, es necesario que haya
   puntos comunes subyacentes en los tipos concretos.

# ** Section 7.4 <> Parsing Flags with @c(flag.Value)
** Seccion 7.4 <> Analizar Banderas con @c(flag.Value)

#    In this section, we’ll see how another standard interface, @c(flag.Value),
#    helps us define new notations for command-line flags. Consider the program
#    below, which sleeps for a specified period of time.
   En esta seccion, vamos a ver como otro interfaz estandar, @c(flag.Value), nos
   ayuda a definir nuevas notaciones de opciones de linea de comandos. Considere
   el programa a continuacion, que duerme durante un periodo de tiempo
   especificado.

#    ..figure > @l(gopl.io/ch7/sleep/sleep.go<>gopl.io/ch7/sleep)
   ..figure > @l(gopl.io/ch7/sleep/sleep.go<>gopl.io/ch7/sleep)

#      ..src > go
#        var period = flag.Duration("period", 1*time.Second, "sleep period")
#
#        func main() {
#          flag.Parse()
#          fmt.Printf("Sleeping for %v...", *period)
#          time.Sleep(*period)
#          fmt.Println()
#        }
#      < src..
     ..src > go
       var period = flag.Duration("period", 1*time.Second, "sleep period")

       func main() {
         flag.Parse()
         fmt.Printf("Sleeping for %v...", *period)
         time.Sleep(*period)
         fmt.Println()
       }
     < src..


#    Before it goes to sleep it prints the time period. The @c(fmt) package calls
#    the @c(time.Duration)’s @c(String) method to print the period not as a number
#    of nanoseconds, but in a user-friendly notation:
   Antes de que se vaya a dormir imprime el periodo de tiempo. El paquete
   @c(fmt) llama al metodo @c(String) de @c(time.Duration) para imprimir el
   periodo no como un numero de nanosegundos, sino en una notacion facil de
   usar:

#    ..src > sh
#      $ go build gopl.io/ch7/sleep
#      $ ./sleep
#      Sleeping for 1s...
#    < src..
   ..src > sh
     $ go build gopl.io/ch7/sleep
     $ ./sleep
     Sleeping for 1s...
   < src..

#    By default, the sleep period is one second, but it can be controlled through
#    the @c(-period) command-line flag. The @c(flag.Duration) function creates a
#    flag variable of type @c(time.Duration) and allows the user to specify the
#    duration in a variety of user-friendly formats, including the same notation
#    printed by the @c(String) method. This symmetry of design leads to a nice
#    user interface.
   Por defecto, el periodo de sueño es de un segundo, pero se puede controlar a
   traves de la bandera de linea de comandos @c(-period). La funcion
   @c(flag.Duration) crea una variable de tipo bandera @c(time.Duration) y
   permite al usuario especificar la duracion en una variedad de formatos
   faciles de usar, incluyendo la misma notacion que imprime el metodo
   @c(String). Esta simetria de diseño conduce a una interfaz de usuario
   agradable.

#    ..src > sh
#      $ ./sleep -period 50ms
#      Sleeping for 50ms...
#      $ ./sleep -period 2m30s
#      Sleeping for 2m30s...
#      $ ./sleep -period 1.5h
#      Sleeping for 1h30m0s...
#      $ ./sleep -period "1 day"
#      invalid value "1 day" for flag -period: time: invalid duration 1 day
#    < src..
   ..src > sh
     $ ./sleep -period 50ms
     Sleeping for 50ms...
     $ ./sleep -period 2m30s
     Sleeping for 2m30s...
     $ ./sleep -period 1.5h
     Sleeping for 1h30m0s...
     $ ./sleep -period "1 day"
     invalid value "1 day" for flag -period: time: invalid duration 1 day
   < src..

#    Because duration-valued flags are so useful, this feature is built into the
#    @c(flag) package, but it’s easy to define new flag notations for our own data
#    types. We need only define a type that satisfies the @c(flag.Value)
#    interface, whose declaration is below:
   Debido a que las banderas de valor de duracion son tan utiles, esta
   caracteristica esta integrada en el paquete @c(flag), pero es facil de
   definir nuevas notaciones bandera para nuestros propios tipos de datos. Solo
   necesitamos definir un tipo que satisfaga la interfaz @c(flag.Value), cuya
   declaracion es la siguiente:

#    ..src > go
#      package flag
#
#      // Value is the interface to the value stored in a flag.
#      type Value interface {
#        String() string
#        Set(string) error
#      }
#    < src..
   ..src > go
     package flag

     // Value es la interfaz con el valor almacenado en un indicador.
     type Value interface {
       String() string
       Set(string) error
     }
   < src..

#    The @c(String) method formats the flag’s value for use in command-line help
#    messages; thus every @c(flag.Value) is also a @c(fmt.Stringer). The @c(Set)
#    method parses its string argument and updates the flag value. In effect, the
#    @c(Set) method is the inverse of the @c(String) method, and it is good
#    practice for them to use the same notation.
   El metodo @c(String) formatea el valor de la bandera para su uso en los
   mensajes de ayuda de linea de comandos; Asi, cada @c(flag.Value) es tambien
   un @c(fmt.Stringer). El metodo @c(Set) analiza su argumento de cadena y
   actualiza el valor del indicador. En efecto, el metodo @c(Set) es el inverso
   del metodo @c(String), y es una buena practica para que puedan utilizar la
   misma notacion.

#    Let’s define a @c(celsiusFlag) type that allows a temperature to be specified
#    in Celsius, or in Fahrenheit with an appropriate conversion. Notice that
#    @c(celsiusFlag) embeds a @c(Celsius) (@l(#Section 2.5<>§2.5)), thereby
#    getting a @c(String) method for free. To satisfy @c(flag.Value), we need only
#    declare the @c(Set) method:
   Vamos a definir un tipo @c(celsiusFlag) que permite una temperatura que se
   especifica en @c(Celsius) o en @c(Fahrenheit) con una conversion
   apropiada. Observe que @c(celsiusFlag) incorpora un@c(Celsius) (@l(#Seccion
   2.5<>§2.5)), consiguiendo asi un metodo @c(String) de forma gratuita. Para
   satisfacer @c(flag.Value), solo tenemos que declarar el metodo @c(Set):

#    ..figure > @l(gopl.io/ch7/tempconv/tempconv.go<>gopl.io/ch7/tempconv)
   ..figure > @l(gopl.io/ch7/tempconv/tempconv.go<>gopl.io/ch7/tempconv)

#      ..src > go
#        // *celsiusFlag satisfies the flag.Value interface.
#        type celsiusFlag struct{ Celsius }
#
#        func (f *celsiusFlag) Set(s string) error {
#          var unit string
#          var value float64
#          fmt.Sscanf(s, "%f%s", &value, &unit) // no error check needed
#          switch unit {
#          case "C", "°C":
#            f.Celsius = Celsius(value)
#            return nil
#          case "F", "°F":
#            f.Celsius = FToC(Fahrenheit(value))
#            return nil
#          }
#          return fmt.Errorf("invalid temperature %q", s)
#        }
#      < src..
     ..src > go
       // *celsiusFlag satisface la interfaz flag.Value.
       type celsiusFlag struct{ Celsius }

       func (f *celsiusFlag) Set(s string) error {
         var unit string
         var value float64
         fmt.Sscanf(s, "%f%s", &value, &unit) // no es necesario comprobar el error
         switch unit {
         case "C", "°C":
           f.Celsius = Celsius(value)
           return nil
         case "F", "°F":
           f.Celsius = FToC(Fahrenheit(value))
           return nil
         }
         return fmt.Errorf("invalid temperature %q", s)
       }
     < src..


#    The call to @c(fmt.Sscanf) parses a floating-point number (@c[value]) and a
#    string (@c[unit]) from the input @c(s). Although one must usually check
#    @c(Sscanf)’s error result, in this case we don’t need to because if there was
#    a problem, no switch case will match.
   La llamada a @c(fmt.Sscanf) analiza un numero de coma flotante (@c[value]) y
   una cadena (@c[unit]) de la entrada @c(s). Aunque por lo general se debe
   comprobar el resultado error de @c(Sscanf), en este caso, no lo necesitamos
   porque si habia un problema, ningun caso coincidira con el @c(swich).

#    The @c(CelsiusFlag) function below wraps it all up. To the caller, it returns
#    a pointer to the @c(Celsius) field embedded within the @c(celsiusFlag)
#    variable @c(f). The @c(Celsius) field is the variable that will be updated by
#    the @c(Set) method during flags processing. The call to @c(Var) adds the flag
#    to the application’s set of command-line flags, the global variable
#    @c(flag.CommandLine).  Programs with unusually complex command-line
#    interfaces may have several variables of this type. The call to @c(Var)
#    assigns a @c(*celsiusFlag) argument to a @c(flag.Value) parameter, causing
#    the compiler to check that @c(*celsiusFlag) has the necessary methods.
   La funcion @c(CelsiusFlag) a continuacion de lo envuelve todo. Al llamador,
   devuelve un puntero al campo @c(Celsius) enbebido dentro de la variable @c(f)
   de @c(celsiusFlag). El campo @c(Celsius) es la variable que sera actualizada
   por el metodo @c(Set) durante el procesamiento de banderas. La llamada a
   @c(Var) agrega la bandera al conjunto de banderas de linea de comando, la
   variable global @c(flag.CommandLine). Los programas con interfaces de linea
   de comandos inusualmente complejos pueden tener varias variables de este
   tipo. La llamada a @c(Var) asigna un argumento @c(*celsiusFlag) a un
   parametro @c(flag.Value), haciendo que el compilador compruebe que
   @c(*celsiusFlag) tiene los metodos necesarios.

#    ..src > go
#      // CelsiusFlag defines a Celsius flag with the specified name,
#      // default value, and usage, and returns the address of the flag variable.
#      // The flag argument must have a quantity and a unit, e.g., "100C".
#      func CelsiusFlag(name string, value Celsius, usage string) *Celsius {
#        f := celsiusFlag{value}
#        flag.CommandLine.Var(&f, name, usage)
#        return &f.Celsius
#      }
#    < src..
   ..src > go
     // CelsiusFlag define una bandera Celsius con el nombre especificado,
     // valor predeterminado, y uso, y devuelve la direccion de la variable flag.
     // El argumento flag debe tener una cantidad y una unidad, por ejemplo, "100C".
     func CelsiusFlag(name string, value Celsius, usage string) *Celsius {
       f := celsiusFlag{value}
       flag.CommandLine.Var(&f, name, usage)
       return &f.Celsius
     }
   < src..

#    Now we can start using the new flag in our programs:
   Ahora podemos empezar a usar la nueva bandera en nuestros programas:

#    ..figure > @l(gopl.io/ch7/tempflag/tempflag.go<>gopl.io/ch7/tempflag)
   ..figure > @l(gopl.io/ch7/tempflag/tempflag.go<>gopl.io/ch7/tempflag)

#      ..src > go
#        var temp = tempconv.CelsiusFlag("temp", 20.0, "the temperature")
#
#        func main() {
#          flag.Parse()
#          fmt.Println(*temp)
#        }
#      < src..

     ..src > go
       var temp = tempconv.CelsiusFlag("temp", 20.0, "the temperature")

       func main() {
         flag.Parse()
         fmt.Println(*temp)
       }
     < src..


#    Here’s a typical session:
   Aqui hay una sesion tipica:

#    ..src > sh
#      $ go build gopl.io/ch7/tempflag
#      $ ./tempflag
#      20°C
#      $ ./tempflag -temp -18C
#      -18°C
#      $ ./tempflag -temp 212°F
#      100°C
#      $ ./tempflag -temp 273.15K
#      invalid value "273.15K" for flag -temp: invalid temperature "273.15K"
#      Usage of ./tempflag:
#        -temp value
#              the temperature (default 20°C)
#      $ ./tempflag -help
#      Usage of ./tempflag:
#        -temp value
#              the temperature (default 20°C)
#    < src..
   ..src > sh
     $ go build gopl.io/ch7/tempflag
     $ ./tempflag
     20°C
     $ ./tempflag -temp -18C
     -18°C
     $ ./tempflag -temp 212°F
     100°C
     $ ./tempflag -temp 273.15K
     invalid value "273.15K" for flag -temp: invalid temperature "273.15K"
     Usage of ./tempflag:
       -temp value
             the temperature (default 20°C)
     $ ./tempflag -help
     Usage of ./tempflag:
       -temp value
             the temperature (default 20°C)
   < src..


#    @b(Exercise 7.6): Add support for Kelvin temperatures to @c(tempflag).
   @b(Ejercicio 7.6): Añadir soporte para temperaturas Kelvin a @c(tempflag).

#    @b(Exercise 7.7): Explain why the help message contains @c(°C) when the
#    default value of @c(20.0) does not.
   @b(Ejercicio 7.7): Explicar por que el mensaje de ayuda contiene @c(°C)
   cuando el valor por defecto de @c(20.0) no.

# ** Section 7.5 <> Interface Values
** Seccion 7.5 <> Valores de Interfaz

#    Conceptually, a value of an interface type, or @e(interface value), has two
#    components, a concrete type and a value of that type. These are called the
#    interface’s @e(dynamic type) and @e(dynamic value).
   Conceptualmente, un valor de un tipo de interfaz, o el valor de la interfaz,
   tiene dos componentes, un tipo concreto y un valor de ese tipo. Estos se
   llaman @e(tipo dinamico) de la interfaz y el @e(valor dinamico).

#    For a statically typed language like Go, types are a compile-time concept, so
#    a type is not a value. In our conceptual model, a set of values called
#    @e(type descriptors) provide information about each type, such as its name
#    and methods. In an interface value, the type component is represented by the
#    appropriate type descriptor.
   Para un lenguaje de tipo estatico como Go, los tipos son un concepto de
   compilacion, por lo que un tipo no es un valor. En nuestro modelo conceptual,
   un conjunto de valores denominados @e(descriptores de tipo) proporcionan
   informacion sobre cada tipo, como su nombre y metodos. En un valor de
   interfaz, el componente de tipo esta representado por el descriptor de tipo
   apropiado.

#    In the four statements below, the variable @c(w) takes on three different
#    values. (The initial and final values are the same.)
   En las siguientes cuatro declaraciones, la variable @c(w) toma tres valores
   diferentes. (Los valores inicial y final son los mismos.)

#    ..src > go
#      var w io.Writer
#      w = os.Stdout
#      w = new(bytes.Buffer)
#      w = nil
#    < src..
   ..src > go
     var w io.Writer
     w = os.Stdout
     w = new(bytes.Buffer)
     w = nil
   < src..

#    Let’s take a closer look at the value and dynamic behavior of @c(w) after
#    each statement. The first statement declares @c(w):
   Echemos un vistazo mas de cerca el valor y el comportamiento dinamico de
   @c(w) despues de cada declaracion. La primera sentencia declara a @c(w):

#    ..src > go
#      var w io.Writer
#    < src..
   ..src > go
     var w io.Writer
   < src..

#    In Go, variables are always initialized to a well-defined value, and
#    interfaces are no exception.  The zero value for an interface has both its
#    type and value components set to @c(nil) (Figure 7.1).
   En Go, las variables siempre se inicializan en un valor bien definido, y las
   interfaces no son la excepcion. El valor cero para una interfaz tiene ambos
   componentes de tipo y valor establecidos en @c(nil) (Figura 7.1).

#    ..figure > Figure 7.1. A nil interface value.
   ..figure > Figura 7.1. Una interfaz de valor nil.

#      ..art >
#              w
#              ┏━━━━━━━━━━━━┓
#         type ┃    nil     ┃
#              ┣━━━━━━━━━━━━┫
#        value ┃    nil     ┃
#              ┗━━━━━━━━━━━━┛
#      < art..
     ..art >
              w
              ┏━━━━━━━━━━━━┓
        tipo  ┃    nil     ┃
              ┣━━━━━━━━━━━━┫
       valor  ┃    nil     ┃
              ┗━━━━━━━━━━━━┛
     < art..

#    An interface value is described as nil or non-nil based on its dynamic type,
#    so this is a nil interface value. You can test whether an interface value is
#    nil using @c(w == nil) or @c(w != nil).  Calling any method of a nil
#    interface value causes a panic:
   Un valor de interfaz se describe como @c(nil) o no @c(nil) basado en su tipo
   dinamico, por lo que este es un valor de interfaz nil. Puede probar si un
   valor de interfaz es nil usando @c(w == nil) o @c(w != nil). Llamar a
   cualquier metodo de un valor de interfaz nil causa un panico:

#    ..src > go
#      w.Write([]byte("hello")) // panic: nil pointer dereference
#    < src..
   ..src > go
     w.Write([]byte("hello")) // panico: desreferencia de puntero nil
   < src..

#    The second statement assigns a value of type @c(*os.File) to @c(w):
   La segunda instruccion asigna un valor de tipo @c(*os.File) a @c(w):

#    ..src > go
#      w = os.Stdout
#    < src..
   ..src > go
     w = os.Stdout
   < src..

#    This assignment involves an implicit conversion from a concrete type to an
#    interface type, and is equivalent to the explicit conversion
#    @c[io.Writer(os.Stdout)]. A conversion of this kind, whether explicit or
#    implicit, captures the type and the value of its operand. The interface
#    value’s dynamic type is set to the type descriptor for the pointer type
#    @c(*os.File), and its dynamic value holds a copy of @c(os.Stdout), which is a
#    pointer to the @c(os.File) variable representing the standard output of the
#    process (Figure 7.2).
   Esta asignacion implica una conversion implicita de un tipo concreto para un
   tipo de interfaz, y es equivalente a la conversion explicita
   @c[io.Writer(os.Stdout)]. Una conversion de este tipo, ya sea explicita o
   implicita, captura el tipo y el valor de su operando. Tipo dinamico del valor
   de la interfaz se establece en el descriptor de tipo para el tipo de puntero
   @c(*os.File), y su valor dinamico contiene una copia de @c(os.Stdout), que es
   un puntero a la variable @c(os.File) que representa la salida estandar del
   proceso (Figura 7.2).

#    ..figure > Figure 7.2. An interface value containing an @c(*os.File) pointer.
   ..figure > Figura 7.2. Un valor de interfaz contiene un puntero @c(*os.File).

#      ..img  > img/Figure-7.2.jpg
     ..img  > img/Figure-7.2.jpg


#    Calling the @c(Write) method on an interface value containing an @c(*os.File)
#    pointer causes the @c[(*os.File).Write] method to be called. The call prints
#    @c("hello").
   Llamar al metodo @c(Write) en un valor de interfaz que contiene un puntero
   @c(*os.File) hace que se llama al metodo @c[(*os.File).Write]. La llamada
   imprime @c("hello").

#    ..src > go
#      w.Write([]byte("hello")) // "hello"
#    < src..
   ..src > go
     w.Write([]byte("hello")) // "hello"
   < src..

#    In general, we cannot know at compile time what the dynamic type of an
#    interface value will be, so a call through an interface must use @e(dynamic
#    dispatch). Instead of a direct call, the compiler must generate code to
#    obtain the address of the method named @c(Write) from the type descriptor,
#    then make an indirect call to that address. The receiver argument for the
#    call is a copy of the interface’s dynamic value, @c(os.Stdout). The effect is
#    as if we had made this call directly:
   En general, no podemos saber en tiempo de compilacion cual sera el tipo
   dinamico de un valor interfaz, por lo que una llamada a traves de una
   interfaz debe utilizar el @e(envio dinamico). En lugar de una llamada
   directa, el compilador debe generar codigo para obtener la direccion del
   metodo con nombre @c(Write) desde el descriptor de tipos, y luego, realizar
   una llamada indirecta a esa direccion. El argumento del receptor de la
   llamada es una copia del valor dinamico de la interfaz, @c(os.Stdout). El
   efecto es como si hubieramos hecho esta llamada directamente:

#    ..src > go
#      os.Stdout.Write([]byte("hello")) // "hello"
#    < src..
   ..src > go
     os.Stdout.Write([]byte("hello")) // "hello"
   < src..

#    The third statement assigns a value of type @c(*bytes.Buffer) to the
#    interface value:
   La tercera instruccion asigna un valor de tipo @c(*bytes.Buffer) al valor de
   la interfaz:

#    ..src > go
#      w = new(bytes.Buffer)
#    < src..
   ..src > go
     w = new(bytes.Buffer)
   < src..

#    The dynamic type is now @c(*bytes.Buffer) and the dynamic value is a pointer
#    to the newly allocated buffer (Figure 7.3).
   El tipo dinamico es ahora @c(*bytes.Buffer) y el valor dinamico es un puntero
   a al buffer recien asignado (Figura 7.3).

#    ..figure > Figure 7.3. An interface value containing a @c(*bytes.Buffer) pointer.
   ..figure > Figura 7.3. Un valor de interfaz que contiene un puntero @c(*bytes.Buffer)..

#      ..img  > img/Figure-7.3.jpg
     ..img  > img/Figure-7.3.jpg


#    A call to the @c(Write) method uses the same mechanism as before:
   Una llamada al metodo @c(Write) utiliza el mismo mecanismo que antes:

#    ..src > go
#      w.Write([]byte("hello")) // writes "hello" to the bytes.Buffer
#    < src..
   ..src > go
     w.Write([]byte("hello")) // escribe "hello" en bytes.Buffer
   < src..

#    This time, the type descriptor is @c(*bytes.Buffer), so the
#    @c[(*bytes.Buffer).Write] method is called, with the address of the buffer as
#    the value of the receiver parameter. The call appends @c("hello") to the
#    buffer.
   Esta vez, el tipo de descriptor es @c(*bytes.Buffer), por lo que se llama al
   metodo @c[(*bytes.Buffer).Write] con la direccion del buffer como el valor
   del parametro de receptor. La llamada agrega @c("hello") al buffer.

#    Finally, the fourth statement assigns @c(nil) to the interface value:
   Por ultimo, la cuarta instruccion asigna @c(nil) al valor de la interfaz:

#    ..src > go
#      w = nil
#    < src..
   ..src > go
     w = nil
   < src..

#    This resets both its components to @c(nil), restoring @c(w) to the same state
#    as when it was declared, which was shown in Figure 7.1.
   Esto restablece sus dos componentes a @c(nil), restaurando @c(w) al mismo
   estado que cuando fue declarado, que se muestra en la Figura 7.1.

#    An interface value can hold arbitrarily large dynamic values. For example,
#    the @c(time.Time) type, which represents an instant in time, is a struct type
#    with several unexported fields. If we create an interface value from it,
   Un valor de interfaz puede contener valores dinamicos arbitrariamente
   grandes. Por ejemplo, el tipo @c(time.Time), que representa un instante en el
   tiempo, es un tipo struct con varios campos no exportadas. Si creamos un
   valor de interfaz de ella,

#    ..src > go
#      var x interface{} = time.Now()
#    < src..
   ..src > go
     var x interface{} = time.Now()
   < src..

#    the result might look like Figure 7.4. Conceptually, the dynamic value always
#    fits inside the interface value, no matter how large its type. (This is only
#    a conceptual model; a realistic implementation is quite different.)
   El resultado podria ser similar al de la Figura 7.4. Conceptualmente, el
   valor dinamico siempre se ajusta dentro del valor de la interfaz, no importa
   cuan grande sea su tipo. (Esto es solo un modelo conceptual, una
   implementacion realista es muy diferente.)

#    ..figure > Figure 7.4. An interface value holding a @c(time.Time) struct.
   ..figure > Figura 7.4. Un valor de interfaz que contiene una estructura @c(time.Time).

#      ..img  > img/Figure-7.4.jpg
     ..img  > img/Figure-7.4.jpg


#    Interface values may be compared using @c(==) and @c(!=). Two interface
#    values are equal if both are nil, or if their dynamic types are identical and
#    their dynamic values are equal according to the usual behavior of @c(==) for
#    that type. Because interface values are comparable, they may be used as the
#    keys of a map or as the operand of a switch statement.
   Los valores de interfaz se pueden comparar usando @c(==) y @c(!=). Dos
   valores de la interfaz son iguales si ambos son nil, o si sus tipos dinamicos
   son identicos y sus valores dinamicos son iguales de acuerdo con el
   comportamiento usual de @c(==) para ese tipo. Dado que los valores de
   interfaz son comparables, pueden utilizarse como las claves de un mapa o como
   el operando de una instruccion @c(switch).

#    However, if two interface values are compared and have the same dynamic type,
#    but that type is not comparable (a slice, for instance), then the comparison
#    fails with a panic:
   Sin embargo, si se comparan dos valores de interfaz y tienen el mismo tipo
   dinamico, pero ese tipo no es comparable (por ejemplo, un slice), entonces la
   comparacion falla con un panico:

#    ..src > go
#      var x interface{} = []int{1, 2, 3}
#      fmt.Println(x == x) // panic: comparing uncomparable type []int
#    < src..
   ..src > go
     var x interface{} = []int{1, 2, 3}
     fmt.Println(x == x) // panico: comparacion de tipo incompatible []int
   < src..

#    In this respect, interface types are unusual. Other types are either safely
#    comparable (like basic types and pointers) or not comparable at all (like
#    slices, maps, and functions), but when comparing interface values or
#    aggregate types that contain interface values, we must be aware of the
#    potential for a panic. A similar risk exists when using interfaces as map
#    keys or switch operands. Only compare interface values if you are certain
#    that they contain dynamic values of comparable types.
   En este sentido, los tipos de interfaz son inusuales. Otros tipos son
   comparables de forma segura (como tipos basicos y punteros) o no son
   comparables en absoluto (como slices, mapas y funciones), pero cuando se
   comparan valores de interfaz o tipos agregados que contienen valores de
   interfaz, debemos estar conscientes del potencial de una panico. Un riesgo
   similar existe cuando se utilizan interfaces como claves de mapa u operandos
   de conmutador. Solo compare valores de interfaz si esta seguro de que
   contienen valores dinamicos de tipos comparables.

#    When handling errors, or during debugging, it is often helpful to report the
#    dynamic type of an interface value. For that, we use the @c(fmt) package’s
#    @c(%T) verb:
   Cuando se manejan errores o durante la depuracion, a menudo es util informar
   el tipo dinamico de un valor de interfaz. Para ello, utilizamos el verbo
   @c(%T) del paquete @c(fmt):

#    ..src > go
#      var w io.Writer
#      fmt.Printf("%T\n", w) // "<nil>"
#
#      w = os.Stdout
#      fmt.Printf("%T\n", w) // "*os.File"
#
#      w = new(bytes.Buffer)
#      fmt.Printf("%T\n", w) // "*bytes.Buffer"
#    < src..
   ..src > go
     var w io.Writer
     fmt.Printf("%T\n", w) // "<nil>"

     w = os.Stdout
     fmt.Printf("%T\n", w) // "*os.File"

     w = new(bytes.Buffer)
     fmt.Printf("%T\n", w) // "*bytes.Buffer"
   < src..

#    Internally, @c(fmt) uses reflection to obtain the name of the interface’s
#    dynamic type. We’ll look at reflection in @l(#Chapter 12).
   Internamente, @c(fmt) utiliza la reflexion para obtener el nombre del tipo
   dinamico de la interfaz. Veremos la reflexion en el @l(#Capitulo 12).

# *** Section 7.5.1 <> Caveat: An Interface Containing a Nil Pointer Is Non-Nil
*** Seccion 7.5.1 <> Advertencia: Una interfaz que Contiene un Puntero Nil es No-Nil

#     A nil interface value, which contains no value at all, is not the same as an
#     interface value containing a pointer that happens to be nil. This subtle
#     distinction creates a trap into which every Go programmer has stumbled.
    Un valor de interfaz nil, que no contiene ningun valor, no es el mismo que
    un valor de interfaz que contiene un puntero que pasa a ser nil. Esta sutil
    distincion crea una trampa en la que cada programador de Go se ha tropezado.

#     Consider the program below. With @c(debug) set to @c(true), the main
#     function collects the output of the function @c(f) in a @c(bytes.Buffer).
    Considere el programa a continuacion. Con @c(debug) establecido en @c(true), la
    funcion @c(main) recoge la salida de la funcion @c(f) en un @c(bytes.Buffer).

#     ..src > go
#       const debug = true
#
#       func main() {
#         var buf *bytes.Buffer
#         if debug {
#           buf = new(bytes.Buffer) // enable collection of output
#         }
#         f(buf)                    // NOTE: subtly incorrect!
#         if debug {
#           // ...use buf...
#         }
#       }
#
#       // If out is non-nil, output will be written to it.
#       func f(out io.Writer) {
#         // ...do something...
#         if out != nil {
#           out.Write([]byte("done!\n"))
#         }
#       }
#     < src..
    ..src > go
      const debug = true

      func main() {
        var buf *bytes.Buffer
        if debug {
          buf = new(bytes.Buffer) // Habilitar la recopilacion de la salida
        }
        f(buf)                    // NOTA: sutilmente incorrecto!
        if debug {
          // ...use buf...
        }
      }

      // Si out no es nil, la salida se escribe en este.
      func f(out io.Writer) {
        // ...hacer algo...
        if out != nil {
          out.Write([]byte("done!\n"))
        }
      }
    < src..

#     We might expect that changing @c(debug) to @c(false) would disable the
#     collection of the output, but in fact it causes the program to panic during
#     the @c(out.Write) call:
    Podriamos esperar que el cambio de @c(debug) a @c(false) podria desactivar
    la recoleccion de la salida, pero en realidad hace que el programa entre en
    panico durante la llamada @c(out.Write):

#     ..src > go
#       if out != nil {
#         out.Write([]byte("done!\n")) // panic: nil pointer dereference
#       }
#     < src..
    ..src > go
      if out != nil {
        out.Write([]byte("done!\n")) // panico: desreferencia de puntero nil
      }
    < src..

#     When @c(main) calls @c(f), it assigns a nil pointer of type
#     @c(*bytes.Buffer) to the @c(out) parameter, so the dynamic value of @c(out)
#     is @c(nil). However, its dynamic type is @c(*bytes.Buffer), meaning that
#     @c(out) is a non-nil interface containing a nil pointer value (Figure 7.5),
#     so the defensive check @c(out != nil) is still true.
    Cuando @c(main) llamada a @c(f), asigna un puntero nil del tipo
    @c(*bytes.Buffer) al parametro @c(out), por lo que el valor dinamico de
    @c(out) es @c(nil). Sin embargo, su tipo dinamico es @c(*bytes.Buffer), lo
    que significa que @c(out) es una interfaz no-nil que contiene un valor de
    puntero nulo (Figura 7.5), por lo que la comprobacion defensiva @c(out !=
    nil) sigue siendo verdadero.

#     ..figure > Figure 7.5. A non-nil interface containing a nil pointer.
    ..figure > Figura 7.5. Una interfaz no-nil que contiene un puntero nil.

#       ..art >
#               w
#               ┏━━━━━━━━━━━━━━━━━┓
#          type ┃  *bytes.Buffer  ┃
#               ┣━━━━━━━━━━━━━━━━━┫
#         value ┃       nil       ┃
#               ┗━━━━━━━━━━━━━━━━━┛
#       < art..
      ..art >
              w
              ┏━━━━━━━━━━━━━━━━━┓
         type ┃  *bytes.Buffer  ┃
              ┣━━━━━━━━━━━━━━━━━┫
        value ┃       nil       ┃
              ┗━━━━━━━━━━━━━━━━━┛
      < art..


#     As before, the dynamic dispatch mechanism determines that
#     @c[(*bytes.Buffer).Write] must be called but this time with a receiver value
#     that is nil. For some types, such as @c(*os.File), @c(nil) is a valid
#     receiver (@l(#Section 6.2.1<>§6.2.1)), but @c(*bytes.Buffer) is not among
#     them. The method is called, but it panics as it tries to access the buffer.
    Como antes, el mecanismo de envio dinamico determina que
    @c[(*bytes.Buffer).Write] debe ser llamado pero esta vez con un valor
    receptor que es nil. Para algunos tipos, como @c(*os.File), nil es un
    receptor valido (@l(#Seccion 6.2.1<>§6.2.1)), pero @c(*bytes.Buffer) no esta
    entre ellos. El metodo se llama, pero entra en panico al intentar acceder al
    bufer.

#     The problem is that although a nil @c(*bytes.Buffer) pointer has the methods
#     needed to satisfy the interface, it doesn’t satisfy the @e(behavioral)
#     requirements of the interface. In particular, the call violates the implicit
#     precondition of @c[(*bytes.Buffer).Write] that its receiver is not nil, so
#     assigning the nil pointer to the interface was a mistake. The solution is to
#     change the type of @c(buf) in @c(main) to @c(io.Writer), thereby avoiding
#     the assignment of the dysfunctional value to the interface in the first
#     place:
    El problema es que aunque un puntero @c(*bytes.Buffer) nulo tiene los
    metodos necesarios para satisfacer la interfaz, no satisface los requisitos
    de comportamiento de la interfaz. En particular, la llamada viola la
    condicion implicita de @c[(*bytes.Buffer).Write] de que receptor no sea nil,
    por lo que la asignacion de puntero nulo a la interfaz fue un error. La
    solucion es cambiar el tipo de @c(buf) en @c(main) a @c(io.Writer) ,
    evitando de ese modo la asignacion del valor disfuncional a la interfaz en
    el primer lugar:

#     ..src > go
#       var buf io.Writer
#       if debug {
#         buf = new(bytes.Buffer) // enable collection of output
#       }
#       f(buf) // OK
#     < src..
    ..src > go
      var buf io.Writer
      if debug {
        buf = new(bytes.Buffer) // Habilitar la recopilacion de la salida
      }
      f(buf) // OK
    < src..

#     Now that we’ve covered the mechanics of interface values, let’s take a look
#     at some more important interfaces from Go’s standard library. In the next
#     three sections, we’ll see how interfaces are used for sorting, web serving,
#     and error handling.
    Ahora que hemos cubierto la mecanica de los valores de interfaz, echemos un
    vistazo a algunas de las interfaces mas importantes de la libreria estandar.
    En las tres siguientes secciones, veremos como se utilizan las interfaces
    para ordenacion, para servir en la web y gestionar errores.

# ** Section 7.6 <> Sorting with @c(sort.Interface)
** Seccion 7.6 <> Ordenacion con @c(sort.Interface)

#    Like string formatting, sorting is a frequently used operation in many
#    programs. Although a minimal Quicksort can be written in about 15 lines, a
#    robust implementation is much longer, and it is not the kind of code we
#    should wish to write anew or copy each time we need it.
   Al igual que el formateo de cadenas, la ordenacion es una operacion
   frecuentemente utilizada en muchos programas. Aunque un Quicksort minimo se
   puede escribir en unas 15 lineas, una implementacion robusta es mucho mas
   larga, y no es el tipo de codigo que deberiamos escribir de nuevo o copiar
   cada vez que lo necesitamos.

#    Fortunately, the @c(sort) package provides in-place sorting of any sequence
#    according to any ordering function. Its design is rather unusual. In many
#    languages, the sorting algorithm is associated with the sequence data type,
#    while the ordering function is associated with the type of the elements. By
#    contrast, Go’s @c(sort.Sort) function assumes nothing about the
#    representation of either the sequence or its elements. Instead, it uses an
#    interface, @c(sort.Interface), to specify the contract between the generic
#    sort algorithm and each sequence type that may be sorted. An implementation
#    of this interface determines both the concrete representation of the
#    sequence, which is often a slice, and the desired ordering of its elements.
   Afortunadamente, el paquete @c(sort) provee in situ la ordenacion de
   cualquier sequencia de acuerdo con cualquier funcion de ordenacion. Su diseño
   es bastante inusual. En muchos lenguajes, el algoritmo de ordenacion esta
   asociado con el tipo de datos de la secuencia, mientras que la funcion de
   ordenacion esta asociada con el tipo de los elementos. Por el contrario, la
   funcion @c(sort.Sort) de Go, no asume nada sobre de la representacion de la
   secuencia o de sus elementos. En su lugar, utiliza una interfaz,
   @c(sort.Interface), para especificar el contrato entre el algoritmo de
   ordenacion generica y cada tipo de secuencia que puede ser ordenada. Una
   implementacion de esta interfaz determina tanto la representacion concreta de
   la secuencia, que es a menudo un slice, y el orden deseado de sus elementos.

#    An in-place sort algorithm needs three things—the length of the sequence, a
#    means of comparing two elements, and a way to swap two elements—so they are
#    the three methods of @c(sort.Interface):
   Un algoritmo de ordenacion in situ necesita tres cosas–la longitud de la
   secuencia, una forma de comparar dos elementos, y una manera de intercambiar
   dos elementos–por lo que son los tres metodos de @c(sort.Interface):

#    ..src > go
#      package sort
#
#      type Interface interface {
#        Len() int
#        Less(i, j int) bool // i, j are indices of sequence elements
#        Swap(i, j int)
#      }
#    < src..
   ..src > go
     package sort

     type Interface interface {
       Len() int
       Less(i, j int) bool // i, j son indices de la sequencia de elementos
       Swap(i, j int)
     }
   < src..

#    To sort any sequence, we need to define a type that implements these three
#    methods, then apply @c(sort.Sort) to an instance of that type. As perhaps the
#    simplest example, consider sorting a slice of strings. The new type
#    @c(StringSlice) and its @c(Len), @c(Less), and @c(Swap) methods are shown
#    below.
   Para ordenar cualquier secuencia, es necesario definir un tipo que implemente
   estos tres metodos, luego, aplicar @c(sort.Sort) a una instancia de ese
   tipo. Como quizas el ejemplo mas simple, considere clasificar un slice de
   cadenas. El nuevo tipo @c(StringSlice) y sus metodos @c(Len), @c(Less), y
   @c(Swap) se muestran a continuacion.

#    ..src > go
#      type StringSlice []string
#
#      func (p StringSlice) Len() int           { return len(p) }
#      func (p StringSlice) Less(i, j int) bool { return p[i] < p[j] }
#      func (p StringSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
#    < src..
   ..src > go
     type StringSlice []string

     func (p StringSlice) Len() int           { return len(p) }
     func (p StringSlice) Less(i, j int) bool { return p[i] < p[j] }
     func (p StringSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
   < src..

#    Now we can sort a slice of strings, @c(names), by converting the slice to a
#    @c(StringSlice) like this:
   Ahora podemos ordenar una slice de strings, @c(names), convirtiendo el slice
   a un @c(StringSlice) como aqui:

#    ..src > go
#      sort.Sort(StringSlice(names))
#    < src..
   ..src > go
     sort.Sort(StringSlice(names))
   < src..

#    The conversion yields a slice value with the same length, capacity, and
#    underlying array as @c(names) but with a type that has the three methods
#    required for sorting.
   La conversion produce un valor de slice con la misma longitud, capacidad, y
   arreglo subyacente como @c(names), pero con un tipo que tiene los tres
   metodos necesarios para la clasificacion.

#    Sorting a slice of strings is so common that the @c(sort) package provides
#    the @c(StringSlice) type, as well as a function called @c(Strings) so that
#    the call above can be simplified to @c[sort.Strings(names)].
   Ordenar un slice de strings es tan comun que el paquete sort proporciona el
   tipo @c(StringSlice), asi como una funcion llamada @c(Strings) por lo que la
   llamada anterior se puede simplificar a @c[sort.Strings(names)].

#    The technique here is easily adapted to other sort orders, for instance, to
#    ignore capitalization or special characters. (The Go program that sorts index
#    terms and page numbers for this book does this, with extra logic for Roman
#    numerals.) For more complicated sorting, we use the same idea, but with more
#    complicated data structures or more complicated implementations of the
#    @c(sort.Interface) methods.
   La tecnica aqui se adapta facilmente a otros ordenes de clasificacion, por
   ejemplo, para ignorar mayusculas o caracteres especiales. (El programa Go que
   ordena los terminos del indice y el numero de paginas de este libro hace
   esto, con una logica adicional para los numeros romanos.) Para una ordenacion
   mas complicada, usamos la misma idea, pero con estructuras de datos mas
   complicadas o implementaciones mas complicadas de los metodos
   @c(sort.Interface).

#    Our running example for sorting will be a music playlist, displayed as a
#    table. Each track is a single row, and each column is an attribute of that
#    track, like artist, title, and running time.  Imagine that a graphical user
#    interface presents the table, and that clicking the head of a column causes
#    the playlist to be sorted by that attribute; clicking the same column head
#    again reverses the order. Let’s look at what might happen in response to each
#    click.
   Nuestro ejemplo de ejecucion para la clasificacion sera una lista de
   reproduccion de musica, mostrada como una tabla. Cada pista es una sola fila
   y cada columna es un atributo de esa pista, como artista, titulo y tiempo de
   ejecucion. Imagine que una interfaz grafica de usuario presenta la tabla y
   que al hacer clic en la cabecera de una columna, la lista de reproduccion se
   clasifica por ese atributo; Haciendo clic en la misma columna, vuelve a
   invertir el orden. Echemos un vistazo a lo que podria suceder en respuesta a
   cada clic.

#    The variable @c(tracks) below contains a playlist. (One of the authors
#    apologizes for the other author’s musical tastes.) Each element is indirect,
#    a pointer to a @c(Track). Although the code below would work if we stored the
#    @c(Tracks) directly, the sort function will swap many pairs of elements, so
#    it will run faster if each element is a pointer, which is a single machine
#    word, instead of an entire @c(Track), which might be eight words or more.
   La siguiente variable @c(tracks) contiene una lista de reproduccion. (Uno de
   los autores se disculpa por los gustos musicales del otro autor.) Cada
   elemento es indirecto, un puntero a un @c(Track). Aunque el codigo de abajo
   funcionaria si almacenamos los @c(Tracks) directamente, la funcion de
   clasificacion intercambiara muchos pares de elementos, por lo que se
   ejecutara mas rapido si cada elemento es un puntero, que es una sola palabra
   de la maquina, en lugar de un @c(Track) completo , lo que podrian ser ocho o
   mas palabras.

#    ..figure > @l(gopl.io/ch7/sorting/main.go<>gopl.io/ch7/sorting)
   ..figure > @l(gopl.io/ch7/sorting/main.go<>gopl.io/ch7/sorting)

#      ..src > go
#        type Track struct {
#          Title  string
#          Artist string
#          Album  string
#          Year   int
#          Length time.Duration
#        }
#
#        var tracks = []*Track{
#          {"Go", "Delilah", "From the Roots Up", 2012, length("3m38s")},
#          {"Go", "Moby", "Moby", 1992, length("3m37s")},
#          {"Go Ahead", "Alicia Keys", "As I Am", 2007, length("4m36s")},
#          {"Ready 2 Go", "Martin Solveig", "Smash", 2011, length("4m24s")},
#        }
#
#        func length(s string) time.Duration {
#          d, err := time.ParseDuration(s)
#          if err != nil {
#            panic(s)
#          }
#          return d
#        }
#      < src..
     ..src > go
       type Track struct {
         Title  string
         Artist string
         Album  string
         Year   int
         Length time.Duration
       }

       var tracks = []*Track{
         {"Go", "Delilah", "From the Roots Up", 2012, length("3m38s")},
         {"Go", "Moby", "Moby", 1992, length("3m37s")},
         {"Go Ahead", "Alicia Keys", "As I Am", 2007, length("4m36s")},
         {"Ready 2 Go", "Martin Solveig", "Smash", 2011, length("4m24s")},
       }

       func length(s string) time.Duration {
         d, err := time.ParseDuration(s)
         if err != nil {
           panic(s)
         }
         return d
       }
     < src..


#    The @c(printTracks) function prints the playlist as a table. A graphical
#    display would be nicer, but this little routine uses the @c(text/tabwriter)
#    package to produce a table whose columns are neatly aligned and padded as
#    shown below. Observe that @c(*tabwriter.Writer) satisfies @c(io.Writer). It
#    collects each piece of data written to it; its @c(Flush) method formats the
#    entire table and writes it to @c(os.Stdout).
   La funcion @c(printTracks) imprime la lista de reproduccion como una
   tabla. Una pantalla grafica seria mejor, pero esta pequeña rutina utiliza el
   paquete @c(text/tabwriter) para producir una tabla cuyas columnas estan
   perfectamente alineadas y rellenas, como se muestra a continuacion. Observe
   que @c(*tabwriter.Writer) satisface @c(io.Writer). Recoge cada pieza de datos
   escrita en ella; su metodo @c(Flush) da formato a toda la tabla y lo escribe
   en @c(os.Stdout).

#    ..src > go
#      func printTracks(tracks []*Track) {
#        const format = "%v\t%v\t%v\t%v\t%v\t\n"
#        tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0)
#        fmt.Fprintf(tw, format, "Title", "Artist", "Album", "Year", "Length")
#        fmt.Fprintf(tw, format, "-----", "------", "-----", "----", "------")
#        for _, t := range tracks {
#          fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)
#        }
#        tw.Flush() // calculate column widths and print table
#      }
#    < src..
   ..src > go
     func printTracks(tracks []*Track) {
       const format = "%v\t%v\t%v\t%v\t%v\t\n"
       tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0)
       fmt.Fprintf(tw, format, "Title", "Artist", "Album", "Year", "Length")
       fmt.Fprintf(tw, format, "-----", "------", "-----", "----", "------")
       for _, t := range tracks {
         fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)
       }
       tw.Flush() // calculate column widths and print table
     }
   < src..

#    To sort the playlist by the @c(Artist) field, we define a new slice type with
#    the necessary @c(Len), @c(Less), and @c(Swap) methods, analogous to what we
#    did for @c(StringSlice).
   Para ordenar la lista de reproduccion por el campo @c(Artist), definimos un
   nuevo tipo de slice con los necesarios metodos @c(Len), @c(Less), y @c(Swap),
   analogos a lo que hicimos para @c(StringSlice).

#    ..src > go
#      type byArtist []*Track
#      func (x byArtist) Len() int           { return len(x) }
#      func (x byArtist) Less(i, j int) bool { return x[i].Artist < x[j].Artist }
#      func (x byArtist) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
#    < src..
   ..src > go
     type byArtist []*Track
     func (x byArtist) Len() int           { return len(x) }
     func (x byArtist) Less(i, j int) bool { return x[i].Artist < x[j].Artist }
     func (x byArtist) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
   < src..

#    To call the generic sort routine, we must first convert @c(tracks) to the new
#    type, @c(byArtist), that defines the order:
   Para llamar a la rutina de ordenacion generica, primero debemos convertir
   @c(tracks) al nuevo tipo, @c(byArtist), que define el orden:

#    ..src > go
#      sort.Sort(byArtist(tracks))
#    < src..
   ..src > go
     sort.Sort(byArtist(tracks))
   < src..

#    After sorting the slice by artist, the output from @c(printTracks) is
   Despues de ordenar el slice por artista, la salida de @c(printTracks) es

#    ..pre >
#      Title       Artist          Album              Year  Length
#      -----       ------          -----              ----  ------
#      Go Ahead    Alicia Keys     As I Am            2007  4m36s
#      Go          Delilah         From the Roots Up  2012  3m38s
#      Ready 2 Go  Martin Solveig  Smash              2011  4m24s
#      Go          Moby            Moby               1992  3m37s
#    < pre..
   ..pre >
     Title       Artist          Album              Year  Length
     -----       ------          -----              ----  ------
     Go Ahead    Alicia Keys     As I Am            2007  4m36s
     Go          Delilah         From the Roots Up  2012  3m38s
     Ready 2 Go  Martin Solveig  Smash              2011  4m24s
     Go          Moby            Moby               1992  3m37s
   < pre..


#    If the user requests @"(sort by artist) a second time, we’ll sort the tracks
#    in reverse. We needn’t define a new type @c(byReverseArtist) with an inverted
#    @c(Less) method, however, since the @c(sort) package provides a @c(Reverse)
#    function that transforms any sort order to its inverse.
   Si el usuario solicita @"(ordenar por artista) una segunda vez, vamos a
   resolver los tracks en orden inverso. No tenemos que definir un nuevo tipo
   @c(byReverseArtist) con un metodo @c(Less) invertido, ya que el paquete
   @c(sort) proporciona una funcion @c(Reverse) que transforma cualquier orden a
   su inversa.

#    ..src > go
#      sort.Sort(sort.Reverse(byArtist(tracks)))
#    < src..
   ..src > go
     sort.Sort(sort.Reverse(byArtist(tracks)))
   < src..

#    After reverse-sorting the slice by artist, the output from printTracks is
   Despues de la ordenacin inversa del slice por artista, la salida de
   @c(printTracks) es

#    ..pre >
#      Title       Artist          Album              Year  Length
#      -----       ------          -----              ----  ------
#      Go          Moby            Moby               1992  3m37s
#      Ready 2 Go  Martin Solveig  Smash              2011  4m24s
#      Go          Delilah         From the Roots Up  2012  3m38s
#      Go Ahead    Alicia Keys     As I Am            2007  4m36s
#    < pre..
   ..pre >
     Title       Artist          Album              Year  Length
     -----       ------          -----              ----  ------
     Go          Moby            Moby               1992  3m37s
     Ready 2 Go  Martin Solveig  Smash              2011  4m24s
     Go          Delilah         From the Roots Up  2012  3m38s
     Go Ahead    Alicia Keys     As I Am            2007  4m36s
   < pre..


#    The @c(sort.Reverse) function deserves a closer look since it uses
#    composition (@l(#Section 6.3<>§6.3)), which is an important idea. The
#    @c(sort) package defines an unexported type @c(reverse), which is a struct
#    that embeds a @c(sort.Interface). The @c(Less) method for @c(reverse) calls
#    the @c(Less) method of the embedded @c(sort.Interface) value, but with the
#    indices flipped, reversing the order of the sort results.
   La funcion @c(sort.Reverse) merece un vistazo mas de cerca, ya que utiliza la
   composicion (@l(#Seccion 6.3<>§6.3)), que es una idea importante. El paquete
   @c(sort) define un tipo no exportado @c(reverse), que es una estructura que
   enbebe un @c(sort.Interface). El metodo @c(Less) de @c(reverse) llama al
   @c(Less) del varol enbebido @c(sort.Interface), pero con los indices
   invertidos, invirtiendo el orden de los resultados.

#    ..src > go
#      package sort
#
#      type reverse struct{ Interface } // that is, sort.Interface
#
#      func (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) }
#
#      func Reverse(data Interface) Interface { return reverse{data} }
#    < src..
   ..src > go
     package sort

     type reverse struct{ Interface } // that is, sort.Interface

     func (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) }

     func Reverse(data Interface) Interface { return reverse{data} }
   < src..

#    @c(Len) and @c(Swap), the other two methods of @c(reverse), are implicitly
#    provided by the original @c(sort.Interface) value because it is an embedded
#    field. The exported function @c(Reverse) returns an instance of the
#    @c(reverse) type that contains the original @c(sort.Interface) value.
   @c(Len) y @c(Swap), los otros dos metodos de @c(reverse), son proporcionados
   implicitamente por el valor original @c(sort.Interface) porque es un campo
   enbebido. La funcion exportada @c(Reverse) devuelve una instancia del tipo
   @c(reverse) que contiene el valor original @c(sort.Interface).

#    To sort by a different column, we must define a new type, such as @c(byYear):
   Para ordenar por una columna diferente, hay que definir un nuevo tipo, como
   @c(byYear):

#    ..src > go
#      type byYear []*Track
#
#      func (x byYear) Len() int           { return len(x) }
#      func (x byYear) Less(i, j int) bool { return x[i].Year < x[j].Year }
#      func (x byYear) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
#    < src..
   ..src > go
     type byYear []*Track

     func (x byYear) Len() int           { return len(x) }
     func (x byYear) Less(i, j int) bool { return x[i].Year < x[j].Year }
     func (x byYear) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
   < src..

#    After sorting @c(tracks) by year using @c[sort.Sort(byYear(tracks))],
#    @c(printTracks) shows a chronological listing:
   Despues de ordenamos los @c(tracks) por año usando
   @c[sort.Sort(byYear(tracks))], @c(printTracks) muestra una lista cronologica:

#    ..pre >
#      Title       Artist          Album              Year  Length
#      -----       ------          -----              ----  ------
#      Go          Moby            Moby               1992  3m37s
#      Go Ahead    Alicia Keys     As I Am            2007  4m36s
#      Ready 2 Go  Martin Solveig  Smash              2011  4m24s
#      Go          Delilah         From the Roots Up  2012  3m38s
#    < pre..
   ..pre >
     Title       Artist          Album              Year  Length
     -----       ------          -----              ----  ------
     Go          Moby            Moby               1992  3m37s
     Go Ahead    Alicia Keys     As I Am            2007  4m36s
     Ready 2 Go  Martin Solveig  Smash              2011  4m24s
     Go          Delilah         From the Roots Up  2012  3m38s
   < pre..

#    For every slice element type and every ordering function we need, we declare
#    a new implementation of @c(sort.Interface). As you can see, the @c(Len) and
#    @c(Swap) methods have identical definitions for all slice types. In the next
#    example, the concrete type @c(customSort) combines a slice with a function,
#    letting us define a new sort order by writing only the comparison function.
#    Incidentally, the concrete types that implement @c(sort.Interface) are not
#    always slices; @c(customSort) is a struct type.
   Para cada tipo de slice y cada funcion de ordenacion necesitamos, declarar
   una nueva implementacion de @c(sort.Interface). Como se puede ver, los
   metodos @c(Len) y @c(Swap) tienen definiciones identicas para todos los tipos
   de slice. En el siguiente ejemplo, el tipo concreto @c(customSort) combina un
   slice con una funcion, permitiendo definir un nuevo orden de clasificacion
   escribiendo unicamente la funcion de comparacion. Por cierto, los tipos
   concretos que implementan @c(sort.Interface) no siempre son slices;
   @c(customSort) es un tipo struct.

#    ..src > go
#      type customSort struct {
#        t    []*Track
#        less func(x, y *Track) bool
#      }
#
#      func (x customSort) Len() int           { return len(x.t) }
#      func (x customSort) Less(i, j int) bool { return x.less(x.t[i], x.t[j]) }
#      func (x customSort) Swap(i, j int)      { x.t[i], x.t[j] = x.t[j], x.t[i] }
#    < src..
   ..src > go
     type customSort struct {
       t    []*Track
       less func(x, y *Track) bool
     }

     func (x customSort) Len() int           { return len(x.t) }
     func (x customSort) Less(i, j int) bool { return x.less(x.t[i], x.t[j]) }
     func (x customSort) Swap(i, j int)      { x.t[i], x.t[j] = x.t[j], x.t[i] }
   < src..

#    Let’s define a multi-tier ordering function whose primary sort key is the
#    @c(Title), whose secondary key is the @c(Year), and whose tertiary key is the
#    running time, @c(Length). Here’s the call to @c(Sort) using an anonymous
#    ordering function:
   Vamos a definir una funcion de ordenamiento de multiples niveles cuya clave
   de ordenacion principal es @c(Title), cuya clave secundaria es @c(Year), y
   cuya clave terciaria es el tiempo de ejecucion, @c(Length). Aqui esta la
   llamada a @c(Sort) usando una funcion de ordenacion anonima:

#    ..src > go
#      sort.Sort(customSort{tracks, func(x, y *Track) bool {
#        if x.Title != y.Title {
#          return x.Title < y.Title
#        }
#        if x.Year != y.Year {
#          return x.Year < y.Year
#        }
#        if x.Length != y.Length {
#          return x.Length < y.Length
#        }
#        return false
#      }})
#    < src..
   ..src > go
     sort.Sort(customSort{tracks, func(x, y *Track) bool {
       if x.Title != y.Title {
         return x.Title < y.Title
       }
       if x.Year != y.Year {
         return x.Year < y.Year
       }
       if x.Length != y.Length {
         return x.Length < y.Length
       }
       return false
     }})
   < src..

#    And here’s the result. Notice that the tie between the two tracks titled
#    @"(Go) is broken in favor of the older one.
   Y aqui esta el resultado. Observe que el empate entre las dos pistas
   tituladas @"(Go) se rompe en favor de la mas antigua.

#    ..pre >
#      Title       Artist          Album              Year  Length
#      -----       ------          -----              ----  ------
#      Go          Moby            Moby               1992  3m37s
#      Go          Delilah         From the Roots Up  2012  3m38s
#      Go Ahead    Alicia Keys     As I Am            2007  4m36s
#      Ready 2 Go  Martin Solveig  Smash              2011  4m24s
#    < pre..
   ..pre >
     Title       Artist          Album              Year  Length
     -----       ------          -----              ----  ------
     Go          Moby            Moby               1992  3m37s
     Go          Delilah         From the Roots Up  2012  3m38s
     Go Ahead    Alicia Keys     As I Am            2007  4m36s
     Ready 2 Go  Martin Solveig  Smash              2011  4m24s
   < pre..

#    Although sorting a sequence of length @m(n) requires @m[O(n log n)]
#    comparison operations, testing whether a sequence is already sorted requires
#    at most @m(n-1) comparisons. The @c(IsSorted) function from the @c(sort)
#    package checks this for us. Like @c(sort.Sort), it abstracts both the
#    sequence and its ordering function using @c(sort.Interface), but it never
#    calls the @c(Swap) method: This code demonstrates the @c(IntsAreSorted) and
#    @c(Ints) functions and the @c(IntSlice) type:
   Aunque la clasificacion de una secuencia de longitud @m(n) requiere @m[O(n
   log n)] operaciones de comparacion, probar si una secuencia ya esta ordenada
   requiere al menos @m(n-1) comparaciones. La funcion @c(IsSorted) del paquete
   @c(sort) comprueba esto para nosotros. Al igual que @c(sort.Sort), abstrae
   tanto la secuencia y su funcion de ordenacion utilizando @c(sort.Interface),
   pero nunca llama al metodo @c(Swap): Este codigo muestra las funciones
   @c(IntsAreSorted) y @c(Ints) y el tipo @c(IntSlice):

#    ..src > go
#      values := []int{3, 1, 4, 1}
#      fmt.Println(sort.IntsAreSorted(values)) // "false"
#      sort.Ints(values)
#      fmt.Println(values)                     // "[1 1 3 4]"
#      fmt.Println(sort.IntsAreSorted(values)) // "true"
#      sort.Sort(sort.Reverse(sort.IntSlice(values)))
#      fmt.Println(values)                     // "[4 3 1 1]"
#      fmt.Println(sort.IntsAreSorted(values)) // "false"
#    < src..
   ..src > go
     values := []int{3, 1, 4, 1}
     fmt.Println(sort.IntsAreSorted(values)) // "false"
     sort.Ints(values)
     fmt.Println(values)                     // "[1 1 3 4]"
     fmt.Println(sort.IntsAreSorted(values)) // "true"
     sort.Sort(sort.Reverse(sort.IntSlice(values)))
     fmt.Println(values)                     // "[4 3 1 1]"
     fmt.Println(sort.IntsAreSorted(values)) // "false"
   < src..


#    For convenience, the @c(sort) package provides versions of its functions and
#    types specialized for @c([]int), @c([]string), and @c([]float64) using their
#    natural orderings. For other types, such as @c([]int64) or @c([]uint), we’re
#    on our own, though the path is short.
   Por conveniencia, el paquete @c(sort) proporciona versiones de sus funciones
   y tipos especializados para c([]int), @c([]string), y @c([]float64) usando
   sus ordenamientos naturales. Para otros tipos, como @c([]int64) o @c([]uint),
   estamos por nuestra cuenta, aunque el camino es corto.

#    @b(Exercise 7.8): Many GUIs provide a table widget with a stateful multi-tier
#    sort: the primary sort key is the most recently clicked column head, the
#    secondary sort key is the second-most recently clicked column head, and so
#    on. Define an implementation of @c(sort.Interface) for use by such a
#    table. Compare that approach with repeated sorting using @c(sort.Stable).
   @b(Ejercicio 7.8): Muchas interfaces graficas de usuario proporcionan un
   widget de tabla con ordenacion de multiple nivel: la clave de ordenacion
   principal es la primer columna, la segunda clae de ordenacion es la segunda
   columna, y asi sucesivamente. Defina una implementacion de @c(sort.Interface)
   para utilizar con dicha tabla. Compare este enfoque con repetidos
   ordenamientos utilizando @c(sort.Stable).

#    @b(Exercise 7.9): Use the @c(html/template) package (@l(#Section 4.6<>§4.6))
#    to replace @c(printTracks) with a function that displays the tracks as an
#    HTML table. Use the solution to the previous exercise to arrange that each
#    click on a column head makes an HTTP request to sort the table.
   @b(Ejercicio 7.9): Utilice el paquete @c(html/template) (@l(#Seccion
   4.6<>§4.6)) para reemplazar @c(printTracks) con una funcion que muestre los
   tracks como una tabla HTML. Utilice la solucion del ejercicio anterior para
   organizar que cada clic en un encabezado de columna haga una solicitud HTTP
   para ordenar la tabla.

#    @b(Exercise 7.10): The @c(sort.Interface) type can be adapted to other
#    uses. Write a function @c[IsPalindrome(s sort.Interface) bool] that reports
#    whether the sequence @c(s) is a palindrome, in other words, reversing the
#    sequence would not change it. Assume that the elements at indices @c(i) and
#    @c(j) are equal if @c[!s.Less(i, j) && !s.Less(j, i)].
   @b(Ejercicio 7.10): El tipo @c(sort.Interface) se puede adaptar a otros
   usos. Escriba una funcion @c[IsPalindrome(s sort.Interface) bool] que informe
   si la secuencia @c(s) es un palindromo, es decir, la inversion de la
   secuencia no lo cambiaria. Suponga que los elementos en los indices @c(i) y
   @c(j) son iguales si @c[!s.Less(i, j) && !s.Less(j, i)].

# ** Section 7.7 <> The @c(http.Handler) Interface
** Seccion 7.7 <> La Interfaz @c(http.Handler)

#    In @l(#Chapter 1), we saw a glimpse of how to use the @c(net/http) package to
#    implement web clients (@l(#Section 1.5<>§1.5)) and servers (@l(#Section
#    1.7<>§1.7)). In this section, we’ll look more closely at the server API,
#    whose foundation is the @c(http.Handler) interface:
   En el capitulo 1 , vimos una idea de como utilizar el paquete @c(net/http)
   para implementar clientes web (@l(#Seccion 1.5<>§1.5)) y servidores
   (@l(#Seccion 1.7<>§1.7)). En esta seccion, vamos a ver mas de cerca la API
   del servidor, cuyo fundamento es la interfaz @c(http.Handler):

#    ..figure > @c(net/http)
   ..figure > @c(net/http)

#      ..src > go
#        package http
#
#        type Handler interface {
#          ServeHTTP(w ResponseWriter, r *Request)
#        }
#
#        func ListenAndServe(address string, h Handler) error
#      < src..
     ..src > go
       package http

       type Handler interface {
         ServeHTTP(w ResponseWriter, r *Request)
       }

       func ListenAndServe(address string, h Handler) error
     < src..

#    The @c(ListenAndServe) function requires a server address, such as
#    @c("localhost:8000"), and an instance of the @c(Handler) interface to which
#    all requests should be dispatched. It runs forever, or until the server fails
#    (or fails to start) with an error, always non-nil, which it returns.
   La función @c(ListenAndServe) requiere una dirección de servidor, como
   @c("localhost:8000"), y una instancia de la interfaz @c(Handler) a la que
   todas las solicitudes deben enviarse. Se ejecuta para siempre, o hasta que el
   servidor falla (o no se inicia) con un error, que siempre devuelve no-nil.

#    Imagine an e-commerce site with a database mapping the items for sale to
#    their prices in dollars. The program below shows the simplest imaginable
#    implementation. It models the inventory as a map type, @c(database), to which
#    we’ve attached a @c(ServeHTTP) method so that it satisfies the
#    @c(http.Handler) interface. The handler ranges over the map and prints the
#    items.
   Imagine un sitio de comercio electronico con una base de datos de los
   articulos a la venta con sus precios en dolares. El siguiente programa
   muestra la implementacion imaginable mas sencilla. Modelos del inventario
   como un tipo de mapa, @c(database) , a la que ha adjuntado un metodo
   @c(ServeHTTP) para que satisfaga la interfaz @c(http.Handler). El controlador
   se extiende sobre el mapa e imprime los elementos.

#    ..figure > @l(gopl.io/ch7/http1/main.go<>gopl.io/ch7/http1)
   ..figure > @l(gopl.io/ch7/http1/main.go<>gopl.io/ch7/http1)

#      ..src > go
#        func main() {
#          db := database{"shoes": 50, "socks": 5}
#          log.Fatal(http.ListenAndServe("localhost:8000", db))
#        }
#
#        type dollars float32
#
#        func (d dollars) String() string { return fmt.Sprintf("$%.2f", d) }
#
#        type database map[string]dollars
#
#        func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
#          for item, price := range db {
#            fmt.Fprintf(w, "%s: %s\n", item, price)
#          }
#        }
#      < src..
     ..src > go
       func main() {
         db := database{"shoes": 50, "socks": 5}
         log.Fatal(http.ListenAndServe("localhost:8000", db))
       }

       type dollars float32

       func (d dollars) String() string { return fmt.Sprintf("$%.2f", d) }

       type database map[string]dollars

       func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
         for item, price := range db {
           fmt.Fprintf(w, "%s: %s\n", item, price)
         }
       }
     < src..


#    If we start the server,
   Si iniciamos el servidor,

#    ..src > sh
#      $ go build gopl.io/ch7/http1
#      $ ./http1 &
#    < src..
   ..src > sh
     $ go build gopl.io/ch7/http1
     $ ./http1 &
   < src..

#    then connect to it with the @$(fetch) program from @l(#Section 1.5) (or a web
#    browser if you prefer), we get the following output:
   luego conectamos con el con el programa @$(fetch) de la @l(#Seccion 1.5) (o
   con un navegador web, si lo prefiere), obtenemos el siguiente resultado:

#    ..src > sh
#      $ go build gopl.io/ch1/fetch
#      $ ./fetch http://localhost:8000
#      shoes: $50.00
#      socks: $5.00
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetch
     $ ./fetch http://localhost:8000
     shoes: $50.00
     socks: $5.00
   < src..

#    So far, the server can only list its entire inventory and will do this for
#    every request, regardless of URL. A more realistic server defines multiple
#    different URLs, each triggering a different behavior. Let’s call the existing
#    one @c(/list) and add another one called @c(/price) that reports the price of
#    a single item, specified as a request parameter like @c(/price?item=socks).
   Hasta ahora, el servidor solo puede enumerar su inventario completo y lo hara
   para cada solicitud, independientemente de la URL. Un servidor mas realista
   define varias URL diferentes, cada una desencadenando un comportamiento
   diferente. Vamos a llamar al comportamiento existente @c(/list) y añadamos
   otra que se llame @c(/price) que informa el precio de un solo articulo,
   especificado como un parametro de la peticion, por ejemplo @c(/price?item=socks).

#    ..figure > @l(gopl.io/ch7/http2/main.go<>gopl.io/ch7/http2)
   ..figure > @l(gopl.io/ch7/http2/main.go<>gopl.io/ch7/http2)

#      ..src > go
#        func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
#          switch req.URL.Path {
#          case "/list":
#            for item, price := range db {
#              fmt.Fprintf(w, "%s: %s\n", item, price)
#            }
#          case "/price":
#            item := req.URL.Query().Get("item")
#            price, ok := db[item]
#            if !ok {
#              w.WriteHeader(http.StatusNotFound) // 404
#              fmt.Fprintf(w, "no such item: %q\n", item)
#              return
#            }
#            fmt.Fprintf(w, "%s\n", price)
#          default:
#            w.WriteHeader(http.StatusNotFound)  // 404
#            fmt.Fprintf(w, "no such page: %s\n", req.URL)
#          }
#        }
#      < src..
     ..src > go
       func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
         switch req.URL.Path {
         case "/list":
           for item, price := range db {
             fmt.Fprintf(w, "%s: %s\n", item, price)
           }
         case "/price":
           item := req.URL.Query().Get("item")
           price, ok := db[item]
           if !ok {
             w.WriteHeader(http.StatusNotFound) // 404
             fmt.Fprintf(w, "no such item: %q\n", item)
             return
           }
           fmt.Fprintf(w, "%s\n", price)
         default:
           w.WriteHeader(http.StatusNotFound)  // 404
           fmt.Fprintf(w, "no such page: %s\n", req.URL)
         }
       }
     < src..


#    Now the handler decides what logic to execute based on the path component of
#    the URL, @c(req.URL.Path). If the handler doesn’t recognize the path, it
#    reports an HTTP error to the client by calling
#    @c[w.WriteHeader(http.StatusNotFound)]; this must be done before writing any
#    text to @c(w). (Incidentally, @c(http.ResponseWriter) is another interface.
#    It augments @c(io.Writer) with methods for sending HTTP response headers.)
#    Equivalently, we could use the @c(http.Error) utility function:
   Ahora el controlador decide que logica hay que usar basado en el componente
   de la ruta de la URL, @c(req.URL.Path). Si el controlador no reconoce la
   ruta, se informa de un error HTTP al cliente llamando a
   @c[w.WriteHeader(http.StatusNotFound)]; esto debe hacerse antes de escribir
   cualquier texto a @c(w). (Por cierto, @c[http.ResponseWriter] es otra
   interfaz. aumenta a @c(io.Writer) con metodos para enviar cabeceras de
   respuesta HTTP.) De manera equivalente, podriamos utilizar la funcion de
   utilidad @c(http.Error):

#    ..src > go
#      msg := fmt.Sprintf("no such page: %s\n", req.URL)
#      http.Error(w, msg, http.StatusNotFound) // 404
#    < src..
   ..src > go
     msg := fmt.Sprintf("no such page: %s\n", req.URL)
     http.Error(w, msg, http.StatusNotFound) // 404
   < src..

#    The case for @c(/price) calls the URL’s @c(Query) method to parse the HTTP
#    request parameters as a map, or more precisely, a multimap of type
#    @c(url.Values) (@l(#Section 6.2.1<>§6.2.1)) from the @c(net/url) package. It
#    then finds the first @c(item) parameter and looks up its price. If the item
#    wasn’t found, it reports an error.
   El argumento @c(/price) llama al metodo @c(Query) de la URL para analizar los
   parametros de la peticion HTTP como un mapa, o mas precisamente, un mapa
   multiple de tipo @c(url.Values) (@l(#Seccion 6.2.1<>§6.2.1)) del paquete
   @c(net/url). A continuacion, busca el primer parametro @c(item) y mira su
   precio. Si no se encontro el elemento, informa de un error.

#    Here’s an example session with the new server:
   He aqui una sesion de ejemplo con el nuevo servidor:

#    ..src > sh
#      $ go build gopl.io/ch7/http2
#      $ go build gopl.io/ch1/fetch
#      $ ./http2 &
#      $ ./fetch http://localhost:8000/list
#      shoes: $50.00
#      socks: $5.00
#      $ ./fetch http://localhost:8000/price?item=socks
#      $5.00
#      $ ./fetch http://localhost:8000/price?item=shoes
#      $50.00
#      $ ./fetch http://localhost:8000/price?item=hat
#      no such item: "hat"
#      $ ./fetch http://localhost:8000/help
#      no such page: /help
#    < src..
   ..src > sh
     $ go build gopl.io/ch7/http2
     $ go build gopl.io/ch1/fetch
     $ ./http2 &
     $ ./fetch http://localhost:8000/list
     shoes: $50.00
     socks: $5.00
     $ ./fetch http://localhost:8000/price?item=socks
     $5.00
     $ ./fetch http://localhost:8000/price?item=shoes
     $50.00
     $ ./fetch http://localhost:8000/price?item=hat
     no such item: "hat"
     $ ./fetch http://localhost:8000/help
     no such page: /help
   < src..

#    Obviously we could keep adding cases to @c(ServeHTTP), but in a realistic
#    application, it’s convenient to define the logic for each case in a separate
#    function or method. Furthermore, related URLs may need similar logic; several
#    image files may have URLs of the form @c(/images/*.png), for instance. For
#    these reasons, @c(net/http) provides @c(ServeMux), a @e(request multiplexer),
#    to simplify the association between URLs and handlers. A @c(ServeMux)
#    aggregates a collection of @c(http.Handlers) into a single @c(http.Handler).
#    Again, we see that different types satisfying the same interface are
#    @e(substitutable): the web server can dispatch requests to any
#    @c(http.Handler), regardless of which concrete type is behind it.
   Obviamente podriamos seguir añadiendo casos a @c(ServeHTTP), pero en una
   aplicacion real, es conveniente definir la logica para cada caso en una
   funcion o un metodo independiente. Ademas, las URL relacionadas pueden
   necesitar una logica similar; varios archivos de imagen pueden tener URLs de
   tipo @c(/images/*.png), por ejemplo. Por estas razones, @c(net/http)
   proporciona @c(ServeMux), una solicitud multiplexor, para simplificar la
   asociacion entre las direcciones URL y manipuladores. @c(ServeMux) agrega una
   coleccion de @c(http.Handlers) en un solo @c(http.Handler). Una vez mas,
   vemos que los diferentes tipos que satisfacen la misma interfaz son
   @e(sustituibles): el servidor web es capaz de consultar a cualquier
   @c(http.Handler), independientemente del tipo concreto esta detras de el.

#    For a more complex application, several @c(ServeMuxes) may be composed to
#    handle more intricate dispatching requirements. Go doesn’t have a canonical
#    web framework analogous to Ruby’s Rails or Python’s Django. This is not to
#    say that such frameworks don’t exist, but the building blocks in Go’s
#    standard library are flexible enough that frameworks are often unnecessary.
#    Furthermore, although frameworks are convenient in the early phases of a
#    project, their additional complexity can make longer-term maintenance harder.
   Para una aplicacion mas compleja, varios @c(ServeMuxes) pueden estar
   compuestos para manejar requerimientos de secuenciacion mas intrincados. Go
   no tiene un framework web canonico analogo a Rails de Ruby o a Django de
   Python. Esto no quiere decir que tales frameworks no existan, pero los
   bloques de construccion en la libreria estandar de Go son lo suficientemente
   flexibles como para que los frameworks sean a menudo innecesarios. Ademas,
   aunque los frameworks son convenientes en las primeras fases de un proyecto,
   su complejidad adicional puede hacer que el mantenimiento a largo plazo sea
   mas dificil.

#    In the program below, we create a @c(ServeMux) and use it to associate the
#    URLs with the corresponding handlers for the @c(/list) and @c(/price)
#    operations, which have been split into separate methods. We then use the
#    @c(ServeMux) as the main handler in the call to @c(ListenAndServe).
   En el siguiente programa, creamos un @c(ServeMux) y lo usamos para asociar
   las direcciones URL con los controladores correspondientes para las
   operaciones @c(/list) y @c(/price,) que se han dividido en metodos
   separados. A continuacion, utilizamos @c(ServeMux) como el controlador
   principal en la llamada a @c(ListenAndServe).

#    ..figure > @l(gopl.io/ch7/http3/main.go<>gopl.io/ch7/http3)
   ..figure > @l(gopl.io/ch7/http3/main.go<>gopl.io/ch7/http3)

#      ..src > go
#        func main() {
#          db := database{"shoes": 50, "socks": 5}
#          mux := http.NewServeMux()
#          mux.Handle("/list", http.HandlerFunc(db.list))
#          mux.Handle("/price", http.HandlerFunc(db.price))
#          log.Fatal(http.ListenAndServe("localhost:8000", mux))
#        }
#
#        type database map[string]dollars
#
#        func (db database) list(w http.ResponseWriter, req *http.Request) {
#          for item, price := range db {
#            fmt.Fprintf(w, "%s: %s\n", item, price)
#          }
#        }
#
#        func (db database) price(w http.ResponseWriter, req *http.Request) {
#          item := req.URL.Query().Get("item")
#          price, ok := db[item]
#          if !ok {
#            w.WriteHeader(http.StatusNotFound) // 404
#            fmt.Fprintf(w, "no such item: %q\n", item)
#            return
#          }
#          fmt.Fprintf(w, "%s\n", price)
#        }
#      < src..
     ..src > go
       func main() {
         db := database{"shoes": 50, "socks": 5}
         mux := http.NewServeMux()
         mux.Handle("/list", http.HandlerFunc(db.list))
         mux.Handle("/price", http.HandlerFunc(db.price))
         log.Fatal(http.ListenAndServe("localhost:8000", mux))
       }

       type database map[string]dollars

       func (db database) list(w http.ResponseWriter, req *http.Request) {
         for item, price := range db {
           fmt.Fprintf(w, "%s: %s\n", item, price)
         }
       }

       func (db database) price(w http.ResponseWriter, req *http.Request) {
         item := req.URL.Query().Get("item")
         price, ok := db[item]
         if !ok {
           w.WriteHeader(http.StatusNotFound) // 404
           fmt.Fprintf(w, "no such item: %q\n", item)
           return
         }
         fmt.Fprintf(w, "%s\n", price)
       }
     < src..


#    Let’s focus on the two calls to @c(mux.Handle) that register the handlers. In
#    the first one, @c(db.list) is a method value (@l(#Section 6.4<>§6.4)), that
#    is, a value of type
   Centremonos en las dos llamadas a @c(mux.Handle) que registran los
   manejadores. En la primera, @c(db.list) es un valor de metodo (@l(#Seccion
   6.4<>§6.4)), es decir, un valor de tipo

#    ..src > go
#      func(w http.ResponseWriter, req *http.Request)
#    < src..
   ..src > go
     func(w http.ResponseWriter, req *http.Request)
   < src..

#    that, when called, invokes the @c(database.list) method with the receiver
#    value @c(db). So @c(db.list) is a function that implements handler-like
#    behavior, but since it has no methods, it doesn’t satisfy the
#    @c(http.Handler) interface and can’t be passed directly to @c(mux.Handle).
   que, cuando se llama, invoca el metodo @c(database.list) con el valor
   receptor @c(db). Asi que @c(db.list) es una funcion que implementa el
   comportamiento manipulador, pero ya que no tiene metodos, no satisface la
   interfaz @c(http.Handler) y no se puede pasar directamente a @c(mux.Handle).

#    The expression @c[http.HandlerFunc(db.list)] is a conversion, not a function
#    call, since @c(http.HandlerFunc) is a type. It has the following definition:
   La expresion @c[http.HandlerFunc(db.list)] es una conversion, no una llamada
   de funcion, ya que @c(http.HandlerFunc) es un tipo. Tiene la siguiente
   definicion:

#    ..figure > @c(net/http)
   ..figure > @c(net/http)

#      ..src > go
#        package http
#
#        type HandlerFunc func(w ResponseWriter, r *Request)
#
#        func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
#          f(w, r)
#        }
#      < src..
     ..src > go
       package http

       type HandlerFunc func(w ResponseWriter, r *Request)

       func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
         f(w, r)
       }
     < src..


#    @c(HandlerFunc) demonstrates some unusual features of Go’s interface
#    mechanism. It is a function type that has methods and satisfies an interface,
#    @c(http.Handler). The behavior of its @c(ServeHTTP) method is to call the
#    underlying function. @c(HandlerFunc) is thus an adapter that lets a function
#    value satisfy an interface, where the function and the interface’s sole
#    method have the same signature. In effect, this trick lets a single type such
#    as @c(database) satisfy the @c(http.Handler) interface several different
#    ways: once through its @c(list) method, once through its @c(price) method,
#    and so on.
   @c(HandlerFunc) demuestra algunas caracteristicas inusuales del mecanismo de
   interfaz de Go. Es un tipo de funcion que tiene metodos y satisface una
   interfaz, @c(http.Handler). El comportamiento de su @c(ServeHTTP) metodo es
   llamar a la funcion subyacente. @c(HandlerFunc) es, por tanto, un adaptador
   que permite que un valor de funcion de satisfaga una interfaz, donde la
   funcion y el unico metodo de la interfaz tienen la misma firma. En efecto,
   este truco permite que un solo tipo, como @c(database) cumpla con la interfaz
   @c(http.Handler) de varias maneras: una vez a traves de su @c(list) metodo,
   una vez que a traves de su metodo @c(price), y asi sucesivamente.

#    Because registering a handler this way is so common, @c(ServeMux) has a
#    convenience method called @c(HandleFunc) that does it for us, so we can
#    simplify the handler registration code to this:
   Debido a que el registro de un manejador de esta manera es tan comun,
   @c(ServeMux) tiene un metodo de conveniencia llamado @c(HandleFunc) que lo
   hace por nosotros, por lo que podemos simplificar el codigo de registro del
   manejador a esto:

#    ..figure > @l(gopl.io/ch7/http3a/main.go<>gopl.io/ch7/http3a)
   ..figure > @l(gopl.io/ch7/http3a/main.go<>gopl.io/ch7/http3a)

#      ..src > go
#        mux.HandleFunc("/list", db.list)
#        mux.HandleFunc("/price", db.price)
#      < src..
     ..src > go
       mux.HandleFunc("/list", db.list)
       mux.HandleFunc("/price", db.price)
     < src..


#    It’s easy to see from the code above how one would construct a program in
#    which there are two different web servers, listening on different ports,
#    defining different URLs, and dispatching to different handlers. We would just
#    construct another @c(ServeMux) and make another call to @c(ListenAndServe),
#    perhaps concurrently. But in most programs, one web server is plenty. Also,
#    it’s typical to define HTTP handlers across many files of an application, and
#    it would be a nuisance if they all had to be explicitly registered with the
#    application’s @c(ServeMux) instance.
   Es facil ver desde el codigo anterior como uno podria construir un programa
   en el que hay dos servidores web diferentes, escuchando en diferentes
   puertos, definiendo diferentes URL y enviando a diferentes
   manejadores. Simplemente construiriamos otro ServeMux y hariamos otra llamada
   a @c(ListenAndServe), tal vez al mismo tiempo. Pero en la mayoria de los
   programas, un servidor web es suficiente. Ademas, es tipico definir
   manejadores HTTP a traves de muchos archivos de una aplicacion, y seria una
   molestia si todos tuvieran que ser registrados de manera explicita con la
   instancia de la aplicacion @c(ServeMux).

#    So, for convenience, @c(net/http) provides a global @c(ServeMux) instance
#    called @c(DefaultServeMux) and package-level functions called @c(http.Handle) and
#    @c(http.HandleFunc). To use @c(DefaultServeMux) as the server’s main handler, we
#    needn’t pass it to @c(ListenAndServe); @c(nil) will do.
   Asi que, por conveniencia, @c(net/http) proporciona unna instancia global
   @c(ServeMux) llamada @c(DefaultServeMux) y funciones a nivel de paquete
   llamadas @c(http.Handle) y @c(http.HandleFunc). Para utilizar
   @c(DefaultServeMux) como manejador principal del servidor, no es necesario
   pasarlo a @c(ListenAndServe); @c(nil) lo hara.

#    The server’s main function can then be simplified to
   La funcion principal del servidor se puede simplificar a

#    ..figure > @l(gopl.io/ch7/http4/main.go<>gopl.io/ch7/http4)
   ..figure > @l(gopl.io/ch7/http4/main.go<>gopl.io/ch7/http4)

#      ..src > go
#        func main() {
#          db := database{"shoes": 50, "socks": 5}
#          http.HandleFunc("/list", db.list)
#          http.HandleFunc("/price", db.price)
#          log.Fatal(http.ListenAndServe("localhost:8000", nil))
#        }
#      < src..
     ..src > go
       func main() {
         db := database{"shoes": 50, "socks": 5}
         http.HandleFunc("/list", db.list)
         http.HandleFunc("/price", db.price)
         log.Fatal(http.ListenAndServe("localhost:8000", nil))
       }
     < src..


#    Finally, an important reminder: as we mentioned in @l(#Section 1.7), the web
#    server invokes each handler in a new goroutine, so handlers must take
#    precautions such as @e(locking) when accessing variables that other
#    goroutines, including other requests to the same handler, may be
#    accessing. We’ll talk about concurrency in the next two chapters.
   Por ultimo, un recordatorio importante: como mencionamos en la @l(#Seccion
   1.7), el servidor web invoca cada manejador en una nueva goroutine, por lo
   que los manipuladores deben tomar precauciones como el @e(bloqueo) al acceder
   a variables de otras gorutinas, incluyendo otras solicitudes al mismo
   manejador. Hablaremos de concurrencia en los proximos dos capitulos.

#    @b(Exercise 7.11): Add additional handlers so that clients can create, read,
#    update, and delete database entries. For example, a request of the form
#    @c(/update?item=socks&price=6) will update the price of an item in the
#    inventory and report an error if the item does not exist or if the price is
#    invalid. (Warning: this change introduces concurrent variable updates.)
   @b(Ejercicio 7.11) Agregar manejadores adicionales para que los clientes
   pueden crear, leer, actualizar y eliminar entradas de @c(database). Por
   ejemplo, una solicitud con formato @c(/update?item=socks&price=6) actualizara
   el precio de un articulo en el inventario e informar un error si el elemento
   no existe o si el precio no es valido. (Advertencia: este cambio introduce
   actualizacion de variables concurrentes.)

#    @b(Exercise 7.12): Change the handler for @c(/list) to print its output as an
#    HTML table, not text.  You may find the @c(html/template) package
#    (@l(#Section 4.6<>§4.6)) useful.
   @b(Ejercicio 7.12): Cambiar el manejador de @c(/list) para imprimir su salida
   como una tabla HTML, no como texto. Puede que el paquete @c(html/template)
   (@l(#Seccion 4.6<>§4.6)) sea util.

# ** Section 7.8 <> The @c(error) Interface
** Seccion 7.8 <> La Interfaz @c(error)

#    Since the beginning of this book, we’ve been using and creating values of the
#    mysterious predeclared @c(error) type without explaining what it really
#    is. In fact, it’s just an interface type with a single method that returns an
#    error message:
   Desde el comienzo de este libro, hemos estado usando y creando valores del
   misterioso tipo predeclarado @c(error) sin explicar lo que realmente es. De
   hecho, es solo un tipo de interfaz con un unico metodo que devuelve un
   mensaje de error:

#    ..src > go
#      type error interface {
#        Error() string
#      }
#    < src..
   ..src > go
     type error interface {
       Error() string
     }
   < src..

#    The simplest way to create an @c(error) is by calling @c(errors.New), which
#    returns a new @c(error) for a given error message. The entire @c(errors)
#    package is only four lines long:
   La forma mas sencilla de crear un @c(error) es llamando a @c(errors.New,) que
   devuelve un nuevo @c(error) para un mensaje de error dado. Todo el paquete
   @c(errors) solo son cuatro lineas:

#    ..src > go
#      package errors
#
#      func New(text string) error { return &errorString{text} }
#
#      type errorString struct { text string }
#
#      func (e *errorString) Error() string { return e.text }
#    < src..
   ..src > go
     package errors

     func New(text string) error { return &errorString{text} }

     type errorString struct { text string }

     func (e *errorString) Error() string { return e.text }
   < src..

#    The underlying type of @c(errorString) is a struct, not a string, to protect
#    its representation from inadvertent (or premeditated) updates. And the reason
#    that the pointer type @c(*errorString), not @c(errorString) alone, satisfies
#    the @c(error) interface is so that every call to @c(New) allocates a distinct
#    @c(error) instance that is equal to no other. We would not want a
#    distinguished error such as @c(io.EOF) to compare equal to one that merely
#    happened to have the same message.
   El tipo subyacente de @c(errorString) es una estructura, no una cadena, para
   proteger su representacion de cambios involuntarios (o premeditados). Y la
   razon de que el tipo de puntero sea @c(*errorString), no es solo
   @c(errorString), para satisfacer la interfaz @c(error) es para que cada
   llamada a @c(New) asigne una instancia de error distinta que no es igual a
   ninguna otra. No queremos que un error distinguido como @c(io.EOF) sea igual
   a o uno que simplemente contien el mismo mensaje.

#    ..src > go
#      fmt.Println(errors.New("EOF") == errors.New("EOF")) // "false"
#    < src..
   ..src > go
     fmt.Println(errors.New("EOF") == errors.New("EOF")) // "false"
   < src..

#    Calls to @c(errors.New) are relatively infrequent because there’s a
#    convenient wrapper function, @c(fmt.Errorf), that does string formatting
#    too. We used it several times in @l(#Chapter 5).
   Las llamadas a @c(errors.New) son relativamente poco frecuentes porque hay
   una funcion de envoltura conveniente, @c(fmt.Errorf), que tambien hace
   formateo de cadenas. Lo usamos varias veces en el @l(#Capitulo 5).

#    ..src > go
#      package fmt
#
#      import "errors"
#
#      func Errorf(format string, args ...interface{}) error {
#        return errors.New(Sprintf(format, args...))
#      }
#    < src..
   ..src > go
     package fmt

     import "errors"

     func Errorf(format string, args ...interface{}) error {
       return errors.New(Sprintf(format, args...))
     }
   < src..

#    Although @c(*errorString) may be the simplest type of @c(error), it is far
#    from the only one. For example, the @c(syscall) package provides Go’s
#    low-level system call API. On many platforms, it defines a numeric type
#    @c(Errno) that satisfies @c(error), and on Unix platforms, @c(Errno)’s
#    @c(Error) method does a lookup in a table of strings, as shown below :
   Aunque @c(*errorString) puede ser el tipo mas sencillo de @c(error), esta
   lejos de ser el unico. Por ejemplo, el paquete @c(syscall) proporciona la API
   de llamadas a bajo nivel de Go. En muchas plataformas, define un tipo
   numerico @c(Errno) que satisface @c(error), y en plataformas Unix, el metodo
   @c(Errno) de @c(Error) realiza una busqueda en una tabla de cadenas, como se
   muestra a continuacion:

#    ..src > go
#      package syscall
#
#      type Errno uintptr // operating system error code
#
#      var errors = [...]string{
#        1: "operation not permitted",   // EPERM
#        2: "no such file or directory", // ENOENT
#        3: "no such process",           // ESRCH
#        // ...
#      }
#
#      func (e Errno) Error() string {
#        if 0 <= int(e) && int(e) < len(errors) {
#          return errors[e]
#        }
#        return fmt.Sprintf("errno %d", e)
#      }
#    < src..
   ..src > go
     package syscall

     type Errno uintptr // codigos de error del sistema operativo

     var errors = [...]string{
       1: "operation not permitted",   // EPERM
       2: "no such file or directory", // ENOENT
       3: "no such process",           // ESRCH
       // ...
     }

     func (e Errno) Error() string {
       if 0 <= int(e) && int(e) < len(errors) {
         return errors[e]
       }
       return fmt.Sprintf("errno %d", e)
     }
   < src..

#    The following statement creates an interface value holding the @c(Errno)
#    value 2, signifying the POSIX @c(ENOENT) condition:
   La siguiente sentencia crea un valor de interfaz que contiene el valor
   @c(Errno) 2, que significa la condicion POSIX @c(ENOENT):

#    ..src > go
#      var err error = syscall.Errno(2)
#      fmt.Println(err.Error()) // "no such file or directory"
#      fmt.Println(err)         // "no such file or directory"
#    < src..
   ..src > go
     var err error = syscall.Errno(2)
     fmt.Println(err.Error()) // "el fichero o directorio no existe"
     fmt.Println(err)         // "el fichero o directorio no existe"
   < src..

#    The value of @c(err) is shown graphically in Figure 7.6.
   El valor de @c(err) se muestra graficamente en la Figura 7.6.

#    ..figure > Figure 7.6. An interface value holding a @c(syscall.Errno)
#      integer.
   ..figure > Figura 7.6. Un valor de interfaz que contiene un entero @c(syscall.Errno).

#      ..art >
#              err
#              ┏━━━━━━━━━━━━━━━━━┓
#         type ┃  syscall.Errno  ┃
#              ┣━━━━━━━━━━━━━━━━━┫
#        value ┃        2        ┃
#              ┗━━━━━━━━━━━━━━━━━┛
#      < art..
     ..art >
             err
             ┏━━━━━━━━━━━━━━━━━┓
        tipo ┃  syscall.Errno  ┃
             ┣━━━━━━━━━━━━━━━━━┫
       valor ┃        2        ┃
             ┗━━━━━━━━━━━━━━━━━┛
     < art..


#    @c(Errno) is an efficient representation of system call errors drawn from a
#    finite set, and it satisfies the standard @c(error) interface. We’ll see
#    other types that satisfy this interface in @l(#Section 7.11).
   @c(Errno) es una representacion eficiente de los errores de llamada del
   sistema extraidos de un conjunto finito, y satisface la interfaz estandar
   @c(error). Veremos otros tipos que satisfacen esta interfaz en la @l(#Seccion
   7.11).

# ** Section 7.9 <> Example: Expression Evaluator
** Seccion 7.9 <> Ejemplo: Evaluador de Expresiones

#    In this section, we’ll build an evaluator for simple arithmetic
#    expressions. We’ll use an interface, @c(Expr), to represent any expression in
#    this language. For now, this interface needs no methods, but we’ll add some
#    later.
   En esta seccion, crearemos un evaluador para expresiones aritmeticas
   simples. Vamos a utilizar una interfaz, @c(Expr), para representar cualquier
   expresion en este lenguaje. Por ahora, esta interfaz no necesita metodos,
   pero agregaremos algunos mas tarde.

#    ..src > go
#      // An Expr is an arithmetic expression.
#      type Expr interface{}
#    < src..
   ..src > go
     // Un Expr es una expresion aritmetica.
     type Expr interface{}
   < src..

#    Our expression language consists of floating-point literals; the binary
#    operators @c(+), @c(-), @c(*), and @c(/); the unary operators @c(-x) and
#    @c(+x); function calls @c[pow(x,y)], @c[sin(x)], and @c[sqrt(x)]; variables
#    such as @c(x) and @c(pi); and of course parentheses and standard operator
#    precedence. All values are of type @c(float64). Here are some example
#    expressions:
   Nuestro lenguaje de expresiones consiste en literales de punto flotante; los
   operadores binarios @c(+), @c(-), @c(*) y @c(/); los operadores unarios
   @c(-x) y @c(+x); llamadas de funcion @c[pow(x,y)], @c[sin(x)], y @c[sqrt(x)];
   variables como @c(x) y @c(pi); Y por supuesto los parentesis y la precedencia
   estandar de operadores. Todos los valores son del tipo @c(float64). Aqui hay
   algunas expresiones de ejemplo:

#    ..src > go
#      sqrt(A / pi)
#      pow(x, 3) + pow(y, 3)
#      (F - 32) * 5 / 9
#    < src..
   ..src > go
     sqrt(A / pi)
     pow(x, 3) + pow(y, 3)
     (F - 32) * 5 / 9
   < src..

#    The five concrete types below represent particular kinds of expression. A
#    @c(Var) represents a reference to a variable. (We’ll soon see why it is
#    exported.) A @c(literal) represents a floatingpoint constant. The @c(unary)
#    and @c(binary) types represent operator expressions with one or two operands,
#    which can be any kind of @c(Expr). A @c(call) represents a function call;
#    we’ll restrict its @c(fn) field to @c(pow), @c(sin), or @c(sqrt).
   Los cinco tipos concretos de abajo representan tipos particulares de
   expresiones. un @c(Var) representa una referencia a una variable. (Pronto
   veremos por que se exporta.) Un @c(literal) representa una constante de coma
   flotante. Los tipos @c(unary) y @c(binary) representan expresiones de
   operador con uno o dos operandos, que pueden ser cualquier tipo de
   @c(Expr). Un @c(call) es una llamada de funcion; restringiremos este campo
   @c(fn) a @c(pow), @c(sin), o @c(sqrt).

#    ..figure > @l(gopl.io/ch7/eval/ast.go<>gopl.io/ch7/eval)
   ..figure > @l(gopl.io/ch7/eval/ast.go<>gopl.io/ch7/eval)

#      ..src > go
#        // A Var identifies a variable, e.g., x.
#        type Var string
#
#        // A literal is a numeric constant, e.g., 3.141.
#        type literal float64
#
#        // A unary represents a unary operator expression, e.g., -x.
#        type unary struct {
#          op rune // one of '+', '-'
#          x  Expr
#        }
#
#        // A binary represents a binary operator expression, e.g., x+y.
#        type binary struct {
#          op   rune // one of '+', '-', '*', '/'
#          x, y Expr
#        }
#
#        // A call represents a function call expression, e.g., sin(x).
#        type call struct {
#          fn   string // one of "pow", "sin", "sqrt"
#          args []Expr
#        }
#      < src..
     ..src > go
       // Un Var identifica una variable, por ejemplo, x.
       type Var string

       // Un literal es un numero constante, por ejemplo, 3.141.
       type literal float64

       // Un unary representa una expresion de operador unario, por ejemplo, -x.
       type unary struct {
         op rune // one of '+', '-'
         x  Expr
       }

       // Un binary representa una expresion de operador binario, por ejemplo, x+y.
       type binary struct {
         op   rune // one of '+', '-', '*', '/'
         x, y Expr
       }

       // Un call representa una expresion de llamada a funcion, por ejemplo, sin(x).
       type call struct {
         fn   string // uno de "pow", "sin", "sqrt"
         args []Expr
       }
     < src..


#    To evaluate an expression containing variables, we’ll need an @e(environment)
#    that maps variable names to values:
   Para evaluar una expresion que contiene variables, necesitaremos un entorno
   que asigne nombres de variables a valores:

#    ..src > go
#      type Env map[Var]float64
#    < src..
   ..src > go
     type Env map[Var]float64
   < src..

#    We’ll also need each kind of expression to define an @c(Eval) method that
#    returns the expression’s value in a given environment. Since every expression
#    must provide this method, we add it to the @c(Expr) interface. The package
#    exports only the types @c(Expr), @c(Env), and @c(Var); clients can use the
#    evaluator without access to the other expression types.
   Tambien necesitaremos cada tipo de expresion para definir un metodo @c(Eval)
   que devuelva el valor de la expresion en un entorno determinado. Puesto que
   cada expresion debe proporcionar este metodo, lo añadimos a la interfaz
   @c(Expr). El paquete exporta unicamente los tipos @c(Expr), @c(Env), y
   @c(Var); Los clientes pueden utilizar el evaluador sin acceso a los otros
   tipos de expresion.

#    ..src > go
#      type Expr interface {
#        // Eval returns the value of this Expr in the environment env.
#        Eval(env Env) float64
#      }
#    < src..
   ..src > go
     type Expr interface {
       // Eval devuelve el valor de este Expr en el entorno env.
       Eval(env Env) float64
     }
   < src..

#    The concrete @c(Eval) methods are shown below. The method for @c(Var)
#    performs an environment lookup, which returns zero if the variable is not
#    defined, and the method for @c(literal) simply returns the literal value.
   Los metodos concretos de @c(Eval) se muestran a continuacion. El metodo de
   @c(Var) realiza una busqueda de entorno, que devuelve cero si la variable no
   esta definida, y el metodo de @c(literal) simplemente devuelve el valor
   literal.

#    ..src > go
#      func (v Var) Eval(env Env) float64 {
#        return env[v]
#      }
#
#      func (l literal) Eval(_ Env) float64 {
#        return float64(l)
#      }
#    < src..
   ..src > go
     func (v Var) Eval(env Env) float64 {
       return env[v]
     }

     func (l literal) Eval(_ Env) float64 {
       return float64(l)
     }
   < src..

#    The @c(Eval) methods for @c(unary) and @c(binary) recursively evaluate their
#    operands, then apply the operation @c(op) to them. We don’t consider
#    divisions by zero or infinity to be errors, since they produce a result,
#    albeit non-finite. Finally, the method for @c(call) evaluates the arguments
#    to the @c(pow), @c(sin), or @c(sqrt) function, then calls the corresponding
#    function in the @c(math) package.
   Los metodos @c(Eval) de @c(unary) y @c(binary) evaluan de forma recursiva sus
   operandos, luego aplican la operacion @c(op) a ellos. No consideramos
   divisiones por cero o infinito como errores, ya que producen un resultado, no
   finito. Finalmente, el metodo de @c(call) evalua los argumentos de la funcion
   @c(pow), @c(sin), o @c(sqrt), y luego llama a la funcion correspondiente en
   el paquete @c(math).

#    ..src > go
#      func (u unary) Eval(env Env) float64 {
#        switch u.op {
#        case '+':
#          return +u.x.Eval(env)
#        case '-':
#          return -u.x.Eval(env)
#        }
#        panic(fmt.Sprintf("unsupported unary operator: %q", u.op))
#      }
#
#      func (b binary) Eval(env Env) float64 {
#        switch b.op {
#        case '+':
#          return b.x.Eval(env) + b.y.Eval(env)
#        case '-':
#          return b.x.Eval(env) - b.y.Eval(env)
#        case '*':
#          return b.x.Eval(env) * b.y.Eval(env)
#        case '/':
#          return b.x.Eval(env) / b.y.Eval(env)
#        }
#        panic(fmt.Sprintf("unsupported binary operator: %q", b.op))
#      }
#
#      func (c call) Eval(env Env) float64 {
#        switch c.fn {
#        case "pow":
#          return math.Pow(c.args[0].Eval(env), c.args[1].Eval(env))
#        case "sin":
#          return math.Sin(c.args[0].Eval(env))
#        case "sqrt":
#          return math.Sqrt(c.args[0].Eval(env))
#        }
#        panic(fmt.Sprintf("unsupported function call: %s", c.fn))
#      }
#    < src..
   ..src > go
     func (u unary) Eval(env Env) float64 {
       switch u.op {
       case '+':
         return +u.x.Eval(env)
       case '-':
         return -u.x.Eval(env)
       }
       panic(fmt.Sprintf("unsupported unary operator: %q", u.op))
     }

     func (b binary) Eval(env Env) float64 {
       switch b.op {
       case '+':
         return b.x.Eval(env) + b.y.Eval(env)
       case '-':
         return b.x.Eval(env) - b.y.Eval(env)
       case '*':
         return b.x.Eval(env) * b.y.Eval(env)
       case '/':
         return b.x.Eval(env) / b.y.Eval(env)
       }
       panic(fmt.Sprintf("unsupported binary operator: %q", b.op))
     }

     func (c call) Eval(env Env) float64 {
       switch c.fn {
       case "pow":
         return math.Pow(c.args[0].Eval(env), c.args[1].Eval(env))
       case "sin":
         return math.Sin(c.args[0].Eval(env))
       case "sqrt":
         return math.Sqrt(c.args[0].Eval(env))
       }
       panic(fmt.Sprintf("unsupported function call: %s", c.fn))
     }
   < src..

#    Several of these methods can fail. For example, a @c(call) expression could
#    have an unknown function or the wrong number of arguments. It’s also possible
#    to construct a @c(unary) or @c(binary) expression with an invalid operator
#    such as @c(!) or @c(<) (although the @c(Parse) function mentioned below will
#    never do this). These errors cause @c(Eval) to panic. Other errors, like
#    evaluating a @c(Var) not present in the environment, merely cause @c(Eval) to
#    return the wrong result. All of these errors could be detected by inspecting
#    the @c(Expr) before evaluating it. That will be the job of the @c(Check)
#    method, which we will show soon, but first let’s test @c(Eval).
   Varios de estos metodos pueden fallar. Por ejemplo, una expresion @c(call)
   podria tener una funcion desconocida o el numero incorrecto de argumentos.
   Tambien es posible construir una expresion @c(unary) o @c(binary) con un
   operador no valido como @c(!) o @c(<) (aunque la funcion @c(Parse) mencionada
   a continuacion nunca hara esto). Estos errores hacen que @c(Eval) entre en
   panico. Otros errores, la evaluacion de un @c(Var) no presente en el entorno,
   simplemente hacen que @c(Eval) devuelva el resultado incorrecto. Todos estos
   errores podrian ser detectados por la inspeccion de @c(Expr) antes de su
   evaluacion. Ese sera el trabajo del metodo @c(Check), que mostraremos pronto,
   pero primero vamos a probar @c(Eval).

#    The @c(TestEval) function below is a test of the evaluator. It uses the
#    @c(testing) package, which we’ll explain in @l(#Chapter 11), but for now it’s
#    enough to know that calling @c(t.Errorf) reports an error. The function loops
#    over a table of inputs that defines three expressions and different
#    environments for each one. The first expression computes the radius of a
#    circle given its area @c(A), the second computes the sum of the cubes of two
#    variables @c(x) and @c(y), and the third converts a Fahrenheit temperature
#    @c(F) to @c(Celsius).
   La funcion @c(TestEval) a continuacion, es una prueba del evaluador. Utiliza
   el paquete @c(testing), que explicaremos en el @l(#Capitulo 11), pero por
   ahora es suficiente saber que llamar a @c(t.Errorf) informa de un error. La
   funcion recorre una tabla de entradas que define tres expresiones y entornos
   diferentes para cada una. La primer expresion calcula el radio de un circulo
   dada su area @c(A), la segunda calcula la suma de los cubos de dos variables
   @c(x) e @c(y), y la tercera convierte una temperatura @c(Fahrenheit) de @c(F)
   a @c(Celsius).

#    ..src > go
#      func TestEval(t *testing.T) {
#        tests := []struct {
#          expr string
#          env  Env
#          want string
#        }{
#          {"sqrt(A / pi)", Env{"A": 87616, "pi": math.Pi}, "167"},
#          {"pow(x, 3) + pow(y, 3)", Env{"x": 12, "y": 1}, "1729"},
#          {"pow(x, 3) + pow(y, 3)", Env{"x": 9, "y": 10}, "1729"},
#          {"5 / 9 * (F - 32)", Env{"F": -40}, "-40"},
#          {"5 / 9 * (F - 32)", Env{"F": 32}, "0"},
#          {"5 / 9 * (F - 32)", Env{"F": 212}, "100"},
#        }
#        var prevExpr string
#        for _, test := range tests {
#          // Print expr only when it changes.
#          if test.expr != prevExpr {
#            fmt.Printf("\n%s\n", test.expr)
#            prevExpr = test.expr
#          }
#          expr, err := Parse(test.expr)
#          if err != nil {
#            t.Error(err) // parse error
#            continue
#          }
#          got := fmt.Sprintf("%.6g", expr.Eval(test.env))
#          fmt.Printf("\t%v => %s\n", test.env, got)
#          if got != test.want {
#            t.Errorf("%s.Eval() in %s = %q, want %q\n",
#              test.expr, test.env, got, test.want)
#          }
#        }
#      }
#    < src..
   ..src > go
     func TestEval(t *testing.T) {
       tests := []struct {
         expr string
         env  Env
         want string
       }{
         {"sqrt(A / pi)", Env{"A": 87616, "pi": math.Pi}, "167"},
         {"pow(x, 3) + pow(y, 3)", Env{"x": 12, "y": 1}, "1729"},
         {"pow(x, 3) + pow(y, 3)", Env{"x": 9, "y": 10}, "1729"},
         {"5 / 9 * (F - 32)", Env{"F": -40}, "-40"},
         {"5 / 9 * (F - 32)", Env{"F": 32}, "0"},
         {"5 / 9 * (F - 32)", Env{"F": 212}, "100"},
       }
       var prevExpr string
       for _, test := range tests {
         // Imprime expr solo cuando hay cambios.
         if test.expr != prevExpr {
           fmt.Printf("\n%s\n", test.expr)
           prevExpr = test.expr
         }
         expr, err := Parse(test.expr)
         if err != nil {
           t.Error(err) // analiza error
           continue
         }
         got := fmt.Sprintf("%.6g", expr.Eval(test.env))
         fmt.Printf("\t%v => %s\n", test.env, got)
         if got != test.want {
           t.Errorf("%s.Eval() in %s = %q, want %q\n",
             test.expr, test.env, got, test.want)
         }
       }
     }
   < src..

#    For each entry in the table, the test parses the expression, evaluates it in
#    the environment, and prints the result. We don’t have space to show the
#    @c(Parse) function here, but you’ll find it if you download the package using
#    @$(go get).
   Para cada entrada en la tabla, la prueba analiza la expresion, la evalua en
   el entorno e imprime el resultado. No tenemos espacio para mostrar la funcion
   @c(Parse) aqui, pero lo encontrara si se descarga el paquete usando @$(go
   get).

#    The @$(go test) command (@l(#Section 11.1<>§11.1)) runs a package’s tests:
   El comando @$(go test) (@l(#Seccion 11.1<>§11.1)) ejecuta las pruebas de un
   paquete:

#    ..src > sh
#      $ go test -v gopl.io/ch7/eval
#    < src..
   ..src > sh
     $ go test -v gopl.io/ch7/eval
   < src..

#    The @c(-v) flag lets us see the printed output of the test, which is normally
#    suppressed for a successful test like this one. Here is the output of the
#    test’s @c(fmt.Printf) statements:
   La bandera @c(-v) nos permite ver la salida impresa de la prueba, que
   normalmente se suprime para una prueba exitosa como esta. Aqui esta la salida
   de la prueba de las sentencias @c(fmt.Printf):

#    ..src > sh
#      sqrt(A / pi)
#          map[A:87616 pi:3.141592653589793] => 167
#
#      pow(x, 3) + pow(y, 3)
#          map[x:12 y:1] => 1729
#          map[x:9 y:10] => 1729
#
#      5 / 9 * (F - 32)
#          map[F:-40] => -40
#          map[F:32] => 0
#          map[F:212] => 100
#    < src..
   ..src > sh
     sqrt(A / pi)
         map[A:87616 pi:3.141592653589793] => 167

     pow(x, 3) + pow(y, 3)
         map[x:12 y:1] => 1729
         map[x:9 y:10] => 1729

     5 / 9 * (F - 32)
         map[F:-40] => -40
         map[F:32] => 0
         map[F:212] => 100
   < src..

#    Fortunately the inputs so far have all been well formed, but our luck is
#    unlikely to last. Even in interpreted languages, it is common to check the
#    syntax for @e(static) errors, that is, mistakes that can be detected without
#    running the program. By separating the static checks from the dynamic ones,
#    we can detect errors sooner and perform many checks only once instead of each
#    time an expression is evaluated.
   Afortunadamente hasta ahora los datos de entrada han sido bien formados, pero
   es poco probable que dure nuestra suerte. Incluso en los lenguajes
   interpretados, es comun comprobar la sintaxis de errores @e(estaticos), es
   decir, errores que pueden ser detectados sin ejecutar el programa. Al separar
   los controles estaticos de los dinamicos, podemos detectar errores antes y
   realizar muchas verificaciones solo una vez en lugar de cada vez que se
   evalua una expresion.

#    Let’s add another method to the @c(Expr) interface. The @c(Check) method
#    checks for static errors in an expression syntax tree. We’ll explain its
#    @c(vars) parameter in a moment.
   Vamos a añadir otro metodo a la interfaz @c(Expr). El metodo @c(Check)
   comprueba si hay errores estaticos en un arbol de sintaxis de
   expresiones. Vamos a explicar su parametro @c(vars) en un momento.

#    ..src > go
#      type Expr interface {
#        Eval(env Env) float64
#        // Check reports errors in this Expr and adds its Vars to the set.
#        Check(vars map[Var]bool) error
#      }
#    < src..
   ..src > go
     type Expr interface {
       Eval(env Env) float64
       // Check informa errores en este Expr y agrega sus Vars al conjunto.
       Check(vars map[Var]bool) error
     }
   < src..

#    The concrete @c(Check) methods are shown below. Evaluation of @c(literal) and
#    @c(Var) cannot fail, so the @c(Check) methods for these types return
#    @c(nil). The methods for @c(unary) and @c(binary) first check that the
#    operator is valid, then recursively check the operands. Similarly, the method
#    for @c(call) first checks that the function is known and has the right number
#    of arguments, then recursively checks each argument.
   El metodo concreto @c(Check) se muestran a continuacion. La evaluacion de
   @c(literal) y @c(Var) no puede fallar, por lo que los metodos @c(Check) para
   estos tipos devuelven @c(nil). Los metodos para @c(unary) y @c(binary)
   primera verifican que el operador es valido, luego comprueban recursivamente
   los operandos. Del mismo modo, el metodo para de @c(call) comprueba primero
   que la funcion se conoce y tiene el numero correcto de argumentos, entonces,
   de forma recursiva comprueba cada argumento.

#    ..src > go
#      func (v Var) Check(vars map[Var]bool) error {
#        vars[v] = true
#        return nil
#      }
#
#      func (literal) Check(vars map[Var]bool) error {
#        return nil
#      }
#
#      func (u unary) Check(vars map[Var]bool) error {
#        if !strings.ContainsRune("+-", u.op) {
#          return fmt.Errorf("unexpected unary op %q", u.op)
#        }
#        return u.x.Check(vars)
#      }
#
#      func (b binary) Check(vars map[Var]bool) error {
#        if !strings.ContainsRune("+-*/", b.op) {
#          return fmt.Errorf("unexpected binary op %q", b.op)
#        }
#        if err := b.x.Check(vars); err != nil {
#          return err
#        }
#        return b.y.Check(vars)
#      }
#
#      func (c call) Check(vars map[Var]bool) error {
#        arity, ok := numParams[c.fn]
#        if !ok {
#          return fmt.Errorf("unknown function %q", c.fn)
#        }
#        if len(c.args) != arity {
#          return fmt.Errorf("call to %s has %d args, want %d",
#            c.fn, len(c.args), arity)
#        }
#        for _, arg := range c.args {
#          if err := arg.Check(vars); err != nil {
#            return err
#          }
#        }
#        return nil
#      }
#
#      var numParams = map[string]int{"pow": 2, "sin": 1, "sqrt": 1}
#    < src..
   ..src > go
     func (v Var) Check(vars map[Var]bool) error {
       vars[v] = true
       return nil
     }

     func (literal) Check(vars map[Var]bool) error {
       return nil
     }

     func (u unary) Check(vars map[Var]bool) error {
       if !strings.ContainsRune("+-", u.op) {
         return fmt.Errorf("unexpected unary op %q", u.op)
       }
       return u.x.Check(vars)
     }

     func (b binary) Check(vars map[Var]bool) error {
       if !strings.ContainsRune("+-*/", b.op) {
         return fmt.Errorf("unexpected binary op %q", b.op)
       }
       if err := b.x.Check(vars); err != nil {
         return err
       }
       return b.y.Check(vars)
     }

     func (c call) Check(vars map[Var]bool) error {
       arity, ok := numParams[c.fn]
       if !ok {
         return fmt.Errorf("unknown function %q", c.fn)
       }
       if len(c.args) != arity {
         return fmt.Errorf("call to %s has %d args, want %d",
           c.fn, len(c.args), arity)
       }
       for _, arg := range c.args {
         if err := arg.Check(vars); err != nil {
           return err
         }
       }
       return nil
     }

     var numParams = map[string]int{"pow": 2, "sin": 1, "sqrt": 1}
   < src..

#    We’ve listed a selection of flawed inputs and the errors they elicit, in two
#    groups. The @c(Parse) function (not shown) reports syntax errors and the
#    @c(Check) function reports semantic errors.
   Hemos listado una seleccion de entradas defectuosas y los errores que
   provocan, en dos grupos. La funcion @c(Parse) (no se muestra) informa de
   errores de sintaxis y la funcion @c(Check) de informes de errores semanticos.

#    ..pre >
#      x % 2             unexpected '%'
#      math.Pi           unexpected '.'
#      !true             unexpected '!'
#      "hello"           unexpected '"'
#
#      log(10)           unknown function "log"
#      sqrt(1, 2)        call to sqrt has 2 args, want 1
#    < pre..
   ..pre >
     x % 2             unexpected '%'
     math.Pi           unexpected '.'
     !true             unexpected '!'
     "hello"           unexpected '"'

     log(10)           unknown function "log"
     sqrt(1, 2)        call to sqrt has 2 args, want 1
   < pre..

#    @c(Check)’s argument, a set of @c(Vars), accumulates the set of variable
#    names found within the expression. Each of these variables must be present in
#    the environment for evaluation to succeed. This set is logically the
#    @e(result) of the call to @c(Check), but because the method is recursive, it
#    is more convenient for @c(Check) to populate a set passed as a parameter. The
#    client must provide an empty set in the initial call.
   El argumento de @c(Check), un conjunto de @c(Vars), acumula el conjunto de
   nombres de variables que se encuentran dentro de la expresion. Cada una de
   estas variables debe estar presente en el entorno para que la evaluacion
   tenga exito. Este conjunto es, logicamente, el @e(resultado) de la llamar a
   @c(Check), pero debido a que el metodo es recursivo, es mas conveniente para
   @c(Check) llenar el conjunto pasandolo como parametro. El cliente debe
   proporcionar un conjunto vacio en la llamada inicial.

#    In @l(#Section 3.2), we plotted a function @c[f(x,y)] that was fixed at
#    compile time. Now that we can parse, check, and evaluate expressions in
#    strings, we can build a web application that receives an expression at run
#    time from the client and plots the surface of that function. We can use the
#    @c(vars) set to check that the expression is a function of only two
#    variables, @c(x) and @c(y)—three, actually, since we’ll provide @c(r), the
#    radius, as a convenience. And we’ll use the @c(Check) method to reject
#    ill-formed expressions before evaluation begins so that we don’t repeat those
#    checks during the 40,000 evaluations (100×100 cells, each with four corners)
#    of the function that follow.
   En la @l(#Seccion 3.2), se represento una funcion @c[f(x,y)] que se establece
   en tiempo de compilacion. Ahora que podemos analizar, comprobar y evaluar
   expresiones en cadenas, podemos construir una aplicacion web que recibe una
   expresion en tiempo de ejecucion del cliente y traza la superficie de esa
   funcion. Podemos utilizar los @c(vars) establecidos para comprobar que la
   expresion es una funcion de dos variables, @c(x) e @c(y)–tres, en realidad,
   ya que proporcionamos @c(r), el radio, como una conveniencia. Y usaremos el
   metodo @c(Check) para rechazar expresiones mal formadas antes de que comience
   la evaluacion, de mono que no repitamos esas verificaciones durante las
   40.000 evaluaciones (100×100 celulas, cada una con cuatro esquinas) de la
   funcion que le sigue.

#    The @c(parseAndCheck) function combines these parsing and checking steps:
   La funcion @c(parseAndCheck) combina estos pasos de analisis y comprobacion:

#    ..figure > @l(gopl.io/ch7/surface/surface.go<>gopl.io/ch7/surface)
   ..figure > @l(gopl.io/ch7/surface/surface.go<>gopl.io/ch7/surface)

#      ..src > go
#        import "gopl.io/ch7/eval"
#
#        func parseAndCheck(s string) (eval.Expr, error) {
#          if s == "" {
#            return nil, fmt.Errorf("empty expression")
#          }
#          expr, err := eval.Parse(s)
#          if err != nil {
#            return nil, err
#          }
#          vars := make(map[eval.Var]bool)
#          if err := expr.Check(vars); err != nil {
#            return nil, err
#          }
#          for v := range vars {
#            if v != "x" && v != "y" && v != "r" {
#              return nil, fmt.Errorf("undefined variable: %s", v)
#            }
#          }
#          return expr, nil
#        }
#      < src..
     ..src > go
       import "gopl.io/ch7/eval"

       func parseAndCheck(s string) (eval.Expr, error) {
         if s == "" {
           return nil, fmt.Errorf("empty expression")
         }
         expr, err := eval.Parse(s)
         if err != nil {
           return nil, err
         }
         vars := make(map[eval.Var]bool)
         if err := expr.Check(vars); err != nil {
           return nil, err
         }
         for v := range vars {
           if v != "x" && v != "y" && v != "r" {
             return nil, fmt.Errorf("undefined variable: %s", v)
           }
         }
         return expr, nil
       }
     < src..


#    To make this a web application, all we need is the @c(plot) function below,
#    which has the familiar signature of an @c(http.HandlerFunc):
   Para hacer de esto una aplicacion web, todo lo que necesitamos es la siguiente
   funcion @c(plot), que tiene la firma familiar de un @c(http.HandlerFunc):

#    ..src > go
#      func plot(w http.ResponseWriter, r *http.Request) {
#        r.ParseForm()
#        expr, err := parseAndCheck(r.Form.Get("expr"))
#        if err != nil {
#          http.Error(w, "bad expr: "+err.Error(), http.StatusBadRequest)
#          return
#        }
#        w.Header().Set("Content-Type", "image/svg+xml")
#        surface(w, func(x, y float64) float64 {
#          r := math.Hypot(x, y) // distance from (0,0)
#          return expr.Eval(eval.Env{"x": x, "y": y, "r": r})
#        })
#      }
#    < src..
   ..src > go
     func plot(w http.ResponseWriter, r *http.Request) {
       r.ParseForm()
       expr, err := parseAndCheck(r.Form.Get("expr"))
       if err != nil {
         http.Error(w, "bad expr: "+err.Error(), http.StatusBadRequest)
         return
       }
       w.Header().Set("Content-Type", "image/svg+xml")
       surface(w, func(x, y float64) float64 {
         r := math.Hypot(x, y) // distance from (0,0)
         return expr.Eval(eval.Env{"x": x, "y": y, "r": r})
       })
     }
   < src..

#    The @c(plot) function parses and checks the expression specified in the HTTP
#    request and uses it to create an anonymous function of two variables. The
#    anonymous function has the same signature as the fixed function @c(f) from
#    the original surface-plotting program, but it evaluates the user-supplied
#    expression. The environment defines @c(x), @c(y), and the radius
#    @c(r). Finally, @c(plot) calls @c(surface), which is just the @c(main)
#    function from @c(gopl.io/ch3/surface), modified to take the function to plot
#    and the output @c(io.Writer) as parameters, instead of using the fixed
#    function @c(f) and @c(os.Stdout). Figure 7.7 shows three surfaces produced by
#    the program.
   La funcion @c(plot) analiza y comprueba la expresion especificada en la
   peticion HTTP y la utiliza para crear una funcion anonima de dos
   variables. La funcion anonima tiene la misma firma que la funcion fija @c(f)
   del programa de trazado de la superficie original, pero evalua la expresion
   proporcionada por el usuario. El entorno define @c(x), @c(y), y el radio
   @c(r). Finalmente, @c(plot) llama a @c(surface), que es solo la funcion
   @c(main) de @c(gopl.io/ch3/surface), modificado para tomar la funcion de
   trazar y la salida de @c(io.Writer) como parametros, en lugar de utilizar la
   funcion fija @c(f) y @c(os.Stdout). La Figura 7.7 muestra tres superficies
   producidas por el programa.

#    ..figure > Figure 7.7. The surfaces of three functions: (a)
#      @c[sin(-x)*pow(1.5,-r)]; (b) @c[pow(2,sin(y))*pow(2,sin(x))/12]; (c)
#      @c[sin(x*y/10)/10].
   ..figure > Figura 7.7. Las superficies de tres funciones: (a)
     @c[sin(-x)*pow(1.5,-r)]; (b) @c[pow(2,sin(y))*pow(2,sin(x))/12]; (c)
     @c[sin(x*y/10)/10].

#      ..img  > img/Figure-7.7.a.jpg
     ..img  > img/Figure-7.7.a.jpg

#      ..img  > img/Figure-7.7.b.jpg
     ..img  > img/Figure-7.7.b.jpg

#      ..img  > img/Figure-7.7.c.jpg
     ..img  > img/Figure-7.7.c.jpg


#    @b(Exercise 7.13): Add a @c(String) method to @c(Expr) to pretty-print the
#    syntax tree. Check that the results, when parsed again, yield an equivalent
#    tree.
   @b(Ejercicio 7.13): Agregue una metodo @c(String) a @c(Expr) para imprimir el
   arbol de sintaxis. Compruebe que los resultados, cuando se analiza de nuevo,
   producen un arbol equivalente.

#    @b(Exercise 7.14): Define a new concrete type that satisfies the @c(Expr)
#    interface and provides a new operation such as computing the minimum value of
#    its operands. Since the @c(Parse) function does not create instances of this
#    new type, to use it you will need to construct a syntax tree directly (or
#    extend the parser).
   @b(Ejercicio 7.14): Definir un nuevo tipo concreto que satisfaga la interfaz
   @c(Expr) y ofrece una nueva operacion como calcular el valor minimo de sus
   operandos. Ya que la funcion @c(Parse) no crea instancias de este nuevo tipo,
   para usarlo necesitara construir un arbol de sintaxis directamente (o
   extender el analizador).

#    @b(Exercise 7.15): Write a program that reads a single expression from the
#    standard input, prompts the user to provide values for any variables, then
#    evaluates the expression in the resulting environment. Handle all errors
#    gracefully.
   @b(Ejercicio 7.15): Escriba un programa que lee una sola expresion de la
   entrada estandar, solicita al usuario que proporcione valores para las
   variables, y luego  evalue la expresion en el medio ambiente
   resultante. Maneje todos los errores con gracia.

#    @b(Exercise 7.16): Write a web-based calculator program.
   @b(Ejercicio 7.16): Escribia un programa de calculadora basado en la web.

# ** Section 7.10 <> Type Assertions
** Seccion 7.10 <> Afirmacion de Tipo

#    A @e(type assertion) is an operation applied to an interface
#    value. Syntactically, it looks like @c[x.(T)], where @c(x) is an expression
#    of an interface type and @c(T) is a type, called the @"(asserted) type. A
#    type assertion checks that the dynamic type of its operand matches the
#    asserted type.
   Una @e(afirmacion de tipo) es una operacion aplicada a un valor de interfaz.
   Sintacticamente, se ve como @c[x.(T)], donde @c(x) es una expresion de un
   tipo de interfaz y @c[T] es un tipo, denominado el tipo @"(afirmado). Una
   afirmacion de tipo comprueba que el tipo dinamico de su operando coincide con
   el tipo declarado.

#    There are two possibilities. First, if the asserted type @c(T) is a concrete
#    type, then the type assertion checks whether @c(x)’s dynamic type is
#    @e(identical to) @c(T). If this check succeeds, the result of the type
#    assertion is @c(x)’s dynamic value, whose type is of course @c(T). In other
#    words, a type assertion to a concrete type extracts the concrete value from
#    its operand. If the check fails, then the operation panics. For example:
   Hay dos posibilidades. En primer lugar, si el tipo afirmado @c(T) es un tipo
   concreto, entonces la asercion de tipo comprueba si el tipo dinamico @c(x) es
   @e(identico a) @c(T). Si esta comprobacion tiene exito, el resultado de la
   afirmacion tipo es el valor dinamico @c(x), cuyo tipo es, por supuesto,
   @c(T). En otras palabras, una afirmacion de tipo a un tipo concreto extrae el
   valor concreto de su operando. Si la comprobacion falla, entonces la
   operacion entra en panico. Por ejemplo:

#    ..src > go
#      var w io.Writer
#      w = os.Stdout
#      f := w.(*os.File)      // success: f == os.Stdout
#      c := w.(*bytes.Buffer) // panic: interface holds *os.File, not *bytes.Buffer
#    < src..
   ..src > go
     var w io.Writer
     w = os.Stdout
     f := w.(*os.File)      // exito: f == os.Stdout
     c := w.(*bytes.Buffer) // panico: interfaz contiene *os.File, no *bytes.Buffer
   < src..

#    Second, if instead the asserted type @c(T) is an interface type, then the
#    type assertion checks whether @c(x)’s dynamic type @e(satisfies) @c(T). If
#    this check succeeds, the dynamic value is not extracted; the result is still
#    an interface value with the same type and value components, but the result
#    has the interface type @c(T). In other words, a type assertion to an
#    interface type changes the type of the expression, making a different (and
#    usually larger) set of methods accessible, but it preserves the dynamic type
#    and value components inside the interface value.
   En segundo lugar, si en lugar del tipo afirmado @c(T) es un tipo de interfaz,
   entonces, la afirmacion de tipo comprueba si el tipo dinamico @c(x)
   @e(satisface) a @c(T). Si esta comprobacion tiene exito, el valor dinamico no
   se extrae; el resultado sigue siendo un valor de interfaz con el mismo y
   varol de componentes, pero el resultado tiene el tipo de interfaz @c(T). En
   otras palabras, una asercion de tipo a un tipo de interfaz cambia el tipo de
   la expresion, haciendo accesible un conjunto de metodos diferente (y
   generalmente mas grande), pero conserva los componentes dinamicos de tipo y
   valor dentro del valor de la interfaz.

#    After the first type assertion below, both @c(w) and @c(rw) hold
#    @c(os.Stdout) so each has a dynamic type of @c(*os.File), but @c(w), an
#    @c(io.Writer), exposes only the file’s @c(Write) method, whereas @c(rw)
#    exposes its @c(Read) method too.
   Despues de la afirmacion del primer tipo a continuacion, tanto @c(w) y @c(rw)
   contienen @c(os.Stdout) por lo que cada uno tiene un tipo dinamico de
   @c(*os.File), pero @c(w), un @c(io.Writer), expone solo el metodo @c(Write)
   del archivo, mientras que @c(rw) expone tambien su metodo @c(Read).

#    ..src > go
#      var w io.Writer
#      w = os.Stdout
#      rw := w.(io.ReadWriter) // success: *os.File has both Read and Write
#
#      w = new(ByteCounter)
#      rw = w.(io.ReadWriter)  // panic: *ByteCounter has no Read method
#    < src..
   ..src > go
     var w io.Writer
     w = os.Stdout
     rw := w.(io.ReadWriter) // exito: *os.File tiene tanto Read como Write

     w = new(ByteCounter)
     rw = w.(io.ReadWriter)  // panico: *ByteCounter no tiene metodo Read
   < src..

#    No matter what type was asserted, if the operand is a nil interface value,
#    the type assertion fails. A type assertion to a less restrictive interface
#    type (one with fewer methods) is rarely needed, as it behaves just like an
#    assignment, except in the nil case.
   No importa que tipo se afirmo, si el operando es un valor de interfaz nil, la
   afirmacion de tipo falla. Rara vez se necesita una asercion de tipo a un tipo
   de interfaz menos restrictivo (uno con menos metodos), ya que se comporta
   como una asignacion, excepto en el caso nulo.

#    ..src > go
#      w = rw             // io.ReadWriter is assignable to io.Writer
#      w = rw.(io.Writer) // fails only if rw == nil
#    < src..
   ..src > go
     w = rw             // io.ReadWriter es asignable a io.Writer
     w = rw.(io.Writer) // falla solo si rw == nil
   < src..

#    Often we’re not sure of the dynamic type of an interface value, and we’d like
#    to test whether it is some particular type. If the type assertion appears in
#    an assignment in which two results are expected, such as the following
#    declarations, the operation does not panic on failure but instead returns an
#    additional second result, a boolean indicating success:
   A menudo no estamos seguros del tipo dinamico de un valor de interfaz, y nos
   gustaria probar si es algun tipo particular. Si la afirmacion de tipo aparece
   en una asignacion en la que se esperan dos resultados, como las siguientes
   declaraciones, la operacion no entra en panico cuando se produce un error,
   sino que devuelve un segundo resultado adicional, un booleano que indica
   exito:

#    ..src > go
#      var w io.Writer = os.Stdout
#      f, ok := w.(*os.File)      // success: ok, f == os.Stdout
#      b, ok := w.(*bytes.Buffer) // failure: !ok, b == nil
#    < src..
   ..src > go
     var w io.Writer = os.Stdout
     f, ok := w.(*os.File)      // exito: ok, f == os.Stdout
     b, ok := w.(*bytes.Buffer) // fallo: !ok, b == nil
   < src..

#    The second result is conventionally assigned to a variable named @c(ok). If
#    the operation failed, @c(ok) is false, and the first result is equal to the
#    zero value of the asserted type, which in this example is a nil
#    @c(*bytes.Buffer).
   El segundo resultado es asignado convencionalmente a una variable llamada
   @c(ok). Si la operacion ha fallado, @c(ok) es falso, y el primer resultado es
   igual al valor cero del tipo afirmado, que en este ejemplo es nil
   @c(*bytes.Buffer).

#    The @c(ok) result is often immediately used to decide what to do next. The
#    extended form of the if statement makes this quite compact:
   El resultado @c(ok) a menudo se utiliza de inmediato para decidir que hacer a
   continuacion. La forma extendida de la sentencia @c(if) hace esto muy compacto:

#    ..src > go
#      if f, ok := w.(*os.File); ok {
#        // ...use f...
#      }
#    < src..
   ..src > go
     if f, ok := w.(*os.File); ok {
       // ...use f...
     }
   < src..

#    When the operand of a type assertion is a variable, rather than invent
#    another name for the new local variable, you’ll sometimes see the original
#    name reused, shadowing the original, like this:
   Cuando el operando de una afirmacion de tipo es una variable, en lugar de
   inventar otro nombre para la nueva variable local, a veces vera el nombre
   original reutilizado, ocultando el original, asi:

#    ..src > go
#      if w, ok := w.(*os.File); ok {
#        // ...use w...
#      }
#    < src..
   ..src > go
     if w, ok := w.(*os.File); ok {
       // ...utilizar w...
     }
   < src..

# ** Section 7.11 <> Discriminating Errors with Type Assertions
** Seccion 7.11 <> Discriminacion de Errores con Afirmaciones de Tipo

#    Consider the set of errors returned by file operations in the @c(os)
#    package. I/O can fail for any number of reasons, but three kinds of failure
#    often must be handled differently: file already exists (for create
#    operations), file not found (for read operations), and permission denied. The
#    @c(os) package provides these three helper functions to classify the failure
#    indicated by a given @c(error) value:
   Consideremos el conjunto de errores devueltos por las operaciones de archivos
   en el paquete @c(os). Las E/S pueden fallar por varias razones, pero tres
   tipos de fallos a menudo deben manejarse de manera diferente: el archivo ya
   existe (para las operaciones de creacion), el archivo no se encuentra (para
   operaciones de lectura) y el permiso esta denegado. El paquete @c(os)
   proporciona estas tres funciones de ayuda para clasificar el fallo indicado
   por un determinado valor @c(error):

#    ..src > go
#      package os
#
#      func IsExist(err error) bool
#      func IsNotExist(err error) bool
#      func IsPermission(err error) bool
#    < src..
   ..src > go
     package os

     func IsExist(err error) bool
     func IsNotExist(err error) bool
     func IsPermission(err error) bool
   < src..

#    A naïve implementation of one of these predicates might check that the error
#    message contains a certain substring,
   Una implementacion naïve de uno de estos predicados podria comprobar que el
   mensaje de error contenga una cierta subcadena,

#    ..src > go
#      func IsNotExist(err error) bool {
#        // NOTE: not robust!
#        return strings.Contains(err.Error(), "file does not exist")
#      }
#    < src..
   ..src > go
     func IsNotExist(err error) bool {
       // NOTA: no es robusto!
       return strings.Contains(err.Error(), "file does not exist")
     }
   < src..

#    but because the logic for handling I/O errors can vary from one platform to
#    another, this approach is not robust and the same failure may be reported
#    with a variety of different error messages. Checking for substrings of error
#    messages may be useful during testing to ensure that functions fail in the
#    expected manner, but it’s inadequate for production code.
   Pero debido a que la logica para manejar los errores de E/S puede variar de
   una plataforma a otra, este enfoque no es robusto y el mismo fallo puede ser
   reportado con una variedad de diferentes mensajes de error. La comprobacion
   de subcadenas de mensajes de error puede ser util durante la prueba para
   asegurarse de que las funciones fallan de la manera esperada, pero es
   inadecuado para el codigo en produccion.

#    A more reliable approach is to represent structured error values using a
#    dedicated type. The os package defines a type called @c(PathError) to
#    describe failures involving an operation on a file path, like @c(Open) or
#    @c(Delete), and a variant called @c(LinkError) to describe failures of
#    operations involving two file paths, like @c(Symlink) and @c(Rename). Here’s
#    @c(os.PathError):
   Un enfoque mas confiable es representar valores de error estructurados
   utilizando un tipo especifico. El paquete OS define un tipo llamado
   @c(PathError) para describir las fallas que implican una operacion en una
   ruta de archivo, como @c(Open) o @c(Delete), y una variante llamada
   @c(LinkError) para describir los frallos de las operaciones que implican dos
   rutas de archivos, como @c(Symlink) y @c(Rename). Aqui esta @c(os.PathError):

#    ..src > go
#      package os
#
#      // PathError records an error and the operation and file path that caused it.
#      type PathError struct {
#        Op   string
#        Path string
#        Err  error
#      }
#
#      func (e *PathError) Error() string {
#        return e.Op + " " + e.Path + ": " + e.Err.Error()
#      }
#    < src..
   ..src > go
     package os

     // PathError registra un error y la operacion y ruta de archivo que lo causo.
     type PathError struct {
       Op   string
       Path string
       Err  error
     }

     func (e *PathError) Error() string {
       return e.Op + " " + e.Path + ": " + e.Err.Error()
     }
   < src..

#    Most clients are oblivious to @c(PathError) and deal with all errors in a
#    uniform way by calling their @c(Error) methods. Although @c(PathError)’s
#    @c(Error) method forms a message by simply concatenating the fields,
#    @c(PathError)’s structure preserves the underlying components of the error.
#    Clients that need to distinguish one kind of failure from another can use a
#    type assertion to detect the specific type of the error; the specific type
#    provides more detail than a simple string.
   La mayoria de los clientes no son conscientes de @c(PathError) y el manejo
   con todos los errores de una manera uniforme llamando a sus metodos de
   @c(Error). Aunque el metodo @c(Error) de @c(PathError) forma un mensaje
   simplemente concatenando los campos, la estructura de @c(PathError) conserva
   los componentes subyacentes del error. Los clientes que necesitan distinguir
   un tipo de fallo de otro pueden usar una afirmacion de tipo para detectar el
   tipo especifico del error; el tipo especifico proporciona mas detalle que una
   simple cadena.

#    ..src > go
#      _, err := os.Open("/no/such/file")
#      fmt.Println(err) // "open /no/such/file: No such file or directory"
#      fmt.Printf("%#v\n", err)
#      // Output:
#      // &os.PathError{Op:"open", Path:"/no/such/file", Err:0x2}
#    < src..
   ..src > go
     _, err := os.Open("/no/such/file")
     fmt.Println(err) // "open /no/such/file: No such file or directory"
     fmt.Printf("%#v\n", err)
     // Salida:
     // &os.PathError{Op:"open", Path:"/no/such/file", Err:0x2}
   < src..

#    That’s how the three helper functions work. For example, @c(IsNotExist),
#    shown below, reports whether an error is equal to @c(syscall.ENOENT)
#    (@l(#Section 7.8<>§7.8)) or to the distinguished error @c(os.ErrNotExist)
#    (see @c(io.EOF) in @l(#Section 5.4.2<>§5.4.2)), or is a @c(*PathError) whose
#    underlying error is one of those two.
   Asi funcionan las tres funciones auxiliares. Por ejemplo, @c(IsNotExist), que
   se muestra a continuacion, informa si un error es igual a @c(syscall.ENOENT)
   (@l(#Seccion 7.8<>§7.8)) o al error distinguido @c(os.ErrNotExist) (vea
   @c(io.EOF) en la @l(#Seccion 5.4.2<>§5.4.2)), o es un @c(*PathError) cuyo
   error subyacente es uno de esos dos.

#    ..src > go
#      import (
#        "errors"
#        "syscall"
#      )
#
#      var ErrNotExist = errors.New("file does not exist")
#
#      // IsNotExist returns a boolean indicating whether the error is known to
#      // report that a file or directory does not exist. It is satisfied by
#      // ErrNotExist as well as some syscall errors.
#      func IsNotExist(err error) bool {
#        if pe, ok := err.(*PathError); ok {
#          err = pe.Err
#        }
#        return err == syscall.ENOENT || err == ErrNotExist
#      }
#    < src..
   ..src > go
     import (
       "errors"
       "syscall"
     )

     var ErrNotExist = errors.New("file does not exist")

     // IsNotExist regresa un booleano que indica si se conoce el error
     // informa que no existe un archivo o directorio. Se satisface por
     // ErrNotExist asi como algunos errores syscall.
     func IsNotExist(err error) bool {
       if pe, ok := err.(*PathError); ok {
         err = pe.Err
       }
       return err == syscall.ENOENT || err == ErrNotExist
     }
   < src..

#    And here it is in action:
   Y aqui esta en accion:

#    ..src > go
#      _, err := os.Open("/no/such/file")
#      fmt.Println(os.IsNotExist(err)) // "true"
#    < src..
   ..src > go
     _, err := os.Open("/no/such/file")
     fmt.Println(os.IsNotExist(err)) // "true"
   < src..

#    Of course, @c(PathError)’s structure is lost if the error message is combined
#    into a larger string, for instance by a call to @c(fmt.Errorf). Error
#    discrimination must usually be done immediately after the failing operation,
#    before an error is propagated to the caller.
   Por supuesto, la estructura @c(PathError) se pierde pierde si el mensaje de
   error se combina en una cadena mas grande, por ejemplo, mediante una llamada
   a @c(fmt.Errorf). La discriminacion de errores se debe hacer generalmente
   inmediatamente despues de la operacion fallida, antes de que un error se
   propague al llamador.

# ** Section 7.12 <> Querying Behaviors with Interface Type Assertions
** Seccion 7.12 <> Consultar Comportamientos con Afirmaciones de Tipo de Interfaz

#    The logic below is similar to the part of the @c(net/http) web server
#    responsible for writing HTTP header fields such as @c("Content-type:
#    text/html"). The @c(io.Writer) @c(w) represents the HTTP response; the
#    bytes written to it are ultimately sent to someone’s web browser.
   La siguiente logica es similar a la parte del servidor web @c(net/http)
   responsable de escribir campos de cabecera HTTP como @c("Content-type:
   text/html"). El @c(io.Writer) @c(w) representa la respuesta HTTP; Los bytes
   escritos en el, se envian en ultima instancia a algun navegador web.

#    ..src > go
#      func writeHeader(w io.Writer, contentType string) error {
#        if _, err := w.Write([]byte("Content-Type: ")); err != nil {
#          return err
#        }
#        if _, err := w.Write([]byte(contentType)); err != nil {
#          return err
#        }
#        // ...
#      }
#    < src..
   ..src > go
     func writeHeader(w io.Writer, contentType string) error {
       if _, err := w.Write([]byte("Content-Type: ")); err != nil {
         return err
       }
       if _, err := w.Write([]byte(contentType)); err != nil {
         return err
       }
       // ...
     }
   < src..

#    Because the @c(Write) method requires a byte slice, and the value we wish to
#    write is a string, a @c{[]byte(...)} conversion is required. This conversion
#    allocates memor y and makes a copy, but the copy is thrown away almost
#    immediately after. Let’s pretend that this is a core part of the web server
#    and that our profiling has revealed that this memory allocation is slowing it
#    down. Can we avoid allocating memory here?
   Debido a que el metodo @c(Write) requiere una slice de bytes, y el valor que
   desea escribir es una cadena, se requiere una conversion @c{[]byte(...)}.
   Esta conversion asigna memoria y hace una copia, pero la copia se tira casi
   inmediatamente despues. Vamos a pretender que esta es una parte fundamental
   del servidor web y que nuestro perfil ha revelado que esta asignacion de
   memoria se esta ralentizando. ¿Podemos evitar asignar memoria aqui?

#    The @c(io.Writer) interface tells us only one fact about the concrete type
#    that @c(w) holds: that bytes may be written to it. If we look behind the
#    curtains of the @c(net/http) package, we see that the dynamic type that @c(w)
#    holds in this program also has a @c(WriteString) method that allows strings
#    to be efficiently written to it, avoiding the need to allocate a temporary
#    copy. (This may seem like a shot in the dark, but a number of important types
#    that satisfy @c(io.Writer) also have a @c(WriteString) method, including
#    @c(*bytes.Buffer), @c(*os.File) and @c(*bufio.Writer).)
   La interfaz @c(io.Writer) nos informa solo un hecho sobre el tipo concreto
   que @c(w) almacena: que los bytes se pueden escribir en el. Si miramos detras
   de cortinas del paquete @c(net/http), vemos que el tipo dinamico que @c(w)
   tiene en este programa tambien tiene un metodo @c(WriteString) que permite
   que las cadenas sean escritas eficientemente, evitando la necesidad de
   asignar una copia temporal. (Esto puede parecer un disparo en la oscuridad,
   pero una serie de tipos importantes que satisfacen @c(io.Writer) tambien
   tienen un metodo @c(WriteString), incluyendo @c(*bytes.Buffer), @c(*os.File)
   y @c(*bufio.Writer)).

#    We cannot assume that an arbitrary @c(io.Writer) @c(w) also has the
#    @c(WriteString) method. But we can define a new interface that has just this
#    method and use a type assertion to test whether the dynamic type of @c(w)
#    satisfies this new interface.
   No podemos asumir que un @c(w) @c(io.Writer) arbitrario tambien tiene el
   metodo @c(WriteString). Pero podemos definir una nueva interfaz que tiene
   solo este metodo y utilizar una afirmacion de tipo para probar si el tipo
   dinamico de @c(w) satisface esta nueva interfaz.

#    ..src > go
#      // writeString writes s to w.
#      // If w has a WriteString method, it is invoked instead of w.Write.
#      func writeString(w io.Writer, s string) (n int, err error) {
#        type stringWriter interface {
#          WriteString(string) (n int, err error)
#        }
#        if sw, ok := w.(stringWriter); ok {
#          return sw.WriteString(s) // avoid a copy
#        }
#        return w.Write([]byte(s)) // allocate temporary copy
#      }
#
#      func writeHeader(w io.Writer, contentType string) error {
#        if _, err := writeString(w, "Content-Type: "); err != nil {
#          return err
#        }
#        if _, err := writeString(w, contentType); err != nil {
#          return err
#        }
#        // ...
#      }
#    < src..
   ..src > go
     // writeString escribe s a w.
     // Si w tiene un metodo WriteString, se invoca en lugar de w.Write.
     func writeString(w io.Writer, s string) (n int, err error) {
       type stringWriter interface {
         WriteString(string) (n int, err error)
       }
       if sw, ok := w.(stringWriter); ok {
         return sw.WriteString(s) // evitar copia
       }
       return w.Write([]byte(s)) // almacena una copia temporal
     }

     func writeHeader(w io.Writer, contentType string) error {
       if _, err := writeString(w, "Content-Type: "); err != nil {
         return err
       }
       if _, err := writeString(w, contentType); err != nil {
         return err
       }
       // ...
     }
   < src..

#    To avoid repeating ourselves, we’ve moved the check into the utility function
#    @c(writeString), but it is so useful that the standard library provides it as
#    @c(io.WriteString). It is the recommended way to write a string to an
#    @c(io.Writer).
   Para evitar repetirnos a nosotros mismos, hemos movido la comprobacion a la
   funcion de utilidad @c(writeString), pero es tan util que la libreria
   estandar la proporciona como @c(io.WriteString). Es la forma recomendada de
   escribir una cadena a un @c(io.Writer).

#    What’s curious in this example is that there is no standard interface that
#    defines the @c(WriteString) method and specifies its required
#    behavior. Furthermore, whether or not a concrete type satisfies the
#    @c(stringWriter) interface is determined only by its methods, not by any
#    declared relationship between it and the interface type. What this means is
#    that the technique above relies on the assumption that @e(if) a type
#    satisfies the interface below, @e(then) @c[WriteString(s)] must have the same
#    effect as @c{Write([]byte(s))}.
   Lo curioso en este ejemplo es que no existe una interfaz estandar que defina
   el metodo @c(WriteString) y especifique su comportamiento requerido. Ademas,
   si un tipo concreto satisface o no la interfaz @c(stringWriter) se determina
   solo por sus metodos, y no por ninguna relacion declarada entre el y el tipo
   de interfaz. Lo que esto significa es que la tecnica anterior se basa en la
   suposicion de que @e(si) un tipo satisface la interfaz de abajo, @e(entonces)
   @c[WriteString(s)] debe tener el mismo efecto que @c{Write([]byte(s))}.

#    ..src > go
#      interface {
#        io.Writer
#        WriteString(s string) (n int, err error)
#      }
#    < src..
   ..src > go
     interface {
       io.Writer
       WriteString(s string) (n int, err error)
     }
   < src..

#    Although @c(io.WriteString) documents its assumption, few functions that call
#    it are likely to document that they too make the same assumption. Defining a
#    method of a particular type is taken as an implicit assent for a certain
#    behavioral contract. Newcomers to Go, especially those from a background in
#    strongly typed languages, may find this lack of explicit intention
#    unsettling, but it is rarely a problem in practice. With the exception of the
#    empty interface @c(interface{}), interface types are seldom satisfied by
#    unintended coincidence.
   Aunque @c(io.WriteString) documenta su suposicion, pocas funciones que la
   llaman probablemente documenten que estas tambien hacen el mismo
   supuesto. Definir un metodo de un tipo particular se toma como un
   asentimiento implicito para un determinado contrato de comportamiento. Los
   recien llegados a Go, especialmente aquellos de un fondo en lenguajes
   fuertemente tipados, pueden encontrar esta falta de intencion explicita
   inquietante, pero rara vez es un problema en la practica. Con la excepcion de
   la interfaz vacia @c(interface{}), los tipos de interfaz rara vez son
   satisfechas por coincidencia involuntaria.

#    The @c(writeString) function above uses a type assertion to see whether a
#    value of a general interface type also satisfies a more specific interface
#    type, and if so, it uses the behaviors of the specific interface. This
#    technique can be put to good use whether or not the queried interface is
#    standard like @c(io.ReadWriter) or user-defined like @c(stringWriter).
   La anterior funcion @c(writeString) utiliza una afirmacion de tipo para ver
   si un valor de un tipo de interfaz general tambien satisface un tipo de
   interfaz mas especifico, y de ser asi, se utiliza el comportamiento de la
   interfaz especifica. Esta tecnica se puede poner en uso, sea o no la interfaz
   a consultar estandar como @c(io.ReadWriter) o definida por el usuario como
   @c(stringWriter).

#    It’s also how @c(fmt.Fprintf) distinguishes values that satisfy @c(error) or
#    @c(fmt.Stringer) from all other values. Within @c(fmt.Fprintf), there is a
#    step that converts a single operand to a string, something like this:
   Tambien es como @c(fmt.Fprintf) distingue valores que satisfacen @c(error) o
   @c(fmt.Stringer) de todos los demas valores. Dentro de @c(fmt.Fprintf), hay
   un paso que convierte un unico operando en una cadena, algo asi:

#    ..src > go
#      package fmt
#
#      func formatOneValue(x interface{}) string {
#        if err, ok := x.(error); ok {
#          return err.Error()
#        }
#        if str, ok := x.(Stringer); ok {
#          return str.String()
#        }
#        // ...all other types...
#      }
#    < src..
   ..src > go
     package fmt

     func formatOneValue(x interface{}) string {
       if err, ok := x.(error); ok {
         return err.Error()
       }
       if str, ok := x.(Stringer); ok {
         return str.String()
       }
       // ...all other types...
     }
   < src..

#    If @c(x) satisfies either of the two interfaces, that determines the
#    formatting of the value. If not, the default case handles all other types
#    more or less uniformly using reflection; we’ll find out how in @l(#Chapter
#    12).
   Si @c(x) satisface cualquiera de las dos interfaces, eso determina el formato
   del valor. Si no, el caso por defecto maneja todos los demas tipos mas o
   menos uniformemente usando la reflexion; vamos a averiguar como en el
   @l(#Capitulo 12).

#    Again, this makes the assumption that any type with a @c(String) method
#    satisfies the behavioral contract of @c(fmt.Stringer), which is to return a
#    string suitable for printing.
   De nuevo, esto hace la suposicion de que cualquier tipo con un metodo
   @c(String) satisface el contrato de comportamiento de @c(fmt.Stringer), que
   es devolver una cadena adecuada para la impresion.

# ** Section 7.13 <> Type Switches
** Seccion 7.13 <> Switches de Tipo

#    Interfaces are used in two distinct styles. In the first style, exemplified
#    by @c(io.Reader), @c(io.Writer), @c(fmt.Stringer), @c(sort.Interface),
#    @c(http.Handler), and @c(error), an interface’s methods express the
#    similarities of the concrete types that satisfy the interface but hide the
#    representation details and intrinsic operations of those concrete types. The
#    emphasis is on the methods, not on the concrete types.
   Las interfaces se utilizan en dos estilos distintos. En el primer estilo,
   ejemplificado por @c(io.Reader), @c(io.Writer), @c(fmt.Stringer),
   @c(sort.Interface), @c(http.Handler) y @c(error), los metodos de una interfaz
   expresan las similitudes de los tipos concretos que satisfacen la interfaz,
   pero ocultan los detalles de representacion y operaciones intrinsecas de esos
   tipos concretos. El enfasis esta en los metodos, no en los tipos concretos.

#    The second style exploits the ability of an interface value to hold values of
#    a variety of concrete types and considers the interface to be the @e(union)
#    of those types. Type assertions are used to discriminate among these types
#    dynamically and treat each case differently. In this style, the emphasis is
#    on the concrete types that satisfy the interface, not on the interface’s
#    methods (if indeed it has any), and there is no hiding of information. We’ll
#    describe interfaces used this way as @e(discriminated unions).
   El segundo estilo explota la capacidad de un valor interfaz para contener
   valores de una variedad de tipos concretos y considera que la interfaz es la
   @e(union) de esos tipos. Las afirmaciones de tipo se utilizan para
   discriminar entre estos tipos dinamicamente y tratar cada caso de manera
   diferente. En este estilo, el enfasis esta en los tipos concretos que
   satisfacen la interfaz, no en los metodos de la interfaz (si de hecho tiene
   alguno), y no se oculta la informacion. Vamos a describir interfaces
   utilizadas de esta manera como los @e(uniones discriminadas).

#    If you’re familiar with object-oriented programming, you may recognize these
#    two styles as @e(subtype polymorphism) and @e(ad hoc polymorphism), but you
#    needn’t remember those terms. For the remainder of this chapter, we’ll
#    present examples of the second style.
   Si esta familiarizado con la programacion orientada a objetos, es posible
   reconocer estos dos estilos como @e(polimorfismo de subtipos) y el
   @e(polimorfismo ad hoc), pero no necesita recordar esos terminos. Para el
   resto de este capitulo, presentaremos ejemplos del segundo estilo.

#    Go’s API for querying an SQL database, like those of other languages, lets us
#    cleanly separate the fixed part of a query from the variable parts. An
#    example client might look like this:
   La API de Go para consultar una base de datos SQL, como las de otros
   lenguajes, nos permite separar de forma clara la parte fija de una consulta
   de las partes variables. Un ejemplo de cliente podria tener este aspecto:

#    ..src > go
#      import "database/sql"
#
#      func listTracks(db sql.DB, artist string, minYear, maxYear int) {
#        result, err := db.Exec(
#          "SELECT * FROM tracks WHERE artist = ? AND ? <= year AND year <= ?",
#          artist, minYear, maxYear)
#        // ...
#      }
#    < src..
   ..src > go
     import "database/sql"

     func listTracks(db sql.DB, artist string, minYear, maxYear int) {
       result, err := db.Exec(
         "SELECT * FROM tracks WHERE artist = ? AND ? <= year AND year <= ?",
         artist, minYear, maxYear)
       // ...
     }
   < src..

#    The @c(Exec) method replaces each @c('?') in the query string with an SQL
#    literal denoting the corresponding argument value, which may be a boolean, a
#    number, a string, or @c(nil). Constructing queries this way helps avoid SQL
#    injection attacks, in which an adversary takes control of the query by
#    exploiting improper quotation of input data. Within @c(Exec), we might find a
#    function like the one below, which converts each argument value to its
#    literal SQL notation.
   El metodo @c(Exec) reemplaza cada @c('?') en la cadena de consulta con un
   literal SQL que denota el valor del argumento correspondiente, que puede ser
   un valor booleano, un numero, una cadena, o @c(nil). La construccion de
   consultas de esta manera ayuda a evitar ataques de inyeccion SQL, en el que
   un adversario toma el control de la consulta mediante la explotacion de una
   cita incorrecta de datos de entrada. Dentro de @c(Exec), podriamos encontrar
   una funcion como la siguiente, que convierte cada valor de argumento para su
   notacion SQL.

#    ..src > go
#      func sqlQuote(x interface{}) string {
#        if x == nil {
#          return "NULL"
#        } else if _, ok := x.(int); ok {
#          return fmt.Sprintf("%d", x)
#        } else if _, ok := x.(uint); ok {
#          return fmt.Sprintf("%d", x)
#        } else if b, ok := x.(bool); ok {
#          if b {
#            return "TRUE"
#          }
#          return "FALSE"
#        } else if s, ok := x.(string); ok {
#          return sqlQuoteString(s) // (not shown)
#        } else {
#          panic(fmt.Sprintf("unexpected type %T: %v", x, x))
#        }
#      }
#    < src..
   ..src > go
     func sqlQuote(x interface{}) string {
       if x == nil {
         return "NULL"
       } else if _, ok := x.(int); ok {
         return fmt.Sprintf("%d", x)
       } else if _, ok := x.(uint); ok {
         return fmt.Sprintf("%d", x)
       } else if b, ok := x.(bool); ok {
         if b {
           return "TRUE"
         }
         return "FALSE"
       } else if s, ok := x.(string); ok {
         return sqlQuoteString(s) // (no se muestra)
       } else {
         panic(fmt.Sprintf("unexpected type %T: %v", x, x))
       }
     }
   < src..

#    A @c(switch) statement simplifies an @c(if)-@c(else) chain that performs a
#    series of value equality tests.  An analogous @e(type switch) statement
#    simplifies an @c(if)-@c(else) chain of type assertions.
   Una sentencia @c(switch) simplifica una cadena @c(if)-@c(else) que realiza
   una serie de pruebas de igualdad de valor. De forma analoga una sentencia
   @c(switch de tipos) simplifica una cadena @c(if)-@c(else) de afirmaciones de
   tipo.

#    In its simplest form, a type switch looks like an ordinary switch statement
#    in which the operand is @c[x.(type)]—that’s literally the keyword
#    @c(type)—and each case has one or more types. A type switch enables a
#    multi-way branch based on the interface value’s dynamic type. The @c(nil)
#    case matches if @c(x == nil), and the @c(default) case matches if no other
#    case does. A type switch for @c(sqlQuote) would have these cases:
   En su forma mas simple, un switch de tipos se parece a una sentencia switch
   ordinaria en la que el operando es @c[x.(type)]–esto es, literalmente, la
   palabra clave @c(type)–y cada caso tiene uno o mas tipos. Un conmutador de
   tipo habilita una ramificacion multidireccional basada en el tipo dinamico
   del valor de la interfaz. El caso @c(nil) coincide si @c(x == nil), y el caso
   @c(default) coincide si lo hace ningun otro caso. Un switch de tipos para
   @c(sqlQuote) tendria estos casos:

#    ..src > go
#      switch x.(type) {
#      case nil:       // ...
#      case int, uint: // ...
#      case bool:      // ...
#      case string:    // ...
#      default:        // ...
#      }
#    < src..
   ..src > go
     switch x.(type) {
     case nil:       // ...
     case int, uint: // ...
     case bool:      // ...
     case string:    // ...
     default:        // ...
     }
   < src..

#    As with an ordinary switch statement (@l(#Section 1.8<>§1.8)), cases are
#    considered in order and, when a match is found, the case’s body is
#    executed. Case order becomes significant when one or more case types are
#    interfaces, since then there is a possibility of two cases matching. The
#    position of the @c(default) case relative to the others is immaterial. No
#    @c(fallthrough) is allowed.
   Al igual que con una sentencia @c(switch) ordinaria (@l(#Seccion 1.8<>§1.8)),
   los casos se consideran en orden y, cuando se encuentra una coincidencia, se
   ejecuta el cuerpo del caso. El orden de los casos se vuelve significativo
   cuando uno o mas tipos de casos son interfaces, ya que entonces existe la
   posibilidad de que dos casos coincidan. La posicion del caso @c(default) en
   relacion con los demas es irrelevante. no esta permitido @c(fallthrough).

#    Notice that in the original function, the logic for the @c(bool) and
#    @c(string) cases needs access to the value extracted by the type
#    assertion. Since this is typical, the type switch statement has an extended
#    form that binds the extracted value to a new variable within each case:
   Observe que en la funcion original, la logica de los casos @c(bool) y
   @c(string) necesita acceso al valor extraido por la afirmacion tipo. Dado que
   esto es tipico, la instruccion switch de tipo tiene una forma extendida que
   enlaza el valor extraido con una nueva variable dentro de cada caso:

#    ..src > go
#      switch x := x.(type) { /* ... */ }
#    < src..
   ..src > go
     switch x := x.(type) { /* ... */ }
   < src..

#    Here we’ve called the new variables @c(x) too; as with type assertions, reuse
#    of variable names is common. Like a @c(switch) statement, a type switch
#    implicitly creates a lexical block, so the declaration of the new variable
#    called @c(x) does not conflict with a variable @c(x) in an outer block. Each
#    @c(case) also implicitly creates a separate lexical block.
   Aqui hemos llamado las nuevas variables @c(x) tambien; Como con las
   aserciones de tipo, la reutilizacion de nombres de variables es comun. Al
   igual que una instruccion @c(switch), un switch de tipo crea implicitamente
   un bloque lexico, por lo que la declaracion de la nueva variable llamada
   @c(x) no entra en conflicto con una variable @c(x) en un bloque externo. Cada
   @c(case) tambien crea implicitamente un bloque lexico independiente.

#    Rewriting @c(sqlQuote) to use the extended form of type switch makes it
#    significantly clearer:
   Reescribiendo @c(sqlQuote) para utilizar la forma extendida de un switch de
   tipo lo hace significativamente mas claro:

#    ..src > go
#      func sqlQuote(x interface{}) string {
#        switch x := x.(type) {
#        case nil:
#          return "NULL"
#        case int, uint:
#          return fmt.Sprintf("%d", x) // x has type interface{} here.
#        case bool:
#          if x {
#            return "TRUE"
#          }
#          return "FALSE"
#        case string:
#          return sqlQuoteString(x) // (not shown)
#        default:
#          panic(fmt.Sprintf("unexpected type %T: %v", x, x))
#        }
#      }
#    < src..
   ..src > go
     func sqlQuote(x interface{}) string {
       switch x := x.(type) {
       case nil:
         return "NULL"
       case int, uint:
         return fmt.Sprintf("%d", x) // aqui x tiene tipo interface{}.
       case bool:
         if x {
           return "TRUE"
         }
         return "FALSE"
       case string:
         return sqlQuoteString(x) // (no se muestra)
       default:
         panic(fmt.Sprintf("unexpected type %T: %v", x, x))
       }
     }
   < src..

#    In this version, within the block of each single-type case, the variable
#    @c(x) has the same type as the case. For instance, @c(x) has type @c(bool)
#    within the @c(bool) case and @c(string) within the @c(string) case. In all
#    other cases, @c(x) has the (interface) type of the @c(switch) operand, which
#    is @c(interface{}) in this example. When the same action is required for
#    multiple cases, like @c(int) and @c(uint), the type switch makes it easy to
#    combine them.
   En esta version, dentro del bloque de cada caso de tipo unico, la variable
   @c(x) tiene el mismo tipo que el caso. Por ejemplo, @c(x) tiene tipo @c(bool)
   dentro del caso @c(bool) y @c(string) dentro del caso @c(string). En todos
   los demas casos, @c(x) tiene el tipo (interfaz) del @c(switch) operante, que
   es @c(interface{}) en este ejemplo. Cuando se requiere la misma accion para
   varios casos, como @c(int) y @c(uint), el switch de tipo hace que sea facil
   combinarlos.

#    Although @c(sqlQuote) accepts an argument of any type, the function runs to
#    completion only if the argument’s type matches one of the cases in the type
#    switch; otherwise it panics with an @"(unexpected type) message. Although the
#    type of @c(x) is @c(interface{}), we consider it a @e(discriminated union) of
#    @c(int), @c(uint), @c(bool), @c(string), and @c(nil).
   Aunque @c(sqlQuote) acepta un argumento de cualquier tipo, la funcion solo se
   ejecuta si el tipo del argumento coincide con uno de los casos en el switch
   de tipo; de lo contrario, entra en panico con un mensaje de @"(tipo
   inesperado). Aunque el tipo de @c(x) es @c(interface{}), lo consideramos una
   union discriminada de @c(int), @c(uint), @c(bool), @c(string), y @c(nil).

# ** Section 7.14 <> Example: Token-Based XML Decoding
** Seccion 7.14 <> Ejemplo: Decodificacion XML Basada en Token

#    @l(#Section 4.5) showed how to decode JSON documents into Go data structures
#    with the @c(Marshal) and @c(Unmarshal) functions from the @c(encoding/json)
#    package. The @c(encoding/xml) package provides a similar API. This approach
#    is convenient when we want to construct a representation of the document
#    tree, but that’s unnecessary for many programs. The @c(encoding/xml) package
#    also provides a lower-level @e(token-based) API for decoding XML. In the
#    token-based style, the parser consumes the input and produces a stream of
#    tokens, primarily of four kinds—@c(StartElement), @c(EndElement),
#    @c(CharData), and @c(Comment)—each being a concrete type in the
#    @c(encoding/xml) package. Each call to @c[(*xml.Decoder).Token] returns a
#    token.
   La @l(#Seccion 4.5) mostro como decodificar documentos JSON en estructuras de
   datos Go con las funciones @c(Marshal) y @c(Unmarshal) del paquete
   @c(encoding/json). El paquete @c(encoding/xml) proporciona una API similar.
   Este enfoque es conveniente cuando queremos construir una representacion del
   arbol de documentos, pero eso es innecesario para muchos programas. El
   paquete @c(encoding/xml) tambien proporciona una API de bajo nivel @e(basada
   en tokens) para decodificar XML. En el estilo basada en tokens, el analizador
   consume la entrada y produce un flujo de tokens, principalmente de cuatro
   tipos–@c(StartElement), @c(EndElement), @c(CharData), y @c(Comment)–cada uno
   de los cuales es un tipo concreto en el paquete @c(encoding/xml). Cada
   llamada a @c[(*xml.Decoder).Token] devuelve un token.

#    The relevant parts of the API are shown here:
   Las partes relevantes de la API se muestran aqui:

#    ..figure > @c(encoding/xml)
   ..figure > @c(encoding/xml)

#      ..src > go
#        package xml
#
#        type Name struct {
#          Local string // e.g., "Title" or "id"
#        }
#
#        type Attr struct { // e.g., name="value"
#          Name Name
#          Value string
#        }
#
#        // A Token includes StartElement, EndElement, CharData,
#        // and Comment, plus a few esoteric types (not shown).
#        type Token interface{}
#        type StartElement struct { // e.g., <name>
#          Name Name
#          Attr []Attr
#        }
#        type EndElement struct { Name Name } // e.g., </name>
#        type CharData []byte                 // e.g., <p>CharData</p>
#        type Comment []byte                  // e.g., <!-- Comment -->
#
#        type Decoder struct{ /* ... */ }
#
#        func NewDecoder(io.Reader) *Decoder
#        func (*Decoder) Token() (Token, error) // returns next Token in sequence
#      < src..
     ..src > go
       package xml

       type Name struct {
         Local string     // por ejemplo, "Title" o "id"
       }

       type Attr struct { // por ejemplo, name="value"
         Name Name
         Value string
       }

       // Un Token incluye StartElement, EndElement, CharData,
       // y Comment, mas algunos tipos esotericos (no mostrados).
       type Token interface{}
       type StartElement struct { // por ejemplo, <name>
         Name Name
         Attr []Attr
       }
       type EndElement struct { Name Name } // por ejemplo, </name>
       type CharData []byte                 // por ejemplo, <p>CharData</p>
       type Comment []byte                  // por ejemplo, <!-- Comment -->

       type Decoder struct{ /* ... */ }

       func NewDecoder(io.Reader) *Decoder
       func (*Decoder) Token() (Token, error) // regresa el sigiente token en la sequencia
     < src..

#    The @c(Token) interface, which has no methods, is also an example of a
#    discriminated union. The purpose of a traditional interface like
#    @c(io.Reader) is to hide details of the concrete types that satisfy it so
#    that new implementations can be created; each concrete type is treated
#    uniformly.  By contrast, the set of concrete types that satisfy a
#    discriminated union is fixed by the design and exposed, not
#    hidden. Discriminated union types have few methods; functions that operate on
#    them are expressed as a set of cases using a type switch, with different
#    logic in each case.
   La interfaz @c(Token), que no tiene metodos, es tambien un ejemplo de una
   union discriminada. El proposito de una interfaz tradicional como
   @c(io.Reader) es ocultar los detalles de los tipos concretos que lo
   satisfagan para que se puedan crear las nuevas implementaciones; cada tipo
   concreto es tratado uniformemente. Por el contrario, el conjunto de tipos
   concretos que satisfacen una union discriminada es fijada por el diseño y
   expuesto, no ocultado. Los tipos de union discriminados tienen pocos metodos;
   las funciones que actuan sobre ellas se expresan como un conjunto de casos
   utilizando un switch de tipo, con logica diferente en cada caso.

#    The @c(xmlselect) program below extracts and prints the text found beneath
#    certain elements in an XML document tree. Using the API above, it can do its
#    job in a single pass over the input without ever materializing the tree.
   El programa @$(xmlselect) a continuacion, extrae e imprime el texto encontrado
   bajo de ciertos elementos en un arbol de documentos XML. Usando la API
   anterior, puede hacer su trabajo en un solo paso sobre la entrada sin
   materializar el arbol.

#    ..figure > @l(gopl.io/ch7/xmlselect/main.go<>gopl.io/ch7/xmlselect)
   ..figure > @l(gopl.io/ch7/xmlselect/main.go<>gopl.io/ch7/xmlselect)

#      ..src > go
#        // Xmlselect prints the text of selected elements of an XML document.
#        package main
#
#        import (
#          "encoding/xml"
#          "fmt"
#          "io"
#          "os"
#          "strings"
#        )
#
#        func main() {
#          dec := xml.NewDecoder(os.Stdin)
#          var stack []string // stack of element names
#          for {
#            tok, err := dec.Token()
#            if err == io.EOF {
#              break
#            } else if err != nil {
#              fmt.Fprintf(os.Stderr, "xmlselect: %v\n", err)
#              os.Exit(1)
#            }
#            switch tok := tok.(type) {
#            case xml.StartElement:
#              stack = append(stack, tok.Name.Local) // push
#            case xml.EndElement:
#              stack = stack[:len(stack)-1] // pop
#            case xml.CharData:
#              if containsAll(stack, os.Args[1:]) {
#                fmt.Printf("%s: %s\n", strings.Join(stack, " "), tok)
#              }
#            }
#          }
#        }
#
#        // containsAll reports whether x contains the elements of y, in order.
#        func containsAll(x, y []string) bool {
#          for len(y) <= len(x) {
#            if len(y) == 0 {
#              return true
#            }
#            if x[0] == y[0] {
#              y = y[1:]
#            }
#            x = x[1:]
#          }
#          return false
#        }
#      < src..
     ..src > go
       // Xmlselect imprime el texto de los elemenos seleccionados de un documento XML.
       package main

       import (
         "encoding/xml"
         "fmt"
         "io"
         "os"
         "strings"
       )

       func main() {
         dec := xml.NewDecoder(os.Stdin)
         var stack []string // stack de nombres de elementos
         for {
           tok, err := dec.Token()
           if err == io.EOF {
             break
           } else if err != nil {
             fmt.Fprintf(os.Stderr, "xmlselect: %v\n", err)
             os.Exit(1)
           }
           switch tok := tok.(type) {
           case xml.StartElement:
             stack = append(stack, tok.Name.Local) // push
           case xml.EndElement:
             stack = stack[:len(stack)-1] // pop
           case xml.CharData:
             if containsAll(stack, os.Args[1:]) {
               fmt.Printf("%s: %s\n", strings.Join(stack, " "), tok)
             }
           }
         }
       }

       // containsAll informa si x contiene los elementos de y, en orden.
       func containsAll(x, y []string) bool {
         for len(y) <= len(x) {
           if len(y) == 0 {
             return true
           }
           if x[0] == y[0] {
             y = y[1:]
           }
           x = x[1:]
         }
         return false
       }
     < src..


#    Each time the loop in @c(main) encounters a @c(StartElement), it pushes the
#    element’s name onto a stack, and for each @c(EndElement) it pops the name
#    from the stack. The API guarantees that the sequence of @c(StartElement) and
#    @c(EndElement) tokens will be properly matched, even in illformed
#    documents. @c(Comments) are ignored. When @c(xmlselect) encounters a
#    @c(CharData), it prints the text only if the stack contains all the elements
#    named by the command-line arguments, in order.
   Cada vez que el bucle en @c(main) encuentra un @c(StartElement), empuja el
   nombre del elemento en una pila, y para cada @c(EndElement) saca el nombre de
   la pila. La API garantiza que la secuencia de tokens de @c(StartElement) y
   @c(EndElement) se correspondan correctamente, incluso en documentos con
   formato incorrecto. Los @c(Comments) se ignoran. Cuando @c(xmlselect)
   encuentra un @c(CharData), imprime el texto solo si la pila contiene todos
   los elementos nombrados por los argumentos de linea de comandos, en orden.

#    The command below prints the text of any @c(h2) elements appearing beneath
#    two levels of @c(div) elements. Its input is the XML specification, itself an
#    XML document.
   El siguiente comando imprime el texto de cualquier elemento @c(h2) que
   aparezca debajo de dos niveles de elementos @c(div). Su entrada es la
   especificacion XML, en un documento XML.

#    ..src > sh
#      $ go build gopl.io/ch1/fetch
#      $ ./fetch http://www.w3.org/TR/2006/REC-xml11-20060816 |
#          ./xmlselect div div h2
#      html body div div h2: 1 Introduction
#      html body div div h2: 2 Documents
#      html body div div h2: 3 Logical Structures
#      html body div div h2: 4 Physical Structures
#      html body div div h2: 5 Conformance
#      html body div div h2: 6 Notation
#      html body div div h2: A References
#      html body div div h2: B Definitions for Character Normalization
#      ...
#    < src..
   ..src > sh
     $ go build gopl.io/ch1/fetch
     $ ./fetch http://www.w3.org/TR/2006/REC-xml11-20060816 |
         ./xmlselect div div h2
     html body div div h2: 1 Introduction
     html body div div h2: 2 Documents
     html body div div h2: 3 Logical Structures
     html body div div h2: 4 Physical Structures
     html body div div h2: 5 Conformance
     html body div div h2: 6 Notation
     html body div div h2: A References
     html body div div h2: B Definitions for Character Normalization
     ...
   < src..

#    @b(Exercise 7.17): Extend @$(xmlselect) so that elements may be selected not
#    just by name, but by their attributes too, in the manner of CSS, so that, for
#    instance, an element like @c(<div id="page" class="wide">) could be selected
#    by a matching @c(id) or @c(class) as well as its name.
   @b(Ejercicio 7.17): Extiende @$(xmlselect) para que los elementos puedan ser
   seleccionados no solo por su nombre, sino tambien por sus atributos, a la
   manera de CSS, de modo que, por ejemplo, un elemento como @c(<div id="page"
   class="wide">) podria ser seleccionado encontrando su @c(id) o @c(class) ,
   asi como su nombre.

#    @b(Exercise 7.18): Using the token-based decoder API, write a program that
#    will read an arbitrary XML document and construct a tree of generic nodes
#    that represents it. Nodes are of two kinds: @c(CharData) nodes represent text
#    strings, and @c(Element) nodes represent named elements and their
#    attributes. Each element node has a slice of child nodes.
   @b(Ejercicio 7.18): Utilizando el API decodificador basado en token, escribir
   un programa que lea un documento XML arbitrario y construya un arbol de nodos
   genericos que lo represente. Los nodos son de dos tipos: los nodos
   @c(CharData) representan cadenas de texto, y los nodos @c(Element)
   representan elementos con nombre y atributos. Cada nodo de elemento tiene un
   slice de nodos secundarios.

#    You may find the following declarations helpful.
   Puede que las siguientes declaraciones sean utiles.

#    ..src > go
#      import "encoding/xml"
#
#      type Node interface{} // CharData or *Element
#
#      type CharData string
#
#      type Element struct {
#        Type     xml.Name
#        Attr     []xml.Attr
#        Children []Node
#      }
#    < src..
   ..src > go
     import "encoding/xml"

     type Node interface{} // CharData or *Element

     type CharData string

     type Element struct {
       Type     xml.Name
       Attr     []xml.Attr
       Children []Node
     }
   < src..

# ** Section 7.15 <> A Few Words of Advice
** Seccion 7.15 <> Algunos Consejos

#    When designing a new package, novice Go programmers often start by creating a
#    set of interfaces and only later define the concrete types that satisfy
#    them. This approach results in many interfaces, each of which has only a
#    single implementation. Don’t do that. Such interfaces are unnecessary
#    abstractions; they also have a run-time cost. You can restrict which methods
#    of a type or fields of a struct are visible outside a package using the
#    export mechanism (@l(#Section 6.6<>§6.6)).  Interfaces are only needed when
#    there are two or more concrete types that must be dealt with in a uniform
#    way.
   Al diseñar un nuevo paquete, los programadores novatos en Go a menudo
   comienzan creando un conjunto de interfaces y solo mas tarde definen los
   tipos concretos que los satisfacen. Este enfoque resulta en muchas
   interfaces, cada una de las cuales tiene una sola implementacion. No lo
   hagas. Tales interfaces son abstracciones innecesarias; Tambien tienen un
   costo de tiempo de ejecucion. Puede restringir que metodos de un tipo o
   campos de una estructura son visibles fuera de un paquete utilizando el
   mecanismo de exportacion (@l(#Seccion 6.6<>§6.6)). Las interfaces solo son
   necesarias cuando hay dos o mas tipos concretos que deben tratarse de manera
   uniforme.

#    We make an exception to this rule when an interface is satisfied by a single
#    concrete type but that type cannot live in the same package as the interface
#    because of its dependencies. In that case, an interface is a good way to
#    decouple two packages.
   Hacemos una excepcion a esta regla cuando una interfaz es satisfecha por un
   solo tipo concreto pero ese tipo no puede vivir en el mismo paquete que la
   interfaz debido a sus dependencias. En ese caso, una interfaz es una buena
   manera de desacoplar dos paquetes.

#    Because interfaces are used in Go only when they are satisfied by two or more
#    types, they necessarily abstract away from the details of any particular
#    implementation. The result is smaller interfaces with fewer, simpler methods,
#    often just one as with @c(io.Writer) or @c(fmt.Stringer). Small interfaces
#    are easier to satisfy when new types come along. A good rule of thumb for
#    interface design is @e(ask only for what you need).
   Debido a que las interfaces se usan en Go solo cuando estan satisfechas por
   dos o mas tipos, necesariamente se abstraen de los detalles de cualquier
   implementacion en particular. El resultado es interfaces mas pequeños con
   pocos, metodos mas simples, a menudo, solo como uno con @c(io.Writer) o
   @c(fmt.Stringer). Las interfaces pequeñas son mas faciles de satisfacer
   cuando aparecen nuevos tipos. Una buena regla de oro para el diseño de
   interfaces es @e(pedir solo lo que necesitas).

#    This concludes our tour of methods and interfaces. Go has great support for
#    the objectoriented style of programming, but this does not mean you need to
#    use it exclusively. Not everything need be an object; standalone functions
#    have their place, as do unencapsulated data types. Observe that together, the
#    examples in the first five chapters of this book call no more than two dozen
#    methods, like @c(input.Scan), as opposed to ordinary function calls like
#    @c(fmt.Printf).
   Esto concluye nuestro recorrido de metodos e interfaces. Go tiene un gran
   soporte para el estilo de programacion orientado a objetos, pero esto no
   significa que necesite usarlo exclusivamente. No todo debe ser un objeto; Las
   funciones independientes tienen su lugar, al igual que los tipos de datos no
   encapsulados. Observe que, en conjunto, los ejemplos en los primeros cinco
   capitulos de este libro llaman no mas de dos docenas de metodos, como
   @c(input.Scan), a diferencia de las llamadas de funcion ordinaria como
   @c(fmt.Printf).

# * Chapter 8 <> Goroutines and Channels
* Capitulo 8 <> Gorutinas y Canales
